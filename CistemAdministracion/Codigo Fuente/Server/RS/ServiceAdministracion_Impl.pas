unit ServiceAdministracion_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, 
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Ancestor Implementation:} DataAbstractService_Impl,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} LibraryAdministracion_Intf;

type
  { TServiceAdministracion }
  TServiceAdministracion = class(TDataAbstractService, IServiceAdministracion)
  private
  protected
    { IServiceAdministracion methods }
    function AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                          const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                   const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    function GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; 
                           const UsuarioID: Integer): Integer;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    function CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
    function CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function CostoProducto(const ProductoID: Integer): Double;
    function DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
    function Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
    function FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
    function FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
    function FacturaYLiquidacion(const ClienteID: Integer): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
    procedure GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    function GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
    procedure InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; 
                              const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; 
                              const Dia: Integer);
    procedure InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
    function ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
    function ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
    function ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
    function PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
    function StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
    function SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
    function SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
    function ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
    function VersionServer: AnsiString;
    function LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
    function BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
    function TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
    function BuscaSagarpa(const EstacionID: Integer): TSagarpa;
    function PuntosCalculaSaldo(const ClienteID: Integer): Double;
    function PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
    procedure PuntosGuardaDatos(const Datos: TDatosPuntos);
    function PuntosDatos(const ClienteID: Integer): TDatosPuntos;
    function EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
    function DatosPremio(const PremioID: Integer): TDatosPremio;
    function ValidaConsumo(const Consumo: TConsumoExpress): Integer;
    function AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
    function DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
    procedure ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    function TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
    function ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
    procedure PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
    function DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
    function LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString; 
                                   const EstacionID: Integer): AnsiString;
    function SELLOPEMs(const Texto: Widestring; const EstacionID: Integer): AnsiString;
    function CERs(const DIR: AnsiString): AnsiString;
    function ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
    function ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
    procedure PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
    procedure GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
    function AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function CERsNUM(const DIR: AnsiString): AnsiString;
  end;

implementation

{$R *.dfm}
uses
  {Generated:} LibraryAdministracion_Invk;

procedure Create_ServiceAdministracion(out anInstance : IUnknown);
begin
  anInstance := TServiceAdministracion.Create(nil);
end;

{ ServiceAdministracion }
function TServiceAdministracion.AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
begin
end;

procedure TServiceAdministracion.ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
begin
end;

procedure TServiceAdministracion.ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
begin
end;

procedure TServiceAdministracion.ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
begin
end;

procedure TServiceAdministracion.ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
begin
end;

procedure TServiceAdministracion.ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                      const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
begin
end;

function TServiceAdministracion.GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; 
                                              const UsuarioID: Integer): Integer;
begin
end;

function TServiceAdministracion.BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
begin
end;

function TServiceAdministracion.CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
begin
end;

function TServiceAdministracion.CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.CostoProducto(const ProductoID: Integer): Double;
begin
end;

function TServiceAdministracion.DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
begin
end;

function TServiceAdministracion.Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
begin
end;

function TServiceAdministracion.FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
begin
end;

function TServiceAdministracion.FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
begin
end;

function TServiceAdministracion.FacturaYLiquidacion(const ClienteID: Integer): Boolean;
begin
end;

function TServiceAdministracion.Fecha: DateTime;
begin
end;

function TServiceAdministracion.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
end;

function TServiceAdministracion.FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
end;

function TServiceAdministracion.FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
begin
end;

procedure TServiceAdministracion.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
end;

function TServiceAdministracion.GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
begin
end;

procedure TServiceAdministracion.GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
begin
end;

procedure TServiceAdministracion.GuardarDatosFactura(const DatosFactura: TDatosFactura);
begin
end;

procedure TServiceAdministracion.GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
begin
end;

procedure TServiceAdministracion.GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
begin
end;

function TServiceAdministracion.GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
begin
end;

procedure TServiceAdministracion.InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; 
                                                 const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; 
                                                 const Dia: Integer);
begin
end;

procedure TServiceAdministracion.InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
begin
end;

function TServiceAdministracion.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
begin
end;

function TServiceAdministracion.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
begin
end;

function TServiceAdministracion.ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
begin
end;

function TServiceAdministracion.ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
begin
end;

function TServiceAdministracion.ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
begin
end;

function TServiceAdministracion.PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
begin
end;

function TServiceAdministracion.StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
begin
end;

function TServiceAdministracion.SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
begin
end;

function TServiceAdministracion.SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
begin
end;

function TServiceAdministracion.ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
begin
end;

function TServiceAdministracion.VersionServer: AnsiString;
begin
end;

function TServiceAdministracion.LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
begin
end;

function TServiceAdministracion.ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
begin
end;

function TServiceAdministracion.BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
begin
end;

function TServiceAdministracion.TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
begin
end;

function TServiceAdministracion.BuscaSagarpa(const EstacionID: Integer): TSagarpa;
begin
end;

function TServiceAdministracion.PuntosCalculaSaldo(const ClienteID: Integer): Double;
begin
end;

function TServiceAdministracion.PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
begin
end;

procedure TServiceAdministracion.PuntosGuardaDatos(const Datos: TDatosPuntos);
begin
end;

function TServiceAdministracion.PuntosDatos(const ClienteID: Integer): TDatosPuntos;
begin
end;

function TServiceAdministracion.EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
begin
end;

function TServiceAdministracion.BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
begin
end;

function TServiceAdministracion.EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
begin
end;

function TServiceAdministracion.DatosPremio(const PremioID: Integer): TDatosPremio;
begin
end;

function TServiceAdministracion.ValidaConsumo(const Consumo: TConsumoExpress): Integer;
begin
end;

function TServiceAdministracion.AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
begin
end;

function TServiceAdministracion.DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
begin
end;

procedure TServiceAdministracion.ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
begin
end;

function TServiceAdministracion.TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
begin
end;

procedure TServiceAdministracion.PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
begin
end;

function TServiceAdministracion.DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
begin
end;

function TServiceAdministracion.LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString; 
                                                      const EstacionID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.SELLOPEMs(const Texto: Widestring; const EstacionID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.CERs(const DIR: AnsiString): AnsiString;
begin
end;

function TServiceAdministracion.ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
begin
end;

function TServiceAdministracion.ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
begin
end;

procedure TServiceAdministracion.PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
begin
end;

procedure TServiceAdministracion.GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
begin
end;

function TServiceAdministracion.AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
begin
end;

procedure TServiceAdministracion.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                                           const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                                           const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
begin
end;

function TServiceAdministracion.CERsNUM(const DIR: AnsiString): AnsiString;
begin
end;

var
  fClassFactory: IROClassFactory;
initialization
  fClassFactory := TROClassFactory.Create('ServiceAdministracion', Create_ServiceAdministracion, TServiceAdministracion_Invoker);

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
