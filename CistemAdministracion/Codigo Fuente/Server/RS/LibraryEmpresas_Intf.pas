unit LibraryEmpresas_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{BE2DC080-021D-4410-AE12-47322D2F0A40}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceEmpresas_IID : TGUID = '{762597B5-7713-4971-8C5A-32F68BB623AB}';

  { Event ID's }

type
  { Forward declarations }
  IServiceEmpresas = interface;

  ATDetalleCupon = class;
  ATDetalleFactura = class;
  ATTicketFactura = class;
  ATDetalleValeCreditoFactura = class;
  ATLiquidacionDetalle = class;
  ATLiquidacionProducto = class;
  ATDetalleTransaccion = class;
  ATCarteraVale = class;
  ATDetalleRecibo = class;
  ArrayOpcion = class;
  ADetalleExpress = class;
  AAgrupacionBomba = class;
  AAgrupacion = class;
  ADatosCelular = class;
  ADespachadorLiquidacion = class;
  ADetalleLiquidacion = class;
  ATipoValor = class;
  ATFacturaElectronicaDetalleImportes = class;
  ATFacturaElectronicaDetalleImpuestos = class;
  ADetalleFacturaPemex = class;

  TParametros = class;
  TFactura = class;
  TDetalleFactura = class;
  TTicketFactura = class;
  TDetalleCupon = class;
  TDetalleValeCreditoFactura = class;
  TDatosFactura = class;
  TLiquidacion = class;
  TLiquidacionDetalle = class;
  TLiquidacionProducto = class;
  TTransaccion = class;
  TDetalleTransaccion = class;
  TCarteraVale = class;
  TDatosLiquidacion = class;
  TReporte = class;
  TRecibo = class;
  TDetalleReciboPago = class;
  TDatosReciboPago = class;
  TDatosRecibo = class;
  TLoginInfo = class;
  TOpcion = class;
  TConsumoExpress = class;
  TDatosCliente = class;
  TFacturaExpress = class;
  TDetalleExpress = class;
  TValoresTurno = class;
  TOtroProducto = class;
  TAgrupacion = class;
  TSagarpa = class;
  TDatosPuntos = class;
  TDatosCelular = class;
  TEntregaPremio = class;
  TDatosPremio = class;
  TConfirmaEnvioA = class;
  TDatosCerrarLiquidacion = class;
  TDespachadorLiquidacion = class;
  TDetalleLiquidacion = class;
  TTipoValor = class;
  TPerfilPuntos = class;
  TFacturaElectronica = class;
  TFacturaElectronicaDetalleImportes = class;
  TFacturaElectronicaDetalleImpuestos = class;
  TDatosFacturaPemex = class;
  TDetalleFacturaPemex = class;



  { Enumerateds }

  { TParametros }
  TParametros = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fClienteIni: Integer;
    fClienteFin: Integer;
    fEstacion: Integer;
    fSecuenciaIni: Integer;
    fSecuenciaFin: Integer;
    fFactura: Integer;
    fFolioFactura: Integer;
    fSerie: AnsiString;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fEjercicioFin: Integer;
    fPeriodoFin: Integer;
    fDiaFin: Integer;
    fSecuencia: AnsiString;
    fStatus: AnsiString;
    fAgrupacion: Integer;
    fAlmacen: Integer;
    fSecuenciaIniLiquidacion: Integer;
    fSecuenciaFinLiquidacion: Integer;
    fFacturasdeCompras: Integer;
    fMontoFacturado: Double;
    fTurno: Integer;
    fEmpleadoIni: Integer;
    fEmpleadoFin: Integer;
    fEstacionIni: Integer;
    fEstacionFin: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property ClienteIni:Integer read fClienteIni write fClienteIni;
    property ClienteFin:Integer read fClienteFin write fClienteFin;
    property Estacion:Integer read fEstacion write fEstacion;
    property SecuenciaIni:Integer read fSecuenciaIni write fSecuenciaIni;
    property SecuenciaFin:Integer read fSecuenciaFin write fSecuenciaFin;
    property Factura:Integer read fFactura write fFactura;
    property FolioFactura:Integer read fFolioFactura write fFolioFactura;
    property Serie:AnsiString read fSerie write fSerie;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property EjercicioFin:Integer read fEjercicioFin write fEjercicioFin;
    property PeriodoFin:Integer read fPeriodoFin write fPeriodoFin;
    property DiaFin:Integer read fDiaFin write fDiaFin;
    property Secuencia:AnsiString read fSecuencia write fSecuencia;
    property Status:AnsiString read fStatus write fStatus;
    property Agrupacion:Integer read fAgrupacion write fAgrupacion;
    property Almacen:Integer read fAlmacen write fAlmacen;
    property SecuenciaIniLiquidacion:Integer read fSecuenciaIniLiquidacion write fSecuenciaIniLiquidacion;
    property SecuenciaFinLiquidacion:Integer read fSecuenciaFinLiquidacion write fSecuenciaFinLiquidacion;
    property FacturasdeCompras:Integer read fFacturasdeCompras write fFacturasdeCompras;
    property MontoFacturado:Double read fMontoFacturado write fMontoFacturado;
    property Turno:Integer read fTurno write fTurno;
    property EmpleadoIni:Integer read fEmpleadoIni write fEmpleadoIni;
    property EmpleadoFin:Integer read fEmpleadoFin write fEmpleadoFin;
    property EstacionIni:Integer read fEstacionIni write fEstacionIni;
    property EstacionFin:Integer read fEstacionFin write fEstacionFin;
  end;

  { TParametrosCollection }
  TParametrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TParametros;
    procedure SetItems(aIndex: integer; const Value: TParametros);
  public
    constructor Create; overload;
    function Add: TParametros; reintroduce;
    property Items[Index: integer]:TParametros read GetItems write SetItems; default;
  end;

  { TFactura }
  TFactura = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFecha: DateTime;
    fSubtotal: Double;
    fImpuesto: Double;
    fTotal: Double;
    fImpuestoPorcentaje: Double;
    fTurno: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fFormaPagoID: Integer;
    fTipoFacturaID: Integer;
    fFacturaID: Integer;
    fTickets: AnsiString;
    fUsuarioID: Integer;
    fISR: Double;
    fIVARTN: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Fecha:DateTime read fFecha write fFecha;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Total:Double read fTotal write fTotal;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property Turno:Integer read fTurno write fTurno;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
    property TipoFacturaID:Integer read fTipoFacturaID write fTipoFacturaID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Tickets:AnsiString read fTickets write fTickets;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property ISR:Double read fISR write fISR;
    property IVARTN:Double read fIVARTN write fIVARTN;
  end;

  { TFacturaCollection }
  TFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFactura;
    procedure SetItems(aIndex: integer; const Value: TFactura);
  public
    constructor Create; overload;
    function Add: TFactura; reintroduce;
    property Items[Index: integer]:TFactura read GetItems write SetItems; default;
  end;

  { TDetalleFactura }
  TDetalleFactura = class(TROComplexType)
  private
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fFacturaID: Integer;
    fProductoID: Integer;
    fCodigo: AnsiString;
    fDescripcion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
  end;

  { TDetalleFacturaCollection }
  TDetalleFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
  public
    constructor Create; overload;
    function Add: TDetalleFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleFactura);
    procedure LoadFromArray(anArray: ATDetalleFactura);
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
  end;

  { TTicketFactura }
  TTicketFactura = class(TROComplexType)
  private
    fTicketID: Integer;
    fFecha: DateTime;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
    fFacturaID: Integer;
    fEstacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TicketID:Integer read fTicketID write fTicketID;
    property Fecha:DateTime read fFecha write fFecha;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
  end;

  { TTicketFacturaCollection }
  TTicketFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTicketFactura;
    procedure SetItems(aIndex: integer; const Value: TTicketFactura);
  public
    constructor Create; overload;
    function Add: TTicketFactura; reintroduce;
    procedure SaveToArray(anArray: ATTicketFactura);
    procedure LoadFromArray(anArray: ATTicketFactura);
    property Items[Index: integer]:TTicketFactura read GetItems write SetItems; default;
  end;

  { TDetalleCupon }
  TDetalleCupon = class(TROComplexType)
  private
    fDenominacion: Double;
    fCantidad: Double;
    fReferencia: AnsiString;
    fFacturaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Denominacion:Double read fDenominacion write fDenominacion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property FacturaID:Integer read fFacturaID write fFacturaID;
  end;

  { TDetalleCuponCollection }
  TDetalleCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleCupon;
    procedure SetItems(aIndex: integer; const Value: TDetalleCupon);
  public
    constructor Create; overload;
    function Add: TDetalleCupon; reintroduce;
    procedure SaveToArray(anArray: ATDetalleCupon);
    procedure LoadFromArray(anArray: ATDetalleCupon);
    property Items[Index: integer]:TDetalleCupon read GetItems write SetItems; default;
  end;

  { TDetalleValeCreditoFactura }
  TDetalleValeCreditoFactura = class(TROComplexType)
  private
    fNoVale: Integer;
    fImporte: Double;
    fFacturaID: Integer;
    fCarteraValeCreditoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property NoVale:Integer read fNoVale write fNoVale;
    property Importe:Double read fImporte write fImporte;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property CarteraValeCreditoID:Integer read fCarteraValeCreditoID write fCarteraValeCreditoID;
  end;

  { TDetalleValeCreditoFacturaCollection }
  TDetalleValeCreditoFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleValeCreditoFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleValeCreditoFactura);
  public
    constructor Create; overload;
    function Add: TDetalleValeCreditoFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleValeCreditoFactura);
    procedure LoadFromArray(anArray: ATDetalleValeCreditoFactura);
    property Items[Index: integer]:TDetalleValeCreditoFactura read GetItems write SetItems; default;
  end;

  { TDatosFactura }
  TDatosFactura = class(TROComplexType)
  private
    fFactura: TFactura;
    fDetalles: ATDetalleFactura;
    fTickets: ATTicketFactura;
    fDetalleCupon: ATDetalleCupon;
    fVales: ATDetalleValeCreditoFactura;
    fValesS: AnsiString;
    fCliente: TDatosCliente;
    function GetFactura: TFactura;
    function GetDetalles: ATDetalleFactura;
    function GetTickets: ATTicketFactura;
    function GetDetalleCupon: ATDetalleCupon;
    function GetVales: ATDetalleValeCreditoFactura;
    function GetCliente: TDatosCliente;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:TFactura read GetFactura write fFactura;
    property Detalles:ATDetalleFactura read GetDetalles write fDetalles;
    property Tickets:ATTicketFactura read GetTickets write fTickets;
    property DetalleCupon:ATDetalleCupon read GetDetalleCupon write fDetalleCupon;
    property Vales:ATDetalleValeCreditoFactura read GetVales write fVales;
    property ValesS:AnsiString read fValesS write fValesS;
    property Cliente:TDatosCliente read GetCliente write fCliente;
  end;

  { TDatosFacturaCollection }
  TDatosFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosFactura;
    procedure SetItems(aIndex: integer; const Value: TDatosFactura);
  public
    constructor Create; overload;
    function Add: TDatosFactura; reintroduce;
    property Items[Index: integer]:TDatosFactura read GetItems write SetItems; default;
  end;

  { TLiquidacion }
  TLiquidacion = class(TROComplexType)
  private
    fLiquidacionID: Integer;
    fFecha: DateTime;
    fVentasTotales: Double;
    fAnticipos: Double;
    fDiferencias: Double;
    fSecuencia: Integer;
    fEstacionID: Integer;
    fDespachadorID: Integer;
    fAgrupacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property VentasTotales:Double read fVentasTotales write fVentasTotales;
    property Anticipos:Double read fAnticipos write fAnticipos;
    property Diferencias:Double read fDiferencias write fDiferencias;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property DespachadorID:Integer read fDespachadorID write fDespachadorID;
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
  end;

  { TLiquidacionCollection }
  TLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TLiquidacion);
  public
    constructor Create; overload;
    function Add: TLiquidacion; reintroduce;
    property Items[Index: integer]:TLiquidacion read GetItems write SetItems; default;
  end;

  { TLiquidacionDetalle }
  TLiquidacionDetalle = class(TROComplexType)
  private
    fLiquidacionDetalleID: Integer;
    fImporte: Double;
    fSecuencia: Integer;
    fReferencia: AnsiString;
    fTicket: Integer;
    fCupon: AnsiString;
    fLiquidacionID: Integer;
    fTipoValorID: Integer;
    fBancoID: Integer;
    fSalidaID: Integer;
    fClienteID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionDetalleID:Integer read fLiquidacionDetalleID write fLiquidacionDetalleID;
    property Importe:Double read fImporte write fImporte;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Ticket:Integer read fTicket write fTicket;
    property Cupon:AnsiString read fCupon write fCupon;
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
    property BancoID:Integer read fBancoID write fBancoID;
    property SalidaID:Integer read fSalidaID write fSalidaID;
    property ClienteID:Integer read fClienteID write fClienteID;
  end;

  { TLiquidacionDetalleCollection }
  TLiquidacionDetalleCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLiquidacionDetalle;
    procedure SetItems(aIndex: integer; const Value: TLiquidacionDetalle);
  public
    constructor Create; overload;
    function Add: TLiquidacionDetalle; reintroduce;
    procedure SaveToArray(anArray: ATLiquidacionDetalle);
    procedure LoadFromArray(anArray: ATLiquidacionDetalle);
    property Items[Index: integer]:TLiquidacionDetalle read GetItems write SetItems; default;
  end;

  { TLiquidacionProducto }
  TLiquidacionProducto = class(TROComplexType)
  private
    fPrecioVenta: Double;
    fInventarioInicial: Double;
    fInventarioFinal: Double;
    fCantidad: Double;
    fImporte: Double;
    fSecuencia: Integer;
    fTraspasos: Double;
    fProductoID: Integer;
    fBombaID: Integer;
    fCosto: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property PrecioVenta:Double read fPrecioVenta write fPrecioVenta;
    property InventarioInicial:Double read fInventarioInicial write fInventarioInicial;
    property InventarioFinal:Double read fInventarioFinal write fInventarioFinal;
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Traspasos:Double read fTraspasos write fTraspasos;
    property ProductoID:Integer read fProductoID write fProductoID;
    property BombaID:Integer read fBombaID write fBombaID;
    property Costo:Double read fCosto write fCosto;
  end;

  { TLiquidacionProductoCollection }
  TLiquidacionProductoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLiquidacionProducto;
    procedure SetItems(aIndex: integer; const Value: TLiquidacionProducto);
  public
    constructor Create; overload;
    function Add: TLiquidacionProducto; reintroduce;
    procedure SaveToArray(anArray: ATLiquidacionProducto);
    procedure LoadFromArray(anArray: ATLiquidacionProducto);
    property Items[Index: integer]:TLiquidacionProducto read GetItems write SetItems; default;
  end;

  { TTransaccion }
  TTransaccion = class(TROComplexType)
  private
    fTransaccionID: Integer;
    fFolio: Integer;
    fTipo: AnsiString;
    fCredito: Boolean;
    fReferencia: AnsiString;
    fFecha: DateTime;
    fTotal: Double;
    fSubtotal: Double;
    fImpuesto: Double;
    fPlazo: Integer;
    fSecuencia: Integer;
    fEstacionDestinoID: Integer;
    fAlmacenDestinoID: Integer;
    fEstacionID: Integer;
    fProveedorId: Integer;
    fAlmacenID: Integer;
    fMovimientoAlmacen: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TransaccionID:Integer read fTransaccionID write fTransaccionID;
    property Folio:Integer read fFolio write fFolio;
    property Tipo:AnsiString read fTipo write fTipo;
    property Credito:Boolean read fCredito write fCredito;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Fecha:DateTime read fFecha write fFecha;
    property Total:Double read fTotal write fTotal;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Plazo:Integer read fPlazo write fPlazo;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionDestinoID:Integer read fEstacionDestinoID write fEstacionDestinoID;
    property AlmacenDestinoID:Integer read fAlmacenDestinoID write fAlmacenDestinoID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ProveedorId:Integer read fProveedorId write fProveedorId;
    property AlmacenID:Integer read fAlmacenID write fAlmacenID;
    property MovimientoAlmacen:Integer read fMovimientoAlmacen write fMovimientoAlmacen;
  end;

  { TTransaccionCollection }
  TTransaccionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTransaccion;
    procedure SetItems(aIndex: integer; const Value: TTransaccion);
  public
    constructor Create; overload;
    function Add: TTransaccion; reintroduce;
    property Items[Index: integer]:TTransaccion read GetItems write SetItems; default;
  end;

  { TDetalleTransaccion }
  TDetalleTransaccion = class(TROComplexType)
  private
    fDetalleTransaccionID: Integer;
    fCantidad: Double;
    fCosto: Double;
    fTransaccionID: Integer;
    fProductoID: Integer;
    fTipo: AnsiString;
    fOperador: Integer;
    fMovimientoAlmacen: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DetalleTransaccionID:Integer read fDetalleTransaccionID write fDetalleTransaccionID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Costo:Double read fCosto write fCosto;
    property TransaccionID:Integer read fTransaccionID write fTransaccionID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Tipo:AnsiString read fTipo write fTipo;
    property Operador:Integer read fOperador write fOperador;
    property MovimientoAlmacen:Integer read fMovimientoAlmacen write fMovimientoAlmacen;
  end;

  { TDetalleTransaccionCollection }
  TDetalleTransaccionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleTransaccion;
    procedure SetItems(aIndex: integer; const Value: TDetalleTransaccion);
  public
    constructor Create; overload;
    function Add: TDetalleTransaccion; reintroduce;
    procedure SaveToArray(anArray: ATDetalleTransaccion);
    procedure LoadFromArray(anArray: ATDetalleTransaccion);
    property Items[Index: integer]:TDetalleTransaccion read GetItems write SetItems; default;
  end;

  { TCarteraVale }
  TCarteraVale = class(TROComplexType)
  private
    fCarteraValeCreditoID: Integer;
    fNoVale: Integer;
    fTicket: Integer;
    fImporte: Double;
    fFecha: DateTime;
    fStatus: AnsiString;
    fFacturaID: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fLiquidacionDetalleID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CarteraValeCreditoID:Integer read fCarteraValeCreditoID write fCarteraValeCreditoID;
    property NoVale:Integer read fNoVale write fNoVale;
    property Ticket:Integer read fTicket write fTicket;
    property Importe:Double read fImporte write fImporte;
    property Fecha:DateTime read fFecha write fFecha;
    property Status:AnsiString read fStatus write fStatus;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property LiquidacionDetalleID:Integer read fLiquidacionDetalleID write fLiquidacionDetalleID;
  end;

  { TCarteraValeCollection }
  TCarteraValeCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCarteraVale;
    procedure SetItems(aIndex: integer; const Value: TCarteraVale);
  public
    constructor Create; overload;
    function Add: TCarteraVale; reintroduce;
    procedure SaveToArray(anArray: ATCarteraVale);
    procedure LoadFromArray(anArray: ATCarteraVale);
    property Items[Index: integer]:TCarteraVale read GetItems write SetItems; default;
  end;

  { TDatosLiquidacion }
  TDatosLiquidacion = class(TROComplexType)
  private
    fLiquidacion: TLiquidacion;
    fLiquidacionDetalle: ATLiquidacionDetalle;
    fLiquidacionProducto: ATLiquidacionProducto;
    fLiquidacionCombustible: ATLiquidacionProducto;
    fTraspaso: TTransaccion;
    fVenta: TTransaccion;
    fDetalleTraspaso: ATDetalleTransaccion;
    fDetalleVenta: ATDetalleTransaccion;
    fCarteraVales: ATCarteraVale;
    function GetLiquidacion: TLiquidacion;
    function GetLiquidacionDetalle: ATLiquidacionDetalle;
    function GetLiquidacionProducto: ATLiquidacionProducto;
    function GetLiquidacionCombustible: ATLiquidacionProducto;
    function GetTraspaso: TTransaccion;
    function GetVenta: TTransaccion;
    function GetDetalleTraspaso: ATDetalleTransaccion;
    function GetDetalleVenta: ATDetalleTransaccion;
    function GetCarteraVales: ATCarteraVale;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Liquidacion:TLiquidacion read GetLiquidacion write fLiquidacion;
    property LiquidacionDetalle:ATLiquidacionDetalle read GetLiquidacionDetalle write fLiquidacionDetalle;
    property LiquidacionProducto:ATLiquidacionProducto read GetLiquidacionProducto write fLiquidacionProducto;
    property LiquidacionCombustible:ATLiquidacionProducto read GetLiquidacionCombustible write fLiquidacionCombustible;
    property Traspaso:TTransaccion read GetTraspaso write fTraspaso;
    property Venta:TTransaccion read GetVenta write fVenta;
    property DetalleTraspaso:ATDetalleTransaccion read GetDetalleTraspaso write fDetalleTraspaso;
    property DetalleVenta:ATDetalleTransaccion read GetDetalleVenta write fDetalleVenta;
    property CarteraVales:ATCarteraVale read GetCarteraVales write fCarteraVales;
  end;

  { TDatosLiquidacionCollection }
  TDatosLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDatosLiquidacion);
  public
    constructor Create; overload;
    function Add: TDatosLiquidacion; reintroduce;
    property Items[Index: integer]:TDatosLiquidacion read GetItems write SetItems; default;
  end;

  { TReporte }
  TReporte = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteCollection }
  TReporteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TReporte;
    procedure SetItems(aIndex: integer; const Value: TReporte);
  public
    constructor Create; overload;
    function Add: TReporte; reintroduce;
    property Items[Index: integer]:TReporte read GetItems write SetItems; default;
  end;

  { TRecibo }
  TRecibo = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: Integer;
    fFecha: DateTime;
    fSubtotal: Double;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fImpuesto: Double;
    fTotal: Double;
    fClienteID: Integer;
    fEstacionID: Integer;
    fFormaPagoID: Integer;
    fReciboPagoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Fecha:DateTime read fFecha write fFecha;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Total:Double read fTotal write fTotal;
    property ClienteID:Integer read fClienteID write fClienteID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
    property ReciboPagoID:Integer read fReciboPagoID write fReciboPagoID;
  end;

  { TReciboCollection }
  TReciboCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TRecibo;
    procedure SetItems(aIndex: integer; const Value: TRecibo);
  public
    constructor Create; overload;
    function Add: TRecibo; reintroduce;
    property Items[Index: integer]:TRecibo read GetItems write SetItems; default;
  end;

  { TDetalleReciboPago }
  TDetalleReciboPago = class(TROComplexType)
  private
    fFacturaID: Integer;
    fTotal: Double;
    fReciboID: Integer;
    fItemNo: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Total:Double read fTotal write fTotal;
    property ReciboID:Integer read fReciboID write fReciboID;
    property ItemNo:Integer read fItemNo write fItemNo;
  end;

  { TDetalleReciboPagoCollection }
  TDetalleReciboPagoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleReciboPago;
    procedure SetItems(aIndex: integer; const Value: TDetalleReciboPago);
  public
    constructor Create; overload;
    function Add: TDetalleReciboPago; reintroduce;
    procedure SaveToArray(anArray: ATDetalleRecibo);
    procedure LoadFromArray(anArray: ATDetalleRecibo);
    property Items[Index: integer]:TDetalleReciboPago read GetItems write SetItems; default;
  end;

  { TDatosReciboPago }
  TDatosReciboPago = class(TROComplexType)
  private
    fRecibo: TRecibo;
    fDetalles: ATDetalleRecibo;
    function GetRecibo: TRecibo;
    function GetDetalles: ATDetalleRecibo;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Recibo:TRecibo read GetRecibo write fRecibo;
    property Detalles:ATDetalleRecibo read GetDetalles write fDetalles;
  end;

  { TDatosReciboPagoCollection }
  TDatosReciboPagoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosReciboPago;
    procedure SetItems(aIndex: integer; const Value: TDatosReciboPago);
  public
    constructor Create; overload;
    function Add: TDatosReciboPago; reintroduce;
    property Items[Index: integer]:TDatosReciboPago read GetItems write SetItems; default;
  end;

  { TDatosRecibo }
  TDatosRecibo = class(TROComplexType)
  private
    fRecibo: TRecibo;
    fDetalles: ATDetalleRecibo;
    function GetRecibo: TRecibo;
    function GetDetalles: ATDetalleRecibo;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Recibo:TRecibo read GetRecibo write fRecibo;
    property Detalles:ATDetalleRecibo read GetDetalles write fDetalles;
  end;

  { TDatosReciboCollection }
  TDatosReciboCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosRecibo;
    procedure SetItems(aIndex: integer; const Value: TDatosRecibo);
  public
    constructor Create; overload;
    function Add: TDatosRecibo; reintroduce;
    property Items[Index: integer]:TDatosRecibo read GetItems write SetItems; default;
  end;

  { TLoginInfo }
  TLoginInfo = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcion;
    function GetAccesos: ArrayOpcion;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcion read GetAccesos write fAccesos;
  end;

  { TLoginInfoCollection }
  TLoginInfoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLoginInfo;
    procedure SetItems(aIndex: integer; const Value: TLoginInfo);
  public
    constructor Create; overload;
    function Add: TLoginInfo; reintroduce;
    property Items[Index: integer]:TLoginInfo read GetItems write SetItems; default;
  end;

  { TOpcion }
  TOpcion = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionCollection }
  TOpcionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOpcion;
    procedure SetItems(aIndex: integer; const Value: TOpcion);
  public
    constructor Create; overload;
    function Add: TOpcion; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcion);
    procedure LoadFromArray(anArray: ArrayOpcion);
    property Items[Index: integer]:TOpcion read GetItems write SetItems; default;
  end;

  { TConsumoExpress }
  TConsumoExpress = class(TROComplexType)
  private
    fSecuencia: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fPrecio: Double;
    fVolumen: Double;
    fImporte: Double;
    fFacturado: Boolean;
    fBombaID: Integer;
    fProductoID: Integer;
    fFacturaID: Integer;
    fFechaConsumo: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property Precio:Double read fPrecio write fPrecio;
    property Volumen:Double read fVolumen write fVolumen;
    property Importe:Double read fImporte write fImporte;
    property Facturado:Boolean read fFacturado write fFacturado;
    property BombaID:Integer read fBombaID write fBombaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property FechaConsumo:DateTime read fFechaConsumo write fFechaConsumo;
  end;

  { TConsumoExpressCollection }
  TConsumoExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConsumoExpress;
    procedure SetItems(aIndex: integer; const Value: TConsumoExpress);
  public
    constructor Create; overload;
    function Add: TConsumoExpress; reintroduce;
    property Items[Index: integer]:TConsumoExpress read GetItems write SetItems; default;
  end;

  { TDatosCliente }
  TDatosCliente = class(TROComplexType)
  private
    fClienteID: Integer;
    fNombre: AnsiString;
    fRFC: AnsiString;
    fDireccion: AnsiString;
    fTelefono: AnsiString;
    fCP: AnsiString;
    fCiudad: AnsiString;
    fColonia: AnsiString;
    fTelefonos: AnsiString;
    fFacturaExpress: Boolean;
    fSaldo: Double;
    fMsnError: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RFC:AnsiString read fRFC write fRFC;
    property Direccion:AnsiString read fDireccion write fDireccion;
    property Telefono:AnsiString read fTelefono write fTelefono;
    property CP:AnsiString read fCP write fCP;
    property Ciudad:AnsiString read fCiudad write fCiudad;
    property Colonia:AnsiString read fColonia write fColonia;
    property Telefonos:AnsiString read fTelefonos write fTelefonos;
    property FacturaExpress:Boolean read fFacturaExpress write fFacturaExpress;
    property Saldo:Double read fSaldo write fSaldo;
    property MsnError:AnsiString read fMsnError write fMsnError;
  end;

  { TDatosClienteCollection }
  TDatosClienteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosCliente;
    procedure SetItems(aIndex: integer; const Value: TDatosCliente);
  public
    constructor Create; overload;
    function Add: TDatosCliente; reintroduce;
    property Items[Index: integer]:TDatosCliente read GetItems write SetItems; default;
  end;

  { TFacturaExpress }
  TFacturaExpress = class(TROComplexType)
  private
    fFacturaID: Integer;
    fSerie: AnsiString;
    fFolio: Integer;
    fFecha: DateTime;
    fCliente: TDatosCliente;
    fSubtotal: Double;
    fIVA: Double;
    fTotal: Double;
    fImpuesto: Double;
    fDetalle: ADetalleExpress;
    function GetCliente: TDatosCliente;
    function GetDetalle: ADetalleExpress;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Fecha:DateTime read fFecha write fFecha;
    property Cliente:TDatosCliente read GetCliente write fCliente;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property IVA:Double read fIVA write fIVA;
    property Total:Double read fTotal write fTotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Detalle:ADetalleExpress read GetDetalle write fDetalle;
  end;

  { TFacturaExpressCollection }
  TFacturaExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaExpress;
    procedure SetItems(aIndex: integer; const Value: TFacturaExpress);
  public
    constructor Create; overload;
    function Add: TFacturaExpress; reintroduce;
    property Items[Index: integer]:TFacturaExpress read GetItems write SetItems; default;
  end;

  { TDetalleExpress }
  TDetalleExpress = class(TROComplexType)
  private
    fCodigo: AnsiString;
    fDescripcion: AnsiString;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
  end;

  { TDetalleExpressCollection }
  TDetalleExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleExpress;
    procedure SetItems(aIndex: integer; const Value: TDetalleExpress);
  public
    constructor Create; overload;
    function Add: TDetalleExpress; reintroduce;
    procedure SaveToArray(anArray: ADetalleExpress);
    procedure LoadFromArray(anArray: ADetalleExpress);
    property Items[Index: integer]:TDetalleExpress read GetItems write SetItems; default;
  end;

  { TValoresTurno }
  TValoresTurno = class(TROComplexType)
  private
    fFecha: DateTime;
    fVenta: Double;
    fEfectivo: Double;
    fCredito: Double;
    fConsumoInterno: Double;
    fCalibraciones: Double;
    fFaltantes: Double;
    fSobrantes: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Fecha:DateTime read fFecha write fFecha;
    property Venta:Double read fVenta write fVenta;
    property Efectivo:Double read fEfectivo write fEfectivo;
    property Credito:Double read fCredito write fCredito;
    property ConsumoInterno:Double read fConsumoInterno write fConsumoInterno;
    property Calibraciones:Double read fCalibraciones write fCalibraciones;
    property Faltantes:Double read fFaltantes write fFaltantes;
    property Sobrantes:Double read fSobrantes write fSobrantes;
  end;

  { TValoresTurnoCollection }
  TValoresTurnoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TValoresTurno;
    procedure SetItems(aIndex: integer; const Value: TValoresTurno);
  public
    constructor Create; overload;
    function Add: TValoresTurno; reintroduce;
    property Items[Index: integer]:TValoresTurno read GetItems write SetItems; default;
  end;

  { TOtroProducto }
  TOtroProducto = class(TROComplexType)
  private
    fID: Integer;
    fNombre: AnsiString;
    fCodigo: AnsiString;
    fBarras: AnsiString;
    fPrecio: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ID:Integer read fID write fID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Barras:AnsiString read fBarras write fBarras;
    property Precio:Double read fPrecio write fPrecio;
  end;

  { TOtroProductoCollection }
  TOtroProductoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOtroProducto;
    procedure SetItems(aIndex: integer; const Value: TOtroProducto);
  public
    constructor Create; overload;
    function Add: TOtroProducto; reintroduce;
    property Items[Index: integer]:TOtroProducto read GetItems write SetItems; default;
  end;

  { TAgrupacion }
  TAgrupacion = class(TROComplexType)
  private
    fAgrupacionID: Integer;
    fBombas: AAgrupacionBomba;
    function GetBombas: AAgrupacionBomba;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
    property Bombas:AAgrupacionBomba read GetBombas write fBombas;
  end;

  { TAgrupacionCollection }
  TAgrupacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAgrupacion;
    procedure SetItems(aIndex: integer; const Value: TAgrupacion);
  public
    constructor Create; overload;
    function Add: TAgrupacion; reintroduce;
    procedure SaveToArray(anArray: AAgrupacion);
    procedure LoadFromArray(anArray: AAgrupacion);
    property Items[Index: integer]:TAgrupacion read GetItems write SetItems; default;
  end;

  { TSagarpa }
  TSagarpa = class(TROComplexType)
  private
    fClienteSagarpa: Integer;
    fClienteSagarpaPemex: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteSagarpa:Integer read fClienteSagarpa write fClienteSagarpa;
    property ClienteSagarpaPemex:Integer read fClienteSagarpaPemex write fClienteSagarpaPemex;
  end;

  { TSagarpaCollection }
  TSagarpaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TSagarpa;
    procedure SetItems(aIndex: integer; const Value: TSagarpa);
  public
    constructor Create; overload;
    function Add: TSagarpa; reintroduce;
    property Items[Index: integer]:TSagarpa read GetItems write SetItems; default;
  end;

  { TDatosPuntos }
  TDatosPuntos = class(TROComplexType)
  private
    fClienteID: Integer;
    fApellidoPaterno: AnsiString;
    fApellidoMaterno: AnsiString;
    fNombres: AnsiString;
    femail: AnsiString;
    fNacimiento: DateTime;
    fReferencia: AnsiString;
    fTelefonos: AnsiString;
    fFacturaExpress: Boolean;
    fPuntosCategoriaID: Integer;
    fSexo: Integer;
    fFechaRegistro: DateTime;
    fUsuarioID: Integer;
    fPuntosClubID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property ApellidoPaterno:AnsiString read fApellidoPaterno write fApellidoPaterno;
    property ApellidoMaterno:AnsiString read fApellidoMaterno write fApellidoMaterno;
    property Nombres:AnsiString read fNombres write fNombres;
    property email:AnsiString read femail write femail;
    property Nacimiento:DateTime read fNacimiento write fNacimiento;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Telefonos:AnsiString read fTelefonos write fTelefonos;
    property FacturaExpress:Boolean read fFacturaExpress write fFacturaExpress;
    property PuntosCategoriaID:Integer read fPuntosCategoriaID write fPuntosCategoriaID;
    property Sexo:Integer read fSexo write fSexo;
    property FechaRegistro:DateTime read fFechaRegistro write fFechaRegistro;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property PuntosClubID:Integer read fPuntosClubID write fPuntosClubID;
  end;

  { TDatosPuntosCollection }
  TDatosPuntosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosPuntos;
    procedure SetItems(aIndex: integer; const Value: TDatosPuntos);
  public
    constructor Create; overload;
    function Add: TDatosPuntos; reintroduce;
    property Items[Index: integer]:TDatosPuntos read GetItems write SetItems; default;
  end;

  { TDatosCelular }
  TDatosCelular = class(TROComplexType)
  private
    fTelefono: AnsiString;
    fCompania: Integer;
    fDescripcion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Telefono:AnsiString read fTelefono write fTelefono;
    property Compania:Integer read fCompania write fCompania;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
  end;

  { TDatosCelularCollection }
  TDatosCelularCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosCelular;
    procedure SetItems(aIndex: integer; const Value: TDatosCelular);
  public
    constructor Create; overload;
    function Add: TDatosCelular; reintroduce;
    procedure SaveToArray(anArray: ADatosCelular);
    procedure LoadFromArray(anArray: ADatosCelular);
    property Items[Index: integer]:TDatosCelular read GetItems write SetItems; default;
  end;

  { TEntregaPremio }
  TEntregaPremio = class(TROComplexType)
  private
    fClienteID: Integer;
    fCliente: AnsiString;
    fPremio: AnsiString;
    fCantidad: Integer;
    fPuntos: Double;
    fSaldo: Double;
    fMensaje: AnsiString;
    fValido: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Cliente:AnsiString read fCliente write fCliente;
    property Premio:AnsiString read fPremio write fPremio;
    property Cantidad:Integer read fCantidad write fCantidad;
    property Puntos:Double read fPuntos write fPuntos;
    property Saldo:Double read fSaldo write fSaldo;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Valido:Boolean read fValido write fValido;
  end;

  { TEntregaPremioCollection }
  TEntregaPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TEntregaPremio;
    procedure SetItems(aIndex: integer; const Value: TEntregaPremio);
  public
    constructor Create; overload;
    function Add: TEntregaPremio; reintroduce;
    property Items[Index: integer]:TEntregaPremio read GetItems write SetItems; default;
  end;

  { TDatosPremio }
  TDatosPremio = class(TROComplexType)
  private
    fPremioID: Integer;
    fNombre: AnsiString;
    fPuntos: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property PremioID:Integer read fPremioID write fPremioID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Puntos:Double read fPuntos write fPuntos;
  end;

  { TDatosPremioCollection }
  TDatosPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosPremio;
    procedure SetItems(aIndex: integer; const Value: TDatosPremio);
  public
    constructor Create; overload;
    function Add: TDatosPremio; reintroduce;
    property Items[Index: integer]:TDatosPremio read GetItems write SetItems; default;
  end;

  { TConfirmaEnvioA }
  TConfirmaEnvioA = class(TROComplexType)
  private
    fConsumo: TConsumoExpress;
    fHost: AnsiString;
    fFecha: DateTime;
    function GetConsumo: TConsumoExpress;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Consumo:TConsumoExpress read GetConsumo write fConsumo;
    property Host:AnsiString read fHost write fHost;
    property Fecha:DateTime read fFecha write fFecha;
  end;

  { TConfirmaEnvioACollection }
  TConfirmaEnvioACollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConfirmaEnvioA;
    procedure SetItems(aIndex: integer; const Value: TConfirmaEnvioA);
  public
    constructor Create; overload;
    function Add: TConfirmaEnvioA; reintroduce;
    property Items[Index: integer]:TConfirmaEnvioA read GetItems write SetItems; default;
  end;

  { TDatosCerrarLiquidacion }
  TDatosCerrarLiquidacion = class(TROComplexType)
  private
    fLiquidacionID: Integer;
    fVentasTotales: Double;
    fEntregado: Double;
    fDiferencia: Double;
    fDespachadores: ADespachadorLiquidacion;
    fDetalle: ADetalleLiquidacion;
    fTipoValor: ATipoValor;
    fEstacionID: Integer;
    fTurnoID: Integer;
    function GetDespachadores: ADespachadorLiquidacion;
    function GetDetalle: ADetalleLiquidacion;
    function GetTipoValor: ATipoValor;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property VentasTotales:Double read fVentasTotales write fVentasTotales;
    property Entregado:Double read fEntregado write fEntregado;
    property Diferencia:Double read fDiferencia write fDiferencia;
    property Despachadores:ADespachadorLiquidacion read GetDespachadores write fDespachadores;
    property Detalle:ADetalleLiquidacion read GetDetalle write fDetalle;
    property TipoValor:ATipoValor read GetTipoValor write fTipoValor;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property TurnoID:Integer read fTurnoID write fTurnoID;
  end;

  { TDatosCerrarLiquidacionCollection }
  TDatosCerrarLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosCerrarLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDatosCerrarLiquidacion);
  public
    constructor Create; overload;
    function Add: TDatosCerrarLiquidacion; reintroduce;
    property Items[Index: integer]:TDatosCerrarLiquidacion read GetItems write SetItems; default;
  end;

  { TDespachadorLiquidacion }
  TDespachadorLiquidacion = class(TROComplexType)
  private
    fDespachadorLiquidacionID: Integer;
    fDespachadorID: Integer;
    fImporte: Double;
    fEntregado: Double;
    fDiferencia: Double;
    fAgrupacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DespachadorLiquidacionID:Integer read fDespachadorLiquidacionID write fDespachadorLiquidacionID;
    property DespachadorID:Integer read fDespachadorID write fDespachadorID;
    property Importe:Double read fImporte write fImporte;
    property Entregado:Double read fEntregado write fEntregado;
    property Diferencia:Double read fDiferencia write fDiferencia;
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
  end;

  { TDespachadorLiquidacionCollection }
  TDespachadorLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDespachadorLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDespachadorLiquidacion);
  public
    constructor Create; overload;
    function Add: TDespachadorLiquidacion; reintroduce;
    procedure SaveToArray(anArray: ADespachadorLiquidacion);
    procedure LoadFromArray(anArray: ADespachadorLiquidacion);
    property Items[Index: integer]:TDespachadorLiquidacion read GetItems write SetItems; default;
  end;

  { TDetalleLiquidacion }
  TDetalleLiquidacion = class(TROComplexType)
  private
    fCantidad: Double;
    fImporte: Double;
    fReferencia: AnsiString;
    fTicket: Integer;
    fSerie: AnsiString;
    fCuponID: Integer;
    fSalidaID: Integer;
    fClienteID: Integer;
    fBancoID: Integer;
    fProductoID: Integer;
    fAuxiliarID: Integer;
    fDespachadorLiquidacionID: Integer;
    fTipoValorID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Ticket:Integer read fTicket write fTicket;
    property Serie:AnsiString read fSerie write fSerie;
    property CuponID:Integer read fCuponID write fCuponID;
    property SalidaID:Integer read fSalidaID write fSalidaID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property BancoID:Integer read fBancoID write fBancoID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property AuxiliarID:Integer read fAuxiliarID write fAuxiliarID;
    property DespachadorLiquidacionID:Integer read fDespachadorLiquidacionID write fDespachadorLiquidacionID;
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
  end;

  { TDetalleLiquidacionCollection }
  TDetalleLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDetalleLiquidacion);
  public
    constructor Create; overload;
    function Add: TDetalleLiquidacion; reintroduce;
    procedure SaveToArray(anArray: ADetalleLiquidacion);
    procedure LoadFromArray(anArray: ADetalleLiquidacion);
    property Items[Index: integer]:TDetalleLiquidacion read GetItems write SetItems; default;
  end;

  { TTipoValor }
  TTipoValor = class(TROComplexType)
  private
    fTipoValorID: Integer;
    fNombre: AnsiString;
    fGrupo: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Grupo:AnsiString read fGrupo write fGrupo;
  end;

  { TTipoValorCollection }
  TTipoValorCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTipoValor;
    procedure SetItems(aIndex: integer; const Value: TTipoValor);
  public
    constructor Create; overload;
    function Add: TTipoValor; reintroduce;
    procedure SaveToArray(anArray: ATipoValor);
    procedure LoadFromArray(anArray: ATipoValor);
    property Items[Index: integer]:TTipoValor read GetItems write SetItems; default;
  end;

  { TPerfilPuntos }
  TPerfilPuntos = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fCriterio: Double;
    fNewField3: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property Criterio:Double read fCriterio write fCriterio;
    property NewField3:AnsiString read fNewField3 write fNewField3;
  end;

  { TPerfilPuntosCollection }
  TPerfilPuntosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TPerfilPuntos;
    procedure SetItems(aIndex: integer; const Value: TPerfilPuntos);
  public
    constructor Create; overload;
    function Add: TPerfilPuntos; reintroduce;
    property Items[Index: integer]:TPerfilPuntos read GetItems write SetItems; default;
  end;

  { TFacturaElectronica }
  TFacturaElectronica = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: AnsiString;
    fFecha: AnsiString;
    fnoAprobacion: AnsiString;
    fanoAprobacion: AnsiString;
    ftipoComprobante: AnsiString;
    fformaDePago: AnsiString;
    fSubTotal: AnsiString;
    fMunicipioEmisor: AnsiString;
    fTotal: AnsiString;
    fRFCEmisor: AnsiString;
    fNomEmpEmisor: AnsiString;
    fDireccionEm: AnsiString;
    fNoExteriorEm: AnsiString;
    fColoniaEmisor: AnsiString;
    fEstadoEmisor: AnsiString;
    fPaisEmisor: AnsiString;
    fCodigoPostalEmisor: AnsiString;
    fRFCReceptor: AnsiString;
    fNombreReceptor: AnsiString;
    fDomicilioReceptor: AnsiString;
    fNoExteriorReceptor: AnsiString;
    fColoniaReceptor: AnsiString;
    fLocalidadReceptor: AnsiString;
    fMunicipioReceptor: AnsiString;
    fEstadoReceptor: AnsiString;
    fPaisReceptor: AnsiString;
    fCodigoPostalReceptor: AnsiString;
    fFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    fFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
    fTotalImpuesto: AnsiString;
    fCalleExpedidoEn: AnsiString;
    fNoExterioExpedidoEn: AnsiString;
    fColoniaExpedidoEn: AnsiString;
    fCodigoPostalExpedidoEn: AnsiString;
    fLocalidadExpedidoEn: AnsiString;
    fMunicipioExpedidoEn: AnsiString;
    fEstadoExpedidoEn: AnsiString;
    fPaisExpedidoEn: AnsiString;
    fSucursal: Boolean;
    femail: AnsiString;
    function GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    function GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:AnsiString read fFolio write fFolio;
    property Fecha:AnsiString read fFecha write fFecha;
    property noAprobacion:AnsiString read fnoAprobacion write fnoAprobacion;
    property anoAprobacion:AnsiString read fanoAprobacion write fanoAprobacion;
    property tipoComprobante:AnsiString read ftipoComprobante write ftipoComprobante;
    property formaDePago:AnsiString read fformaDePago write fformaDePago;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property MunicipioEmisor:AnsiString read fMunicipioEmisor write fMunicipioEmisor;
    property Total:AnsiString read fTotal write fTotal;
    property RFCEmisor:AnsiString read fRFCEmisor write fRFCEmisor;
    property NomEmpEmisor:AnsiString read fNomEmpEmisor write fNomEmpEmisor;
    property DireccionEm:AnsiString read fDireccionEm write fDireccionEm;
    property NoExteriorEm:AnsiString read fNoExteriorEm write fNoExteriorEm;
    property ColoniaEmisor:AnsiString read fColoniaEmisor write fColoniaEmisor;
    property EstadoEmisor:AnsiString read fEstadoEmisor write fEstadoEmisor;
    property PaisEmisor:AnsiString read fPaisEmisor write fPaisEmisor;
    property CodigoPostalEmisor:AnsiString read fCodigoPostalEmisor write fCodigoPostalEmisor;
    property RFCReceptor:AnsiString read fRFCReceptor write fRFCReceptor;
    property NombreReceptor:AnsiString read fNombreReceptor write fNombreReceptor;
    property DomicilioReceptor:AnsiString read fDomicilioReceptor write fDomicilioReceptor;
    property NoExteriorReceptor:AnsiString read fNoExteriorReceptor write fNoExteriorReceptor;
    property ColoniaReceptor:AnsiString read fColoniaReceptor write fColoniaReceptor;
    property LocalidadReceptor:AnsiString read fLocalidadReceptor write fLocalidadReceptor;
    property MunicipioReceptor:AnsiString read fMunicipioReceptor write fMunicipioReceptor;
    property EstadoReceptor:AnsiString read fEstadoReceptor write fEstadoReceptor;
    property PaisReceptor:AnsiString read fPaisReceptor write fPaisReceptor;
    property CodigoPostalReceptor:AnsiString read fCodigoPostalReceptor write fCodigoPostalReceptor;
    property FacturaElectronicaDetalleImportes:ATFacturaElectronicaDetalleImportes read GetFacturaElectronicaDetalleImportes write fFacturaElectronicaDetalleImportes;
    property FacturaElectronicaDetalleImpuestos:ATFacturaElectronicaDetalleImpuestos read GetFacturaElectronicaDetalleImpuestos write fFacturaElectronicaDetalleImpuestos;
    property TotalImpuesto:AnsiString read fTotalImpuesto write fTotalImpuesto;
    property CalleExpedidoEn:AnsiString read fCalleExpedidoEn write fCalleExpedidoEn;
    property NoExterioExpedidoEn:AnsiString read fNoExterioExpedidoEn write fNoExterioExpedidoEn;
    property ColoniaExpedidoEn:AnsiString read fColoniaExpedidoEn write fColoniaExpedidoEn;
    property CodigoPostalExpedidoEn:AnsiString read fCodigoPostalExpedidoEn write fCodigoPostalExpedidoEn;
    property LocalidadExpedidoEn:AnsiString read fLocalidadExpedidoEn write fLocalidadExpedidoEn;
    property MunicipioExpedidoEn:AnsiString read fMunicipioExpedidoEn write fMunicipioExpedidoEn;
    property EstadoExpedidoEn:AnsiString read fEstadoExpedidoEn write fEstadoExpedidoEn;
    property PaisExpedidoEn:AnsiString read fPaisExpedidoEn write fPaisExpedidoEn;
    property Sucursal:Boolean read fSucursal write fSucursal;
    property email:AnsiString read femail write femail;
  end;

  { TFacturaElectronicaCollection }
  TFacturaElectronicaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronica;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronica);
  public
    constructor Create; overload;
    function Add: TFacturaElectronica; reintroduce;
    property Items[Index: integer]:TFacturaElectronica read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImportes }
  TFacturaElectronicaDetalleImportes = class(TROComplexType)
  private
    fCantidadReceptor: AnsiString;
    fUnidadReceptor: AnsiString;
    fDescripcionReceptor: AnsiString;
    fValorUnitarioReceptor: AnsiString;
    fImporteReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CantidadReceptor:AnsiString read fCantidadReceptor write fCantidadReceptor;
    property UnidadReceptor:AnsiString read fUnidadReceptor write fUnidadReceptor;
    property DescripcionReceptor:AnsiString read fDescripcionReceptor write fDescripcionReceptor;
    property ValorUnitarioReceptor:AnsiString read fValorUnitarioReceptor write fValorUnitarioReceptor;
    property ImporteReceptor:AnsiString read fImporteReceptor write fImporteReceptor;
  end;

  { TFacturaElectronicaDetalleImportesCollection }
  TFacturaElectronicaDetalleImportesCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImportes;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImportes);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImportes; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
    property Items[Index: integer]:TFacturaElectronicaDetalleImportes read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImpuestos }
  TFacturaElectronicaDetalleImpuestos = class(TROComplexType)
  private
    fImpuestoReceptor: AnsiString;
    fTasaReceptor: AnsiString;
    fImporteImpReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ImpuestoReceptor:AnsiString read fImpuestoReceptor write fImpuestoReceptor;
    property TasaReceptor:AnsiString read fTasaReceptor write fTasaReceptor;
    property ImporteImpReceptor:AnsiString read fImporteImpReceptor write fImporteImpReceptor;
  end;

  { TFacturaElectronicaDetalleImpuestosCollection }
  TFacturaElectronicaDetalleImpuestosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestos;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestos);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImpuestos; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestos read GetItems write SetItems; default;
  end;

  { TDatosFacturaPemex }
  TDatosFacturaPemex = class(TROComplexType)
  private
    fTurnoID: Integer;
    fEstacionID: Integer;
    fFecha: DateTime;
    fNombre: AnsiString;
    fFacturaPemexID: Integer;
    fSerie: AnsiString;
    fFolio: Integer;
    fTotal: Double;
    fDetalleFactura: ADetalleFacturaPemex;
    fProductoID: Integer;
    function GetDetalleFactura: ADetalleFacturaPemex;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property Nombre:AnsiString read fNombre write fNombre;
    property FacturaPemexID:Integer read fFacturaPemexID write fFacturaPemexID;
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Total:Double read fTotal write fTotal;
    property DetalleFactura:ADetalleFacturaPemex read GetDetalleFactura write fDetalleFactura;
    property ProductoID:Integer read fProductoID write fProductoID;
  end;

  { TDatosFacturaPemexCollection }
  TDatosFacturaPemexCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosFacturaPemex;
    procedure SetItems(aIndex: integer; const Value: TDatosFacturaPemex);
  public
    constructor Create; overload;
    function Add: TDatosFacturaPemex; reintroduce;
    property Items[Index: integer]:TDatosFacturaPemex read GetItems write SetItems; default;
  end;

  { TDetalleFacturaPemex }
  TDetalleFacturaPemex = class(TROComplexType)
  private
    fFacturaPemexID: Integer;
    fTipoValorPemexID: Integer;
    fCantidad: Double;
    fImporte: Double;
    fPrecio: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaPemexID:Integer read fFacturaPemexID write fFacturaPemexID;
    property TipoValorPemexID:Integer read fTipoValorPemexID write fTipoValorPemexID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Precio:Double read fPrecio write fPrecio;
  end;

  { TDetalleFacturaPemexCollection }
  TDetalleFacturaPemexCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleFacturaPemex;
    procedure SetItems(aIndex: integer; const Value: TDetalleFacturaPemex);
  public
    constructor Create; overload;
    function Add: TDetalleFacturaPemex; reintroduce;
    procedure SaveToArray(anArray: ADetalleFacturaPemex);
    procedure LoadFromArray(anArray: ADetalleFacturaPemex);
    property Items[Index: integer]:TDetalleFacturaPemex read GetItems write SetItems; default;
  end;

  { ATDetalleCupon }
  ATDetalleCupon_TDetalleCupon = array of TDetalleCupon;
  ATDetalleCupon = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleCupon_TDetalleCupon;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleCupon;
    procedure SetItems(aIndex: integer; const Value: TDetalleCupon);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleCupon; overload;
    function Add(const Value: TDetalleCupon):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleCupon read GetItems write SetItems; default;
    property InnerArray: ATDetalleCupon_TDetalleCupon read fItems;
  end;

  { ATDetalleFactura }
  ATDetalleFactura_TDetalleFactura = array of TDetalleFactura;
  ATDetalleFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleFactura_TDetalleFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFactura; overload;
    function Add(const Value: TDetalleFactura):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleFactura_TDetalleFactura read fItems;
  end;

  { ATTicketFactura }
  ATTicketFactura_TTicketFactura = array of TTicketFactura;
  ATTicketFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATTicketFactura_TTicketFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TTicketFactura;
    procedure SetItems(aIndex: integer; const Value: TTicketFactura);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTicketFactura; overload;
    function Add(const Value: TTicketFactura):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TTicketFactura read GetItems write SetItems; default;
    property InnerArray: ATTicketFactura_TTicketFactura read fItems;
  end;

  { ATDetalleValeCreditoFactura }
  ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura = array of TDetalleValeCreditoFactura;
  ATDetalleValeCreditoFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleValeCreditoFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleValeCreditoFactura);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleValeCreditoFactura; overload;
    function Add(const Value: TDetalleValeCreditoFactura):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleValeCreditoFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura read fItems;
  end;

  { ATLiquidacionDetalle }
  ATLiquidacionDetalle_TLiquidacionDetalle = array of TLiquidacionDetalle;
  ATLiquidacionDetalle = class(TROArray)
  private
    fCount: Integer;
    fItems : ATLiquidacionDetalle_TLiquidacionDetalle;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TLiquidacionDetalle;
    procedure SetItems(aIndex: integer; const Value: TLiquidacionDetalle);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLiquidacionDetalle; overload;
    function Add(const Value: TLiquidacionDetalle):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TLiquidacionDetalle read GetItems write SetItems; default;
    property InnerArray: ATLiquidacionDetalle_TLiquidacionDetalle read fItems;
  end;

  { ATLiquidacionProducto }
  ATLiquidacionProducto_TLiquidacionProducto = array of TLiquidacionProducto;
  ATLiquidacionProducto = class(TROArray)
  private
    fCount: Integer;
    fItems : ATLiquidacionProducto_TLiquidacionProducto;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TLiquidacionProducto;
    procedure SetItems(aIndex: integer; const Value: TLiquidacionProducto);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLiquidacionProducto; overload;
    function Add(const Value: TLiquidacionProducto):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TLiquidacionProducto read GetItems write SetItems; default;
    property InnerArray: ATLiquidacionProducto_TLiquidacionProducto read fItems;
  end;

  { ATDetalleTransaccion }
  ATDetalleTransaccion_TDetalleTransaccion = array of TDetalleTransaccion;
  ATDetalleTransaccion = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleTransaccion_TDetalleTransaccion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleTransaccion;
    procedure SetItems(aIndex: integer; const Value: TDetalleTransaccion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleTransaccion; overload;
    function Add(const Value: TDetalleTransaccion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleTransaccion read GetItems write SetItems; default;
    property InnerArray: ATDetalleTransaccion_TDetalleTransaccion read fItems;
  end;

  { ATCarteraVale }
  ATCarteraVale_TCarteraVale = array of TCarteraVale;
  ATCarteraVale = class(TROArray)
  private
    fCount: Integer;
    fItems : ATCarteraVale_TCarteraVale;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TCarteraVale;
    procedure SetItems(aIndex: integer; const Value: TCarteraVale);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCarteraVale; overload;
    function Add(const Value: TCarteraVale):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TCarteraVale read GetItems write SetItems; default;
    property InnerArray: ATCarteraVale_TCarteraVale read fItems;
  end;

  { ATDetalleRecibo }
  ATDetalleRecibo_TDetalleReciboPago = array of TDetalleReciboPago;
  ATDetalleRecibo = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleRecibo_TDetalleReciboPago;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleReciboPago;
    procedure SetItems(aIndex: integer; const Value: TDetalleReciboPago);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleReciboPago; overload;
    function Add(const Value: TDetalleReciboPago):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleReciboPago read GetItems write SetItems; default;
    property InnerArray: ATDetalleRecibo_TDetalleReciboPago read fItems;
  end;

  { ArrayOpcion }
  ArrayOpcion_TOpcion = array of TOpcion;
  ArrayOpcion = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcion_TOpcion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TOpcion;
    procedure SetItems(aIndex: integer; const Value: TOpcion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcion; overload;
    function Add(const Value: TOpcion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TOpcion read GetItems write SetItems; default;
    property InnerArray: ArrayOpcion_TOpcion read fItems;
  end;

  { ADetalleExpress }
  ADetalleExpress_TDetalleExpress = array of TDetalleExpress;
  ADetalleExpress = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleExpress_TDetalleExpress;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleExpress;
    procedure SetItems(aIndex: integer; const Value: TDetalleExpress);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleExpress; overload;
    function Add(const Value: TDetalleExpress):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleExpress read GetItems write SetItems; default;
    property InnerArray: ADetalleExpress_TDetalleExpress read fItems;
  end;

  { AAgrupacionBomba }
  AAgrupacionBomba_Integer = array of Integer;
  AAgrupacionBomba = class(TROArray)
  private
    fCount: Integer;
    fItems : AAgrupacionBomba_Integer;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): Integer;
    procedure SetItems(aIndex: integer; const Value: Integer);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:Integer): integer;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;

    property Count : integer read GetCount;
    property Items[Index: integer]:Integer read GetItems write SetItems; default;
    property InnerArray: AAgrupacionBomba_Integer read fItems;
  end;

  { AAgrupacion }
  AAgrupacion_TAgrupacion = array of TAgrupacion;
  AAgrupacion = class(TROArray)
  private
    fCount: Integer;
    fItems : AAgrupacion_TAgrupacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TAgrupacion;
    procedure SetItems(aIndex: integer; const Value: TAgrupacion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TAgrupacion; overload;
    function Add(const Value: TAgrupacion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TAgrupacion read GetItems write SetItems; default;
    property InnerArray: AAgrupacion_TAgrupacion read fItems;
  end;

  { ADatosCelular }
  ADatosCelular_TDatosCelular = array of TDatosCelular;
  ADatosCelular = class(TROArray)
  private
    fCount: Integer;
    fItems : ADatosCelular_TDatosCelular;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDatosCelular;
    procedure SetItems(aIndex: integer; const Value: TDatosCelular);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDatosCelular; overload;
    function Add(const Value: TDatosCelular):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDatosCelular read GetItems write SetItems; default;
    property InnerArray: ADatosCelular_TDatosCelular read fItems;
  end;

  { ADespachadorLiquidacion }
  ADespachadorLiquidacion_TDespachadorLiquidacion = array of TDespachadorLiquidacion;
  ADespachadorLiquidacion = class(TROArray)
  private
    fCount: Integer;
    fItems : ADespachadorLiquidacion_TDespachadorLiquidacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDespachadorLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDespachadorLiquidacion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDespachadorLiquidacion; overload;
    function Add(const Value: TDespachadorLiquidacion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDespachadorLiquidacion read GetItems write SetItems; default;
    property InnerArray: ADespachadorLiquidacion_TDespachadorLiquidacion read fItems;
  end;

  { ADetalleLiquidacion }
  ADetalleLiquidacion_TDetalleLiquidacion = array of TDetalleLiquidacion;
  ADetalleLiquidacion = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleLiquidacion_TDetalleLiquidacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleLiquidacion;
    procedure SetItems(aIndex: integer; const Value: TDetalleLiquidacion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleLiquidacion; overload;
    function Add(const Value: TDetalleLiquidacion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleLiquidacion read GetItems write SetItems; default;
    property InnerArray: ADetalleLiquidacion_TDetalleLiquidacion read fItems;
  end;

  { ATipoValor }
  ATipoValor_TTipoValor = array of TTipoValor;
  ATipoValor = class(TROArray)
  private
    fCount: Integer;
    fItems : ATipoValor_TTipoValor;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TTipoValor;
    procedure SetItems(aIndex: integer; const Value: TTipoValor);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTipoValor; overload;
    function Add(const Value: TTipoValor):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TTipoValor read GetItems write SetItems; default;
    property InnerArray: ATipoValor_TTipoValor read fItems;
  end;

  { ATFacturaElectronicaDetalleImportes }
  ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes = array of TFacturaElectronicaDetalleImportes;
  ATFacturaElectronicaDetalleImportes = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImportes;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImportes);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImportes; overload;
    function Add(const Value: TFacturaElectronicaDetalleImportes):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImportes read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes read fItems;
  end;

  { ATFacturaElectronicaDetalleImpuestos }
  ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos = array of TFacturaElectronicaDetalleImpuestos;
  ATFacturaElectronicaDetalleImpuestos = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestos;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestos);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImpuestos; overload;
    function Add(const Value: TFacturaElectronicaDetalleImpuestos):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestos read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos read fItems;
  end;

  { ADetalleFacturaPemex }
  ADetalleFacturaPemex_TDetalleFacturaPemex = array of TDetalleFacturaPemex;
  ADetalleFacturaPemex = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleFacturaPemex_TDetalleFacturaPemex;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleFacturaPemex;
    procedure SetItems(aIndex: integer; const Value: TDetalleFacturaPemex);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFacturaPemex; overload;
    function Add(const Value: TDetalleFacturaPemex):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleFacturaPemex read GetItems write SetItems; default;
    property InnerArray: ADetalleFacturaPemex_TDetalleFacturaPemex read fItems;
  end;

  { IServiceEmpresas }
  IServiceEmpresas = interface(IDataAbstractService)
    ['{762597B5-7713-4971-8C5A-32F68BB623AB}']
    function AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                          const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                   const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    function GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; 
                           const UsuarioID: Integer): Integer;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    function CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
    function CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function CostoProducto(const ProductoID: Integer): Double;
    function DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
    function Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
    function FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
    function FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
    function FacturaYLiquidacion(const ClienteID: Integer): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
    procedure GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    function GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
    procedure InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; 
                              const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; 
                              const Dia: Integer);
    procedure InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
    function ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
    function ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
    function ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
    function PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
    function StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
    function SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
    function SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
    function ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
    function VersionServer: AnsiString;
    function LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
    function BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
    function TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
    function BuscaSagarpa(const EstacionID: Integer): TSagarpa;
    function PuntosCalculaSaldo(const ClienteID: Integer): Double;
    function PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
    procedure PuntosGuardaDatos(const Datos: TDatosPuntos);
    function PuntosDatos(const ClienteID: Integer): TDatosPuntos;
    function EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
    function DatosPremio(const PremioID: Integer): TDatosPremio;
    function ValidaConsumo(const Consumo: TConsumoExpress): Integer;
    function AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
    function DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
    procedure ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    function TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
    function ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
    procedure PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
    function DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
    function LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString; 
                                   const EstacionID: Integer): AnsiString;
    function SELLOPEMs(const Texto: Widestring; const EstacionID: Integer): AnsiString;
    function CERs(const DIR: AnsiString): AnsiString;
    function ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
    function ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
    procedure PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
    procedure GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
    function AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function CERsNUM(const DIR: AnsiString): AnsiString;
  end;

  { CoServiceEmpresas }
  CoServiceEmpresas = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceEmpresas;
  end;

  { TServiceEmpresas_Proxy }
  TServiceEmpresas_Proxy = class(TDataAbstractService_Proxy, IServiceEmpresas)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                          const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                   const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    function GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; 
                           const UsuarioID: Integer): Integer;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    function CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
    function CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function CostoProducto(const ProductoID: Integer): Double;
    function DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
    function Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
    function FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
    function FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
    function FacturaYLiquidacion(const ClienteID: Integer): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
    procedure GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    function GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
    procedure InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; 
                              const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; 
                              const Dia: Integer);
    procedure InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
    function ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
    function ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
    function ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
    function PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
    function StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
    function SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
    function SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
    function ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
    function VersionServer: AnsiString;
    function LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
    function BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
    function TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
    function BuscaSagarpa(const EstacionID: Integer): TSagarpa;
    function PuntosCalculaSaldo(const ClienteID: Integer): Double;
    function PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
    procedure PuntosGuardaDatos(const Datos: TDatosPuntos);
    function PuntosDatos(const ClienteID: Integer): TDatosPuntos;
    function EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
    function DatosPremio(const PremioID: Integer): TDatosPremio;
    function ValidaConsumo(const Consumo: TConsumoExpress): Integer;
    function AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
    function DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
    procedure ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    function TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
    function ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
    procedure PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
    function DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
    function LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString; 
                                   const EstacionID: Integer): AnsiString;
    function SELLOPEMs(const Texto: Widestring; const EstacionID: Integer): AnsiString;
    function CERs(const DIR: AnsiString): AnsiString;
    function ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
    function ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
    procedure PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
    procedure GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
    function AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function CERsNUM(const DIR: AnsiString): AnsiString;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ ATDetalleCupon }

procedure ATDetalleCupon.Assign(iSource: TPersistent);
var lSource:ATDetalleCupon;
    i:integer;
begin
  if (iSource is ATDetalleCupon) then begin
    lSource := ATDetalleCupon(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleCupon.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleCupon);
end;

class function ATDetalleCupon.GetItemClass: TClass;
begin
  result := TDetalleCupon;
end;

class function ATDetalleCupon.GetItemSize: integer;
begin
  result := SizeOf(TDetalleCupon);
end;

function ATDetalleCupon.GetItems(aIndex: integer): TDetalleCupon;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleCupon.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleCupon.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleCupon.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleCupon.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleCupon.SetItems(aIndex: integer; const Value: TDetalleCupon);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleCupon.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleCupon.Create;
  FCount := ElementCount;
end;

function ATDetalleCupon.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleCupon.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleCupon.Add: TDetalleCupon;
begin
  result := TDetalleCupon.Create;
  Add(Result);
end;

function ATDetalleCupon.Add(const Value:TDetalleCupon): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleCupon.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleCupon;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleCupon, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleCupon.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleCupon, i);
end;

{ ATDetalleFactura }

procedure ATDetalleFactura.Assign(iSource: TPersistent);
var lSource:ATDetalleFactura;
    i:integer;
begin
  if (iSource is ATDetalleFactura) then begin
    lSource := ATDetalleFactura(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleFactura.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleFactura);
end;

class function ATDetalleFactura.GetItemClass: TClass;
begin
  result := TDetalleFactura;
end;

class function ATDetalleFactura.GetItemSize: integer;
begin
  result := SizeOf(TDetalleFactura);
end;

function ATDetalleFactura.GetItems(aIndex: integer): TDetalleFactura;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleFactura.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleFactura.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleFactura.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleFactura.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleFactura.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleFactura.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleFactura.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleFactura.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleFactura.Add: TDetalleFactura;
begin
  result := TDetalleFactura.Create;
  Add(Result);
end;

function ATDetalleFactura.Add(const Value:TDetalleFactura): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFactura;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFactura, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleFactura.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFactura, i);
end;

{ ATTicketFactura }

procedure ATTicketFactura.Assign(iSource: TPersistent);
var lSource:ATTicketFactura;
    i:integer;
begin
  if (iSource is ATTicketFactura) then begin
    lSource := ATTicketFactura(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATTicketFactura.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TTicketFactura);
end;

class function ATTicketFactura.GetItemClass: TClass;
begin
  result := TTicketFactura;
end;

class function ATTicketFactura.GetItemSize: integer;
begin
  result := SizeOf(TTicketFactura);
end;

function ATTicketFactura.GetItems(aIndex: integer): TTicketFactura;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATTicketFactura.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATTicketFactura.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATTicketFactura.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATTicketFactura.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATTicketFactura.SetItems(aIndex: integer; const Value: TTicketFactura);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATTicketFactura.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTicketFactura.Create;
  FCount := ElementCount;
end;

function ATTicketFactura.GetCount: integer;
begin
  result := FCount;
end;

procedure ATTicketFactura.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATTicketFactura.Add: TTicketFactura;
begin
  result := TTicketFactura.Create;
  Add(Result);
end;

function ATTicketFactura.Add(const Value:TTicketFactura): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATTicketFactura.ReadComplex(ASerializer: TObject);
var
  lval: TTicketFactura;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TTicketFactura, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATTicketFactura.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTicketFactura, i);
end;

{ ATDetalleValeCreditoFactura }

procedure ATDetalleValeCreditoFactura.Assign(iSource: TPersistent);
var lSource:ATDetalleValeCreditoFactura;
    i:integer;
begin
  if (iSource is ATDetalleValeCreditoFactura) then begin
    lSource := ATDetalleValeCreditoFactura(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleValeCreditoFactura.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleValeCreditoFactura);
end;

class function ATDetalleValeCreditoFactura.GetItemClass: TClass;
begin
  result := TDetalleValeCreditoFactura;
end;

class function ATDetalleValeCreditoFactura.GetItemSize: integer;
begin
  result := SizeOf(TDetalleValeCreditoFactura);
end;

function ATDetalleValeCreditoFactura.GetItems(aIndex: integer): TDetalleValeCreditoFactura;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleValeCreditoFactura.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleValeCreditoFactura.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleValeCreditoFactura.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleValeCreditoFactura.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleValeCreditoFactura.SetItems(aIndex: integer; const Value: TDetalleValeCreditoFactura);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleValeCreditoFactura.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleValeCreditoFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleValeCreditoFactura.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleValeCreditoFactura.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleValeCreditoFactura.Add: TDetalleValeCreditoFactura;
begin
  result := TDetalleValeCreditoFactura.Create;
  Add(Result);
end;

function ATDetalleValeCreditoFactura.Add(const Value:TDetalleValeCreditoFactura): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleValeCreditoFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleValeCreditoFactura;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleValeCreditoFactura, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleValeCreditoFactura.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleValeCreditoFactura, i);
end;

{ ATLiquidacionDetalle }

procedure ATLiquidacionDetalle.Assign(iSource: TPersistent);
var lSource:ATLiquidacionDetalle;
    i:integer;
begin
  if (iSource is ATLiquidacionDetalle) then begin
    lSource := ATLiquidacionDetalle(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATLiquidacionDetalle.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TLiquidacionDetalle);
end;

class function ATLiquidacionDetalle.GetItemClass: TClass;
begin
  result := TLiquidacionDetalle;
end;

class function ATLiquidacionDetalle.GetItemSize: integer;
begin
  result := SizeOf(TLiquidacionDetalle);
end;

function ATLiquidacionDetalle.GetItems(aIndex: integer): TLiquidacionDetalle;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATLiquidacionDetalle.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATLiquidacionDetalle.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATLiquidacionDetalle.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATLiquidacionDetalle.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATLiquidacionDetalle.SetItems(aIndex: integer; const Value: TLiquidacionDetalle);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATLiquidacionDetalle.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLiquidacionDetalle.Create;
  FCount := ElementCount;
end;

function ATLiquidacionDetalle.GetCount: integer;
begin
  result := FCount;
end;

procedure ATLiquidacionDetalle.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATLiquidacionDetalle.Add: TLiquidacionDetalle;
begin
  result := TLiquidacionDetalle.Create;
  Add(Result);
end;

function ATLiquidacionDetalle.Add(const Value:TLiquidacionDetalle): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATLiquidacionDetalle.ReadComplex(ASerializer: TObject);
var
  lval: TLiquidacionDetalle;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TLiquidacionDetalle, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATLiquidacionDetalle.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLiquidacionDetalle, i);
end;

{ ATLiquidacionProducto }

procedure ATLiquidacionProducto.Assign(iSource: TPersistent);
var lSource:ATLiquidacionProducto;
    i:integer;
begin
  if (iSource is ATLiquidacionProducto) then begin
    lSource := ATLiquidacionProducto(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATLiquidacionProducto.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TLiquidacionProducto);
end;

class function ATLiquidacionProducto.GetItemClass: TClass;
begin
  result := TLiquidacionProducto;
end;

class function ATLiquidacionProducto.GetItemSize: integer;
begin
  result := SizeOf(TLiquidacionProducto);
end;

function ATLiquidacionProducto.GetItems(aIndex: integer): TLiquidacionProducto;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATLiquidacionProducto.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATLiquidacionProducto.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATLiquidacionProducto.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATLiquidacionProducto.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATLiquidacionProducto.SetItems(aIndex: integer; const Value: TLiquidacionProducto);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATLiquidacionProducto.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLiquidacionProducto.Create;
  FCount := ElementCount;
end;

function ATLiquidacionProducto.GetCount: integer;
begin
  result := FCount;
end;

procedure ATLiquidacionProducto.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATLiquidacionProducto.Add: TLiquidacionProducto;
begin
  result := TLiquidacionProducto.Create;
  Add(Result);
end;

function ATLiquidacionProducto.Add(const Value:TLiquidacionProducto): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATLiquidacionProducto.ReadComplex(ASerializer: TObject);
var
  lval: TLiquidacionProducto;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TLiquidacionProducto, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATLiquidacionProducto.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLiquidacionProducto, i);
end;

{ ATDetalleTransaccion }

procedure ATDetalleTransaccion.Assign(iSource: TPersistent);
var lSource:ATDetalleTransaccion;
    i:integer;
begin
  if (iSource is ATDetalleTransaccion) then begin
    lSource := ATDetalleTransaccion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleTransaccion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleTransaccion);
end;

class function ATDetalleTransaccion.GetItemClass: TClass;
begin
  result := TDetalleTransaccion;
end;

class function ATDetalleTransaccion.GetItemSize: integer;
begin
  result := SizeOf(TDetalleTransaccion);
end;

function ATDetalleTransaccion.GetItems(aIndex: integer): TDetalleTransaccion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleTransaccion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleTransaccion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleTransaccion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleTransaccion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleTransaccion.SetItems(aIndex: integer; const Value: TDetalleTransaccion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleTransaccion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleTransaccion.Create;
  FCount := ElementCount;
end;

function ATDetalleTransaccion.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleTransaccion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleTransaccion.Add: TDetalleTransaccion;
begin
  result := TDetalleTransaccion.Create;
  Add(Result);
end;

function ATDetalleTransaccion.Add(const Value:TDetalleTransaccion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleTransaccion.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleTransaccion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleTransaccion, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleTransaccion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleTransaccion, i);
end;

{ ATCarteraVale }

procedure ATCarteraVale.Assign(iSource: TPersistent);
var lSource:ATCarteraVale;
    i:integer;
begin
  if (iSource is ATCarteraVale) then begin
    lSource := ATCarteraVale(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATCarteraVale.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TCarteraVale);
end;

class function ATCarteraVale.GetItemClass: TClass;
begin
  result := TCarteraVale;
end;

class function ATCarteraVale.GetItemSize: integer;
begin
  result := SizeOf(TCarteraVale);
end;

function ATCarteraVale.GetItems(aIndex: integer): TCarteraVale;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATCarteraVale.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATCarteraVale.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATCarteraVale.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATCarteraVale.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATCarteraVale.SetItems(aIndex: integer; const Value: TCarteraVale);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATCarteraVale.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCarteraVale.Create;
  FCount := ElementCount;
end;

function ATCarteraVale.GetCount: integer;
begin
  result := FCount;
end;

procedure ATCarteraVale.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATCarteraVale.Add: TCarteraVale;
begin
  result := TCarteraVale.Create;
  Add(Result);
end;

function ATCarteraVale.Add(const Value:TCarteraVale): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATCarteraVale.ReadComplex(ASerializer: TObject);
var
  lval: TCarteraVale;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TCarteraVale, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATCarteraVale.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCarteraVale, i);
end;

{ ATDetalleRecibo }

procedure ATDetalleRecibo.Assign(iSource: TPersistent);
var lSource:ATDetalleRecibo;
    i:integer;
begin
  if (iSource is ATDetalleRecibo) then begin
    lSource := ATDetalleRecibo(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleRecibo.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleReciboPago);
end;

class function ATDetalleRecibo.GetItemClass: TClass;
begin
  result := TDetalleReciboPago;
end;

class function ATDetalleRecibo.GetItemSize: integer;
begin
  result := SizeOf(TDetalleReciboPago);
end;

function ATDetalleRecibo.GetItems(aIndex: integer): TDetalleReciboPago;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleRecibo.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleRecibo.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleRecibo.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleRecibo.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleRecibo.SetItems(aIndex: integer; const Value: TDetalleReciboPago);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleRecibo.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleReciboPago.Create;
  FCount := ElementCount;
end;

function ATDetalleRecibo.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleRecibo.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleRecibo.Add: TDetalleReciboPago;
begin
  result := TDetalleReciboPago.Create;
  Add(Result);
end;

function ATDetalleRecibo.Add(const Value:TDetalleReciboPago): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleRecibo.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleReciboPago;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleReciboPago, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleRecibo.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleReciboPago, i);
end;

{ ArrayOpcion }

procedure ArrayOpcion.Assign(iSource: TPersistent);
var lSource:ArrayOpcion;
    i:integer;
begin
  if (iSource is ArrayOpcion) then begin
    lSource := ArrayOpcion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TOpcion);
end;

class function ArrayOpcion.GetItemClass: TClass;
begin
  result := TOpcion;
end;

class function ArrayOpcion.GetItemSize: integer;
begin
  result := SizeOf(TOpcion);
end;

function ArrayOpcion.GetItems(aIndex: integer): TOpcion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ArrayOpcion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ArrayOpcion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ArrayOpcion.SetItems(aIndex: integer; const Value: TOpcion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcion.Create;
  FCount := ElementCount;
end;

function ArrayOpcion.GetCount: integer;
begin
  result := FCount;
end;

procedure ArrayOpcion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ArrayOpcion.Add: TOpcion;
begin
  result := TOpcion.Create;
  Add(Result);
end;

function ArrayOpcion.Add(const Value:TOpcion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ArrayOpcion.ReadComplex(ASerializer: TObject);
var
  lval: TOpcion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TOpcion, lval, i);
    Items[i] := lval;
  end;
end;

procedure ArrayOpcion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcion, i);
end;

{ ADetalleExpress }

procedure ADetalleExpress.Assign(iSource: TPersistent);
var lSource:ADetalleExpress;
    i:integer;
begin
  if (iSource is ADetalleExpress) then begin
    lSource := ADetalleExpress(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleExpress.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleExpress);
end;

class function ADetalleExpress.GetItemClass: TClass;
begin
  result := TDetalleExpress;
end;

class function ADetalleExpress.GetItemSize: integer;
begin
  result := SizeOf(TDetalleExpress);
end;

function ADetalleExpress.GetItems(aIndex: integer): TDetalleExpress;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADetalleExpress.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADetalleExpress.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleExpress.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleExpress.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADetalleExpress.SetItems(aIndex: integer; const Value: TDetalleExpress);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleExpress.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleExpress.Create;
  FCount := ElementCount;
end;

function ADetalleExpress.GetCount: integer;
begin
  result := FCount;
end;

procedure ADetalleExpress.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADetalleExpress.Add: TDetalleExpress;
begin
  result := TDetalleExpress.Create;
  Add(Result);
end;

function ADetalleExpress.Add(const Value:TDetalleExpress): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADetalleExpress.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleExpress;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleExpress, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADetalleExpress.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleExpress, i);
end;

{ AAgrupacionBomba }

procedure AAgrupacionBomba.Assign(iSource: TPersistent);
var lSource:AAgrupacionBomba;
    i:integer;
begin
  if (iSource is AAgrupacionBomba) then begin
    lSource := AAgrupacionBomba(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      Items[i] := lSource.Items[i];
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAgrupacionBomba.GetItemType: PTypeInfo;
begin
  result := TypeInfo(Integer);
end;

class function AAgrupacionBomba.GetItemSize: integer;
begin
  result := SizeOf(Integer);
end;

function AAgrupacionBomba.GetItems(aIndex: integer): Integer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AAgrupacionBomba.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := @fItems[aIndex];
end;

procedure AAgrupacionBomba.Clear;
begin
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAgrupacionBomba.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AAgrupacionBomba.SetItems(aIndex: integer; const Value: Integer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure AAgrupacionBomba.Resize(ElementCount: integer);
begin
  if fCount = ElementCount then Exit;
  SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function AAgrupacionBomba.GetCount: integer;
begin
  result := FCount;
end;

procedure AAgrupacionBomba.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AAgrupacionBomba.Add(const Value: Integer): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

function AAgrupacionBomba.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  result := -1;
end;

procedure AAgrupacionBomba.ReadComplex(ASerializer: TObject);
var
  lval: Integer;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, lval, i);
    Items[i] := lval;
  end;
end;

procedure AAgrupacionBomba.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, fItems[i], i);
end;

{ AAgrupacion }

procedure AAgrupacion.Assign(iSource: TPersistent);
var lSource:AAgrupacion;
    i:integer;
begin
  if (iSource is AAgrupacion) then begin
    lSource := AAgrupacion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAgrupacion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TAgrupacion);
end;

class function AAgrupacion.GetItemClass: TClass;
begin
  result := TAgrupacion;
end;

class function AAgrupacion.GetItemSize: integer;
begin
  result := SizeOf(TAgrupacion);
end;

function AAgrupacion.GetItems(aIndex: integer): TAgrupacion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AAgrupacion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AAgrupacion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AAgrupacion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAgrupacion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AAgrupacion.SetItems(aIndex: integer; const Value: TAgrupacion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AAgrupacion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TAgrupacion.Create;
  FCount := ElementCount;
end;

function AAgrupacion.GetCount: integer;
begin
  result := FCount;
end;

procedure AAgrupacion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AAgrupacion.Add: TAgrupacion;
begin
  result := TAgrupacion.Create;
  Add(Result);
end;

function AAgrupacion.Add(const Value:TAgrupacion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AAgrupacion.ReadComplex(ASerializer: TObject);
var
  lval: TAgrupacion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TAgrupacion, lval, i);
    Items[i] := lval;
  end;
end;

procedure AAgrupacion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TAgrupacion, i);
end;

{ ADatosCelular }

procedure ADatosCelular.Assign(iSource: TPersistent);
var lSource:ADatosCelular;
    i:integer;
begin
  if (iSource is ADatosCelular) then begin
    lSource := ADatosCelular(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADatosCelular.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDatosCelular);
end;

class function ADatosCelular.GetItemClass: TClass;
begin
  result := TDatosCelular;
end;

class function ADatosCelular.GetItemSize: integer;
begin
  result := SizeOf(TDatosCelular);
end;

function ADatosCelular.GetItems(aIndex: integer): TDatosCelular;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADatosCelular.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADatosCelular.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADatosCelular.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADatosCelular.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADatosCelular.SetItems(aIndex: integer; const Value: TDatosCelular);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADatosCelular.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDatosCelular.Create;
  FCount := ElementCount;
end;

function ADatosCelular.GetCount: integer;
begin
  result := FCount;
end;

procedure ADatosCelular.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADatosCelular.Add: TDatosCelular;
begin
  result := TDatosCelular.Create;
  Add(Result);
end;

function ADatosCelular.Add(const Value:TDatosCelular): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADatosCelular.ReadComplex(ASerializer: TObject);
var
  lval: TDatosCelular;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDatosCelular, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADatosCelular.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDatosCelular, i);
end;

{ ADespachadorLiquidacion }

procedure ADespachadorLiquidacion.Assign(iSource: TPersistent);
var lSource:ADespachadorLiquidacion;
    i:integer;
begin
  if (iSource is ADespachadorLiquidacion) then begin
    lSource := ADespachadorLiquidacion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADespachadorLiquidacion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDespachadorLiquidacion);
end;

class function ADespachadorLiquidacion.GetItemClass: TClass;
begin
  result := TDespachadorLiquidacion;
end;

class function ADespachadorLiquidacion.GetItemSize: integer;
begin
  result := SizeOf(TDespachadorLiquidacion);
end;

function ADespachadorLiquidacion.GetItems(aIndex: integer): TDespachadorLiquidacion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADespachadorLiquidacion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADespachadorLiquidacion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADespachadorLiquidacion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADespachadorLiquidacion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADespachadorLiquidacion.SetItems(aIndex: integer; const Value: TDespachadorLiquidacion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADespachadorLiquidacion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDespachadorLiquidacion.Create;
  FCount := ElementCount;
end;

function ADespachadorLiquidacion.GetCount: integer;
begin
  result := FCount;
end;

procedure ADespachadorLiquidacion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADespachadorLiquidacion.Add: TDespachadorLiquidacion;
begin
  result := TDespachadorLiquidacion.Create;
  Add(Result);
end;

function ADespachadorLiquidacion.Add(const Value:TDespachadorLiquidacion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADespachadorLiquidacion.ReadComplex(ASerializer: TObject);
var
  lval: TDespachadorLiquidacion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDespachadorLiquidacion, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADespachadorLiquidacion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDespachadorLiquidacion, i);
end;

{ ADetalleLiquidacion }

procedure ADetalleLiquidacion.Assign(iSource: TPersistent);
var lSource:ADetalleLiquidacion;
    i:integer;
begin
  if (iSource is ADetalleLiquidacion) then begin
    lSource := ADetalleLiquidacion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleLiquidacion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleLiquidacion);
end;

class function ADetalleLiquidacion.GetItemClass: TClass;
begin
  result := TDetalleLiquidacion;
end;

class function ADetalleLiquidacion.GetItemSize: integer;
begin
  result := SizeOf(TDetalleLiquidacion);
end;

function ADetalleLiquidacion.GetItems(aIndex: integer): TDetalleLiquidacion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADetalleLiquidacion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADetalleLiquidacion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleLiquidacion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleLiquidacion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADetalleLiquidacion.SetItems(aIndex: integer; const Value: TDetalleLiquidacion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleLiquidacion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleLiquidacion.Create;
  FCount := ElementCount;
end;

function ADetalleLiquidacion.GetCount: integer;
begin
  result := FCount;
end;

procedure ADetalleLiquidacion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADetalleLiquidacion.Add: TDetalleLiquidacion;
begin
  result := TDetalleLiquidacion.Create;
  Add(Result);
end;

function ADetalleLiquidacion.Add(const Value:TDetalleLiquidacion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADetalleLiquidacion.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleLiquidacion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleLiquidacion, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADetalleLiquidacion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleLiquidacion, i);
end;

{ ATipoValor }

procedure ATipoValor.Assign(iSource: TPersistent);
var lSource:ATipoValor;
    i:integer;
begin
  if (iSource is ATipoValor) then begin
    lSource := ATipoValor(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATipoValor.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TTipoValor);
end;

class function ATipoValor.GetItemClass: TClass;
begin
  result := TTipoValor;
end;

class function ATipoValor.GetItemSize: integer;
begin
  result := SizeOf(TTipoValor);
end;

function ATipoValor.GetItems(aIndex: integer): TTipoValor;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATipoValor.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATipoValor.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATipoValor.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATipoValor.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATipoValor.SetItems(aIndex: integer; const Value: TTipoValor);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATipoValor.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTipoValor.Create;
  FCount := ElementCount;
end;

function ATipoValor.GetCount: integer;
begin
  result := FCount;
end;

procedure ATipoValor.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATipoValor.Add: TTipoValor;
begin
  result := TTipoValor.Create;
  Add(Result);
end;

function ATipoValor.Add(const Value:TTipoValor): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATipoValor.ReadComplex(ASerializer: TObject);
var
  lval: TTipoValor;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TTipoValor, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATipoValor.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTipoValor, i);
end;

{ ATFacturaElectronicaDetalleImportes }

procedure ATFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImportes;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImportes) then begin
    lSource := ATFacturaElectronicaDetalleImportes(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImportes);
end;

class function ATFacturaElectronicaDetalleImportes.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImportes;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImportes);
end;

function ATFacturaElectronicaDetalleImportes.GetItems(aIndex: integer): TFacturaElectronicaDetalleImportes;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImportes.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImportes.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImportes.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImportes.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImportes);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImportes.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImportes.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImportes.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImportes.Add: TFacturaElectronicaDetalleImportes;
begin
  result := TFacturaElectronicaDetalleImportes.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImportes.Add(const Value:TFacturaElectronicaDetalleImportes): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImportes;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImportes, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImportes, i);
end;

{ ATFacturaElectronicaDetalleImpuestos }

procedure ATFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImpuestos;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImpuestos) then begin
    lSource := ATFacturaElectronicaDetalleImpuestos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImpuestos);
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImpuestos;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImpuestos);
end;

function ATFacturaElectronicaDetalleImpuestos.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestos;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImpuestos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestos);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImpuestos.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImpuestos.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImpuestos.Add: TFacturaElectronicaDetalleImpuestos;
begin
  result := TFacturaElectronicaDetalleImpuestos.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImpuestos.Add(const Value:TFacturaElectronicaDetalleImpuestos): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImpuestos;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImpuestos, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImpuestos, i);
end;

{ ADetalleFacturaPemex }

procedure ADetalleFacturaPemex.Assign(iSource: TPersistent);
var lSource:ADetalleFacturaPemex;
    i:integer;
begin
  if (iSource is ADetalleFacturaPemex) then begin
    lSource := ADetalleFacturaPemex(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleFacturaPemex.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleFacturaPemex);
end;

class function ADetalleFacturaPemex.GetItemClass: TClass;
begin
  result := TDetalleFacturaPemex;
end;

class function ADetalleFacturaPemex.GetItemSize: integer;
begin
  result := SizeOf(TDetalleFacturaPemex);
end;

function ADetalleFacturaPemex.GetItems(aIndex: integer): TDetalleFacturaPemex;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADetalleFacturaPemex.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADetalleFacturaPemex.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleFacturaPemex.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleFacturaPemex.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADetalleFacturaPemex.SetItems(aIndex: integer; const Value: TDetalleFacturaPemex);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleFacturaPemex.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFacturaPemex.Create;
  FCount := ElementCount;
end;

function ADetalleFacturaPemex.GetCount: integer;
begin
  result := FCount;
end;

procedure ADetalleFacturaPemex.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADetalleFacturaPemex.Add: TDetalleFacturaPemex;
begin
  result := TDetalleFacturaPemex.Create;
  Add(Result);
end;

function ADetalleFacturaPemex.Add(const Value:TDetalleFacturaPemex): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADetalleFacturaPemex.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFacturaPemex;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFacturaPemex, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADetalleFacturaPemex.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFacturaPemex, i);
end;

{ TParametros }

procedure TParametros.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TParametros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TParametros) then begin
    lSource := LibraryEmpresas_Intf.TParametros(iSource);
    FechaIni := lSource.FechaIni;
    FechaFin := lSource.FechaFin;
    ClienteIni := lSource.ClienteIni;
    ClienteFin := lSource.ClienteFin;
    Estacion := lSource.Estacion;
    SecuenciaIni := lSource.SecuenciaIni;
    SecuenciaFin := lSource.SecuenciaFin;
    Factura := lSource.Factura;
    FolioFactura := lSource.FolioFactura;
    Serie := lSource.Serie;
    Ejercicio := lSource.Ejercicio;
    Periodo := lSource.Periodo;
    Dia := lSource.Dia;
    EjercicioFin := lSource.EjercicioFin;
    PeriodoFin := lSource.PeriodoFin;
    DiaFin := lSource.DiaFin;
    Secuencia := lSource.Secuencia;
    Status := lSource.Status;
    Agrupacion := lSource.Agrupacion;
    Almacen := lSource.Almacen;
    SecuenciaIniLiquidacion := lSource.SecuenciaIniLiquidacion;
    SecuenciaFinLiquidacion := lSource.SecuenciaFinLiquidacion;
    FacturasdeCompras := lSource.FacturasdeCompras;
    MontoFacturado := lSource.MontoFacturado;
    Turno := lSource.Turno;
    EmpleadoIni := lSource.EmpleadoIni;
    EmpleadoFin := lSource.EmpleadoFin;
    EstacionIni := lSource.EstacionIni;
    EstacionFin := lSource.EstacionFin;
  end;
end;

procedure TParametros.ReadComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasdeCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_MontoFacturado: Double;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).ReadInteger('ClienteIni', otSLong, l_ClienteIni);
    ClienteIni := l_ClienteIni;
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).ReadInteger('ClienteFin', otSLong, l_ClienteFin);
    ClienteFin := l_ClienteFin;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_SecuenciaIni := SecuenciaIni;
    TROSerializer(ASerializer).ReadInteger('SecuenciaIni', otSLong, l_SecuenciaIni);
    SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaFin := SecuenciaFin;
    TROSerializer(ASerializer).ReadInteger('SecuenciaFin', otSLong, l_SecuenciaFin);
    SecuenciaFin := l_SecuenciaFin;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadInteger('Factura', otSLong, l_Factura);
    Factura := l_Factura;
    l_FolioFactura := FolioFactura;
    TROSerializer(ASerializer).ReadInteger('FolioFactura', otSLong, l_FolioFactura);
    FolioFactura := l_FolioFactura;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_EjercicioFin := EjercicioFin;
    TROSerializer(ASerializer).ReadInteger('EjercicioFin', otSLong, l_EjercicioFin);
    EjercicioFin := l_EjercicioFin;
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).ReadInteger('PeriodoFin', otSLong, l_PeriodoFin);
    PeriodoFin := l_PeriodoFin;
    l_DiaFin := DiaFin;
    TROSerializer(ASerializer).ReadInteger('DiaFin', otSLong, l_DiaFin);
    DiaFin := l_DiaFin;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    Secuencia := l_Secuencia;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_Agrupacion := Agrupacion;
    TROSerializer(ASerializer).ReadInteger('Agrupacion', otSLong, l_Agrupacion);
    Agrupacion := l_Agrupacion;
    l_Almacen := Almacen;
    TROSerializer(ASerializer).ReadInteger('Almacen', otSLong, l_Almacen);
    Almacen := l_Almacen;
    l_SecuenciaIniLiquidacion := SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', otSLong, l_SecuenciaIniLiquidacion);
    SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_SecuenciaFinLiquidacion := SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', otSLong, l_SecuenciaFinLiquidacion);
    SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_FacturasdeCompras := FacturasdeCompras;
    TROSerializer(ASerializer).ReadInteger('FacturasdeCompras', otSLong, l_FacturasdeCompras);
    FacturasdeCompras := l_FacturasdeCompras;
    l_MontoFacturado := MontoFacturado;
    TROSerializer(ASerializer).ReadDouble('MontoFacturado', ftDouble, l_MontoFacturado);
    MontoFacturado := l_MontoFacturado;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_EmpleadoIni := EmpleadoIni;
    TROSerializer(ASerializer).ReadInteger('EmpleadoIni', otSLong, l_EmpleadoIni);
    EmpleadoIni := l_EmpleadoIni;
    l_EmpleadoFin := EmpleadoFin;
    TROSerializer(ASerializer).ReadInteger('EmpleadoFin', otSLong, l_EmpleadoFin);
    EmpleadoFin := l_EmpleadoFin;
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).ReadInteger('EstacionIni', otSLong, l_EstacionIni);
    EstacionIni := l_EstacionIni;
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).ReadInteger('EstacionFin', otSLong, l_EstacionFin);
    EstacionFin := l_EstacionFin;
  end
  else begin
    l_Agrupacion := Agrupacion;
    TROSerializer(ASerializer).ReadInteger('Agrupacion', otSLong, l_Agrupacion);
    Agrupacion := l_Agrupacion;
    l_Almacen := Almacen;
    TROSerializer(ASerializer).ReadInteger('Almacen', otSLong, l_Almacen);
    Almacen := l_Almacen;
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).ReadInteger('ClienteFin', otSLong, l_ClienteFin);
    ClienteFin := l_ClienteFin;
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).ReadInteger('ClienteIni', otSLong, l_ClienteIni);
    ClienteIni := l_ClienteIni;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_DiaFin := DiaFin;
    TROSerializer(ASerializer).ReadInteger('DiaFin', otSLong, l_DiaFin);
    DiaFin := l_DiaFin;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_EjercicioFin := EjercicioFin;
    TROSerializer(ASerializer).ReadInteger('EjercicioFin', otSLong, l_EjercicioFin);
    EjercicioFin := l_EjercicioFin;
    l_EmpleadoFin := EmpleadoFin;
    TROSerializer(ASerializer).ReadInteger('EmpleadoFin', otSLong, l_EmpleadoFin);
    EmpleadoFin := l_EmpleadoFin;
    l_EmpleadoIni := EmpleadoIni;
    TROSerializer(ASerializer).ReadInteger('EmpleadoIni', otSLong, l_EmpleadoIni);
    EmpleadoIni := l_EmpleadoIni;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).ReadInteger('EstacionFin', otSLong, l_EstacionFin);
    EstacionFin := l_EstacionFin;
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).ReadInteger('EstacionIni', otSLong, l_EstacionIni);
    EstacionIni := l_EstacionIni;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadInteger('Factura', otSLong, l_Factura);
    Factura := l_Factura;
    l_FacturasdeCompras := FacturasdeCompras;
    TROSerializer(ASerializer).ReadInteger('FacturasdeCompras', otSLong, l_FacturasdeCompras);
    FacturasdeCompras := l_FacturasdeCompras;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FolioFactura := FolioFactura;
    TROSerializer(ASerializer).ReadInteger('FolioFactura', otSLong, l_FolioFactura);
    FolioFactura := l_FolioFactura;
    l_MontoFacturado := MontoFacturado;
    TROSerializer(ASerializer).ReadDouble('MontoFacturado', ftDouble, l_MontoFacturado);
    MontoFacturado := l_MontoFacturado;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).ReadInteger('PeriodoFin', otSLong, l_PeriodoFin);
    PeriodoFin := l_PeriodoFin;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    Secuencia := l_Secuencia;
    l_SecuenciaFin := SecuenciaFin;
    TROSerializer(ASerializer).ReadInteger('SecuenciaFin', otSLong, l_SecuenciaFin);
    SecuenciaFin := l_SecuenciaFin;
    l_SecuenciaFinLiquidacion := SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', otSLong, l_SecuenciaFinLiquidacion);
    SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_SecuenciaIni := SecuenciaIni;
    TROSerializer(ASerializer).ReadInteger('SecuenciaIni', otSLong, l_SecuenciaIni);
    SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaIniLiquidacion := SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', otSLong, l_SecuenciaIniLiquidacion);
    SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
  end;
end;

procedure TParametros.WriteComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasdeCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_MontoFacturado: Double;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametros);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', otSLong, l_ClienteIni);
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', otSLong, l_ClienteFin);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_SecuenciaIni := SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', otSLong, l_SecuenciaIni);
    l_SecuenciaFin := SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', otSLong, l_SecuenciaFin);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', otSLong, l_Factura);
    l_FolioFactura := FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', otSLong, l_FolioFactura);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_EjercicioFin := EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', otSLong, l_EjercicioFin);
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', otSLong, l_PeriodoFin);
    l_DiaFin := DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', otSLong, l_DiaFin);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Agrupacion := Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', otSLong, l_Agrupacion);
    l_Almacen := Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', otSLong, l_Almacen);
    l_SecuenciaIniLiquidacion := SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', otSLong, l_SecuenciaIniLiquidacion);
    l_SecuenciaFinLiquidacion := SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', otSLong, l_SecuenciaFinLiquidacion);
    l_FacturasdeCompras := FacturasdeCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasdeCompras', otSLong, l_FacturasdeCompras);
    l_MontoFacturado := MontoFacturado;
    TROSerializer(ASerializer).WriteDouble('MontoFacturado', ftDouble, l_MontoFacturado);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_EmpleadoIni := EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', otSLong, l_EmpleadoIni);
    l_EmpleadoFin := EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', otSLong, l_EmpleadoFin);
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', otSLong, l_EstacionIni);
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', otSLong, l_EstacionFin);
  end
  else begin
    l_Agrupacion := Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', otSLong, l_Agrupacion);
    l_Almacen := Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', otSLong, l_Almacen);
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', otSLong, l_ClienteFin);
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', otSLong, l_ClienteIni);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_DiaFin := DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', otSLong, l_DiaFin);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_EjercicioFin := EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', otSLong, l_EjercicioFin);
    l_EmpleadoFin := EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', otSLong, l_EmpleadoFin);
    l_EmpleadoIni := EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', otSLong, l_EmpleadoIni);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', otSLong, l_EstacionFin);
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', otSLong, l_EstacionIni);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', otSLong, l_Factura);
    l_FacturasdeCompras := FacturasdeCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasdeCompras', otSLong, l_FacturasdeCompras);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FolioFactura := FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', otSLong, l_FolioFactura);
    l_MontoFacturado := MontoFacturado;
    TROSerializer(ASerializer).WriteDouble('MontoFacturado', ftDouble, l_MontoFacturado);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', otSLong, l_PeriodoFin);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_SecuenciaFin := SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', otSLong, l_SecuenciaFin);
    l_SecuenciaFinLiquidacion := SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', otSLong, l_SecuenciaFinLiquidacion);
    l_SecuenciaIni := SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', otSLong, l_SecuenciaIni);
    l_SecuenciaIniLiquidacion := SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', otSLong, l_SecuenciaIniLiquidacion);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
  end;
end;

{ TParametrosCollection }
constructor TParametrosCollection.Create;
begin
  inherited Create(TParametros);
end;

constructor TParametrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosCollection.Add: TParametros;
begin
  result := TParametros(inherited Add);
end;

function TParametrosCollection.GetItems(aIndex: integer): TParametros;
begin
  result := TParametros(inherited Items[aIndex]);
end;

procedure TParametrosCollection.SetItems(aIndex: integer; const Value: TParametros);
begin
  TParametros(inherited Items[aIndex]).Assign(Value);
end;

{ TFactura }

procedure TFactura.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFactura) then begin
    lSource := LibraryEmpresas_Intf.TFactura(iSource);
    Serie := lSource.Serie;
    Fecha := lSource.Fecha;
    Subtotal := lSource.Subtotal;
    Impuesto := lSource.Impuesto;
    Total := lSource.Total;
    ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    Turno := lSource.Turno;
    EstacionID := lSource.EstacionID;
    ClienteID := lSource.ClienteID;
    FormaPagoID := lSource.FormaPagoID;
    TipoFacturaID := lSource.TipoFacturaID;
    FacturaID := lSource.FacturaID;
    Tickets := lSource.Tickets;
    UsuarioID := lSource.UsuarioID;
    ISR := lSource.ISR;
    IVARTN := lSource.IVARTN;
  end;
end;

procedure TFactura.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_ISR: Double;
  l_IVARTN: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_TipoFacturaID: Integer;
  l_Total: Double;
  l_Turno: Integer;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
    l_TipoFacturaID := TipoFacturaID;
    TROSerializer(ASerializer).ReadInteger('TipoFacturaID', otSLong, l_TipoFacturaID);
    TipoFacturaID := l_TipoFacturaID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_ISR := ISR;
    TROSerializer(ASerializer).ReadDouble('ISR', ftDouble, l_ISR);
    ISR := l_ISR;
    l_IVARTN := IVARTN;
    TROSerializer(ASerializer).ReadDouble('IVARTN', ftDouble, l_IVARTN);
    IVARTN := l_IVARTN;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_ISR := ISR;
    TROSerializer(ASerializer).ReadDouble('ISR', ftDouble, l_ISR);
    ISR := l_ISR;
    l_IVARTN := IVARTN;
    TROSerializer(ASerializer).ReadDouble('IVARTN', ftDouble, l_IVARTN);
    IVARTN := l_IVARTN;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_TipoFacturaID := TipoFacturaID;
    TROSerializer(ASerializer).ReadInteger('TipoFacturaID', otSLong, l_TipoFacturaID);
    TipoFacturaID := l_TipoFacturaID;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TFactura.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_ISR: Double;
  l_IVARTN: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_TipoFacturaID: Integer;
  l_Total: Double;
  l_Turno: Integer;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactura);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
    l_TipoFacturaID := TipoFacturaID;
    TROSerializer(ASerializer).WriteInteger('TipoFacturaID', otSLong, l_TipoFacturaID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_ISR := ISR;
    TROSerializer(ASerializer).WriteDouble('ISR', ftDouble, l_ISR);
    l_IVARTN := IVARTN;
    TROSerializer(ASerializer).WriteDouble('IVARTN', ftDouble, l_IVARTN);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_ISR := ISR;
    TROSerializer(ASerializer).WriteDouble('ISR', ftDouble, l_ISR);
    l_IVARTN := IVARTN;
    TROSerializer(ASerializer).WriteDouble('IVARTN', ftDouble, l_IVARTN);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_TipoFacturaID := TipoFacturaID;
    TROSerializer(ASerializer).WriteInteger('TipoFacturaID', otSLong, l_TipoFacturaID);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TFacturaCollection }
constructor TFacturaCollection.Create;
begin
  inherited Create(TFactura);
end;

constructor TFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaCollection.Add: TFactura;
begin
  result := TFactura(inherited Add);
end;

function TFacturaCollection.GetItems(aIndex: integer): TFactura;
begin
  result := TFactura(inherited Items[aIndex]);
end;

procedure TFacturaCollection.SetItems(aIndex: integer; const Value: TFactura);
begin
  TFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFactura }

procedure TDetalleFactura.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleFactura) then begin
    lSource := LibraryEmpresas_Intf.TDetalleFactura(iSource);
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    FacturaID := lSource.FacturaID;
    ProductoID := lSource.ProductoID;
    Codigo := lSource.Codigo;
    Descripcion := lSource.Descripcion;
  end;
end;

procedure TDetalleFactura.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TDetalleFactura.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFactura);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TDetalleFacturaCollection }
constructor TDetalleFacturaCollection.Create;
begin
  inherited Create(TDetalleFactura);
end;

constructor TDetalleFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaCollection.Add: TDetalleFactura;
begin
  result := TDetalleFactura(inherited Add);
end;

function TDetalleFacturaCollection.GetItems(aIndex: integer): TDetalleFactura;
begin
  result := TDetalleFactura(inherited Items[aIndex]);
end;

procedure TDetalleFacturaCollection.LoadFromArray(anArray: ATDetalleFactura);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleFacturaCollection.SaveToArray(anArray: ATDetalleFactura);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleFactura.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleFacturaCollection.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  TDetalleFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TTicketFactura }

procedure TTicketFactura.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TTicketFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTicketFactura) then begin
    lSource := LibraryEmpresas_Intf.TTicketFactura(iSource);
    TicketID := lSource.TicketID;
    Fecha := lSource.Fecha;
    Volumen := lSource.Volumen;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ProductoID := lSource.ProductoID;
    FacturaID := lSource.FacturaID;
    EstacionID := lSource.EstacionID;
  end;
end;

procedure TTicketFactura.ReadComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
  end
  else begin
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TTicketFactura.WriteComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTicketFactura);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
  end
  else begin
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TTicketFacturaCollection }
constructor TTicketFacturaCollection.Create;
begin
  inherited Create(TTicketFactura);
end;

constructor TTicketFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTicketFacturaCollection.Add: TTicketFactura;
begin
  result := TTicketFactura(inherited Add);
end;

function TTicketFacturaCollection.GetItems(aIndex: integer): TTicketFactura;
begin
  result := TTicketFactura(inherited Items[aIndex]);
end;

procedure TTicketFacturaCollection.LoadFromArray(anArray: ATTicketFactura);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TTicketFacturaCollection.SaveToArray(anArray: ATTicketFactura);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TTicketFactura.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TTicketFacturaCollection.SetItems(aIndex: integer; const Value: TTicketFactura);
begin
  TTicketFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleCupon }

procedure TDetalleCupon.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleCupon) then begin
    lSource := LibraryEmpresas_Intf.TDetalleCupon(iSource);
    Denominacion := lSource.Denominacion;
    Cantidad := lSource.Cantidad;
    Referencia := lSource.Referencia;
    FacturaID := lSource.FacturaID;
  end;
end;

procedure TDetalleCupon.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end;
end;

procedure TDetalleCupon.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleCupon);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end;
end;

{ TDetalleCuponCollection }
constructor TDetalleCuponCollection.Create;
begin
  inherited Create(TDetalleCupon);
end;

constructor TDetalleCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleCuponCollection.Add: TDetalleCupon;
begin
  result := TDetalleCupon(inherited Add);
end;

function TDetalleCuponCollection.GetItems(aIndex: integer): TDetalleCupon;
begin
  result := TDetalleCupon(inherited Items[aIndex]);
end;

procedure TDetalleCuponCollection.LoadFromArray(anArray: ATDetalleCupon);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleCuponCollection.SaveToArray(anArray: ATDetalleCupon);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleCupon.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleCuponCollection.SetItems(aIndex: integer; const Value: TDetalleCupon);
begin
  TDetalleCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleValeCreditoFactura }

procedure TDetalleValeCreditoFactura.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleValeCreditoFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleValeCreditoFactura) then begin
    lSource := LibraryEmpresas_Intf.TDetalleValeCreditoFactura(iSource);
    NoVale := lSource.NoVale;
    Importe := lSource.Importe;
    FacturaID := lSource.FacturaID;
    CarteraValeCreditoID := lSource.CarteraValeCreditoID;
  end;
end;

procedure TDetalleValeCreditoFactura.ReadComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_NoVale: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_NoVale := NoVale;
    TROSerializer(ASerializer).ReadInteger('NoVale', otSLong, l_NoVale);
    NoVale := l_NoVale;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    CarteraValeCreditoID := l_CarteraValeCreditoID;
  end
  else begin
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_NoVale := NoVale;
    TROSerializer(ASerializer).ReadInteger('NoVale', otSLong, l_NoVale);
    NoVale := l_NoVale;
  end;
end;

procedure TDetalleValeCreditoFactura.WriteComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_NoVale: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleValeCreditoFactura);
    l_NoVale := NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', otSLong, l_NoVale);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
  end
  else begin
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_NoVale := NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', otSLong, l_NoVale);
  end;
end;

{ TDetalleValeCreditoFacturaCollection }
constructor TDetalleValeCreditoFacturaCollection.Create;
begin
  inherited Create(TDetalleValeCreditoFactura);
end;

constructor TDetalleValeCreditoFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleValeCreditoFacturaCollection.Add: TDetalleValeCreditoFactura;
begin
  result := TDetalleValeCreditoFactura(inherited Add);
end;

function TDetalleValeCreditoFacturaCollection.GetItems(aIndex: integer): TDetalleValeCreditoFactura;
begin
  result := TDetalleValeCreditoFactura(inherited Items[aIndex]);
end;

procedure TDetalleValeCreditoFacturaCollection.LoadFromArray(anArray: ATDetalleValeCreditoFactura);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleValeCreditoFacturaCollection.SaveToArray(anArray: ATDetalleValeCreditoFactura);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleValeCreditoFactura.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleValeCreditoFacturaCollection.SetItems(aIndex: integer; const Value: TDetalleValeCreditoFactura);
begin
  TDetalleValeCreditoFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFactura }

procedure TDatosFactura.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosFactura) then begin
    lSource := LibraryEmpresas_Intf.TDatosFactura(iSource);
    Factura.Assign(lSource.Factura);
    Detalles.Assign(lSource.Detalles);
    Tickets.Assign(lSource.Tickets);
    DetalleCupon.Assign(lSource.DetalleCupon);
    Vales.Assign(lSource.Vales);
    ValesS := lSource.ValesS;
    Cliente.Assign(lSource.Cliente);
  end;
end;

function TDatosFactura.GetFactura: TFactura;
begin
  if (fFactura = nil) then fFactura := TFactura.Create();
  result := fFactura;
end;

function TDatosFactura.GetDetalles: ATDetalleFactura;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleFactura.Create();
  result := fDetalles;
end;

function TDatosFactura.GetTickets: ATTicketFactura;
begin
  if (fTickets = nil) then fTickets := ATTicketFactura.Create();
  result := fTickets;
end;

function TDatosFactura.GetDetalleCupon: ATDetalleCupon;
begin
  if (fDetalleCupon = nil) then fDetalleCupon := ATDetalleCupon.Create();
  result := fDetalleCupon;
end;

function TDatosFactura.GetVales: ATDetalleValeCreditoFactura;
begin
  if (fVales = nil) then fVales := ATDetalleValeCreditoFactura.Create();
  result := fVales;
end;

function TDatosFactura.GetCliente: TDatosCliente;
begin
  if (fCliente = nil) then fCliente := TDatosCliente.Create();
  result := fCliente;
end;

procedure TDatosFactura.ReadComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_DetalleCupon: ATDetalleCupon;
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
  l_Tickets: ATTicketFactura;
  l_Vales: ATDetalleValeCreditoFactura;
  l_ValesS: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadArray('Tickets', ATTicketFactura, l_Tickets);
    if Tickets <> l_Tickets then Tickets.Free;
    Tickets := l_Tickets;
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    if DetalleCupon <> l_DetalleCupon then DetalleCupon.Free;
    DetalleCupon := l_DetalleCupon;
    l_Vales := Vales;
    TROSerializer(ASerializer).ReadArray('Vales', ATDetalleValeCreditoFactura, l_Vales);
    if Vales <> l_Vales then Vales.Free;
    Vales := l_Vales;
    l_ValesS := ValesS;
    TROSerializer(ASerializer).ReadAnsiString('ValesS', l_ValesS);
    ValesS := l_ValesS;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    if Cliente <> l_Cliente then Cliente.Free;
    Cliente := l_Cliente;
  end
  else begin
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    if Cliente <> l_Cliente then Cliente.Free;
    Cliente := l_Cliente;
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    if DetalleCupon <> l_DetalleCupon then DetalleCupon.Free;
    DetalleCupon := l_DetalleCupon;
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadArray('Tickets', ATTicketFactura, l_Tickets);
    if Tickets <> l_Tickets then Tickets.Free;
    Tickets := l_Tickets;
    l_Vales := Vales;
    TROSerializer(ASerializer).ReadArray('Vales', ATDetalleValeCreditoFactura, l_Vales);
    if Vales <> l_Vales then Vales.Free;
    Vales := l_Vales;
    l_ValesS := ValesS;
    TROSerializer(ASerializer).ReadAnsiString('ValesS', l_ValesS);
    ValesS := l_ValesS;
  end;
end;

procedure TDatosFactura.WriteComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_DetalleCupon: ATDetalleCupon;
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
  l_Tickets: ATTicketFactura;
  l_Vales: ATDetalleValeCreditoFactura;
  l_ValesS: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteArray('Tickets', l_Tickets, ATTicketFactura);
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
    l_Vales := Vales;
    TROSerializer(ASerializer).WriteArray('Vales', l_Vales, ATDetalleValeCreditoFactura);
    l_ValesS := ValesS;
    TROSerializer(ASerializer).WriteAnsiString('ValesS', l_ValesS);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
  end
  else begin
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteArray('Tickets', l_Tickets, ATTicketFactura);
    l_Vales := Vales;
    TROSerializer(ASerializer).WriteArray('Vales', l_Vales, ATDetalleValeCreditoFactura);
    l_ValesS := ValesS;
    TROSerializer(ASerializer).WriteAnsiString('ValesS', l_ValesS);
  end;
end;

{ TDatosFacturaCollection }
constructor TDatosFacturaCollection.Create;
begin
  inherited Create(TDatosFactura);
end;

constructor TDatosFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaCollection.Add: TDatosFactura;
begin
  result := TDatosFactura(inherited Add);
end;

function TDatosFacturaCollection.GetItems(aIndex: integer): TDatosFactura;
begin
  result := TDatosFactura(inherited Items[aIndex]);
end;

procedure TDatosFacturaCollection.SetItems(aIndex: integer; const Value: TDatosFactura);
begin
  TDatosFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacion }

procedure TLiquidacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacion(iSource);
    LiquidacionID := lSource.LiquidacionID;
    Fecha := lSource.Fecha;
    VentasTotales := lSource.VentasTotales;
    Anticipos := lSource.Anticipos;
    Diferencias := lSource.Diferencias;
    Secuencia := lSource.Secuencia;
    EstacionID := lSource.EstacionID;
    DespachadorID := lSource.DespachadorID;
    AgrupacionID := lSource.AgrupacionID;
  end;
end;

procedure TLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Anticipos: Double;
  l_DespachadorID: Integer;
  l_Diferencias: Double;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_LiquidacionID: Integer;
  l_Secuencia: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).ReadDouble('VentasTotales', ftDouble, l_VentasTotales);
    VentasTotales := l_VentasTotales;
    l_Anticipos := Anticipos;
    TROSerializer(ASerializer).ReadDouble('Anticipos', ftDouble, l_Anticipos);
    Anticipos := l_Anticipos;
    l_Diferencias := Diferencias;
    TROSerializer(ASerializer).ReadDouble('Diferencias', ftDouble, l_Diferencias);
    Diferencias := l_Diferencias;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).ReadInteger('DespachadorID', otSLong, l_DespachadorID);
    DespachadorID := l_DespachadorID;
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_Anticipos := Anticipos;
    TROSerializer(ASerializer).ReadDouble('Anticipos', ftDouble, l_Anticipos);
    Anticipos := l_Anticipos;
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).ReadInteger('DespachadorID', otSLong, l_DespachadorID);
    DespachadorID := l_DespachadorID;
    l_Diferencias := Diferencias;
    TROSerializer(ASerializer).ReadDouble('Diferencias', ftDouble, l_Diferencias);
    Diferencias := l_Diferencias;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).ReadDouble('VentasTotales', ftDouble, l_VentasTotales);
    VentasTotales := l_VentasTotales;
  end;
end;

procedure TLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Anticipos: Double;
  l_DespachadorID: Integer;
  l_Diferencias: Double;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_LiquidacionID: Integer;
  l_Secuencia: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacion);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', ftDouble, l_VentasTotales);
    l_Anticipos := Anticipos;
    TROSerializer(ASerializer).WriteDouble('Anticipos', ftDouble, l_Anticipos);
    l_Diferencias := Diferencias;
    TROSerializer(ASerializer).WriteDouble('Diferencias', ftDouble, l_Diferencias);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', otSLong, l_DespachadorID);
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_Anticipos := Anticipos;
    TROSerializer(ASerializer).WriteDouble('Anticipos', ftDouble, l_Anticipos);
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', otSLong, l_DespachadorID);
    l_Diferencias := Diferencias;
    TROSerializer(ASerializer).WriteDouble('Diferencias', ftDouble, l_Diferencias);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', ftDouble, l_VentasTotales);
  end;
end;

{ TLiquidacionCollection }
constructor TLiquidacionCollection.Create;
begin
  inherited Create(TLiquidacion);
end;

constructor TLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionCollection.Add: TLiquidacion;
begin
  result := TLiquidacion(inherited Add);
end;

function TLiquidacionCollection.GetItems(aIndex: integer): TLiquidacion;
begin
  result := TLiquidacion(inherited Items[aIndex]);
end;

procedure TLiquidacionCollection.SetItems(aIndex: integer; const Value: TLiquidacion);
begin
  TLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacionDetalle }

procedure TLiquidacionDetalle.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TLiquidacionDetalle;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacionDetalle) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacionDetalle(iSource);
    LiquidacionDetalleID := lSource.LiquidacionDetalleID;
    Importe := lSource.Importe;
    Secuencia := lSource.Secuencia;
    Referencia := lSource.Referencia;
    Ticket := lSource.Ticket;
    Cupon := lSource.Cupon;
    LiquidacionID := lSource.LiquidacionID;
    TipoValorID := lSource.TipoValorID;
    BancoID := lSource.BancoID;
    SalidaID := lSource.SalidaID;
    ClienteID := lSource.ClienteID;
  end;
end;

procedure TLiquidacionDetalle.ReadComplex(ASerializer: TObject);
var
  l_BancoID: Integer;
  l_ClienteID: Integer;
  l_Cupon: AnsiString;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_LiquidacionID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Secuencia: Integer;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_Cupon := Cupon;
    TROSerializer(ASerializer).ReadAnsiString('Cupon', l_Cupon);
    Cupon := l_Cupon;
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
    l_BancoID := BancoID;
    TROSerializer(ASerializer).ReadInteger('BancoID', otSLong, l_BancoID);
    BancoID := l_BancoID;
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).ReadInteger('SalidaID', otSLong, l_SalidaID);
    SalidaID := l_SalidaID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
  end
  else begin
    l_BancoID := BancoID;
    TROSerializer(ASerializer).ReadInteger('BancoID', otSLong, l_BancoID);
    BancoID := l_BancoID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Cupon := Cupon;
    TROSerializer(ASerializer).ReadAnsiString('Cupon', l_Cupon);
    Cupon := l_Cupon;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).ReadInteger('SalidaID', otSLong, l_SalidaID);
    SalidaID := l_SalidaID;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
  end;
end;

procedure TLiquidacionDetalle.WriteComplex(ASerializer: TObject);
var
  l_BancoID: Integer;
  l_ClienteID: Integer;
  l_Cupon: AnsiString;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_LiquidacionID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Secuencia: Integer;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacionDetalle);
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_Cupon := Cupon;
    TROSerializer(ASerializer).WriteAnsiString('Cupon', l_Cupon);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
    l_BancoID := BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', otSLong, l_BancoID);
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', otSLong, l_SalidaID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
  end
  else begin
    l_BancoID := BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', otSLong, l_BancoID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Cupon := Cupon;
    TROSerializer(ASerializer).WriteAnsiString('Cupon', l_Cupon);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', otSLong, l_SalidaID);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
  end;
end;

{ TLiquidacionDetalleCollection }
constructor TLiquidacionDetalleCollection.Create;
begin
  inherited Create(TLiquidacionDetalle);
end;

constructor TLiquidacionDetalleCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionDetalleCollection.Add: TLiquidacionDetalle;
begin
  result := TLiquidacionDetalle(inherited Add);
end;

function TLiquidacionDetalleCollection.GetItems(aIndex: integer): TLiquidacionDetalle;
begin
  result := TLiquidacionDetalle(inherited Items[aIndex]);
end;

procedure TLiquidacionDetalleCollection.LoadFromArray(anArray: ATLiquidacionDetalle);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TLiquidacionDetalleCollection.SaveToArray(anArray: ATLiquidacionDetalle);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TLiquidacionDetalle.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TLiquidacionDetalleCollection.SetItems(aIndex: integer; const Value: TLiquidacionDetalle);
begin
  TLiquidacionDetalle(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacionProducto }

procedure TLiquidacionProducto.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TLiquidacionProducto;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacionProducto) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacionProducto(iSource);
    PrecioVenta := lSource.PrecioVenta;
    InventarioInicial := lSource.InventarioInicial;
    InventarioFinal := lSource.InventarioFinal;
    Cantidad := lSource.Cantidad;
    Importe := lSource.Importe;
    Secuencia := lSource.Secuencia;
    Traspasos := lSource.Traspasos;
    ProductoID := lSource.ProductoID;
    BombaID := lSource.BombaID;
    Costo := lSource.Costo;
  end;
end;

procedure TLiquidacionProducto.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Costo: Double;
  l_Importe: Double;
  l_InventarioFinal: Double;
  l_InventarioInicial: Double;
  l_PrecioVenta: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Traspasos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_PrecioVenta := PrecioVenta;
    TROSerializer(ASerializer).ReadDouble('PrecioVenta', ftDouble, l_PrecioVenta);
    PrecioVenta := l_PrecioVenta;
    l_InventarioInicial := InventarioInicial;
    TROSerializer(ASerializer).ReadDouble('InventarioInicial', ftDouble, l_InventarioInicial);
    InventarioInicial := l_InventarioInicial;
    l_InventarioFinal := InventarioFinal;
    TROSerializer(ASerializer).ReadDouble('InventarioFinal', ftDouble, l_InventarioFinal);
    InventarioFinal := l_InventarioFinal;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Traspasos := Traspasos;
    TROSerializer(ASerializer).ReadDouble('Traspasos', ftDouble, l_Traspasos);
    Traspasos := l_Traspasos;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Costo := Costo;
    TROSerializer(ASerializer).ReadDouble('Costo', ftDouble, l_Costo);
    Costo := l_Costo;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Costo := Costo;
    TROSerializer(ASerializer).ReadDouble('Costo', ftDouble, l_Costo);
    Costo := l_Costo;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_InventarioFinal := InventarioFinal;
    TROSerializer(ASerializer).ReadDouble('InventarioFinal', ftDouble, l_InventarioFinal);
    InventarioFinal := l_InventarioFinal;
    l_InventarioInicial := InventarioInicial;
    TROSerializer(ASerializer).ReadDouble('InventarioInicial', ftDouble, l_InventarioInicial);
    InventarioInicial := l_InventarioInicial;
    l_PrecioVenta := PrecioVenta;
    TROSerializer(ASerializer).ReadDouble('PrecioVenta', ftDouble, l_PrecioVenta);
    PrecioVenta := l_PrecioVenta;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Traspasos := Traspasos;
    TROSerializer(ASerializer).ReadDouble('Traspasos', ftDouble, l_Traspasos);
    Traspasos := l_Traspasos;
  end;
end;

procedure TLiquidacionProducto.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Costo: Double;
  l_Importe: Double;
  l_InventarioFinal: Double;
  l_InventarioInicial: Double;
  l_PrecioVenta: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Traspasos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacionProducto);
    l_PrecioVenta := PrecioVenta;
    TROSerializer(ASerializer).WriteDouble('PrecioVenta', ftDouble, l_PrecioVenta);
    l_InventarioInicial := InventarioInicial;
    TROSerializer(ASerializer).WriteDouble('InventarioInicial', ftDouble, l_InventarioInicial);
    l_InventarioFinal := InventarioFinal;
    TROSerializer(ASerializer).WriteDouble('InventarioFinal', ftDouble, l_InventarioFinal);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Traspasos := Traspasos;
    TROSerializer(ASerializer).WriteDouble('Traspasos', ftDouble, l_Traspasos);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Costo := Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', ftDouble, l_Costo);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Costo := Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', ftDouble, l_Costo);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_InventarioFinal := InventarioFinal;
    TROSerializer(ASerializer).WriteDouble('InventarioFinal', ftDouble, l_InventarioFinal);
    l_InventarioInicial := InventarioInicial;
    TROSerializer(ASerializer).WriteDouble('InventarioInicial', ftDouble, l_InventarioInicial);
    l_PrecioVenta := PrecioVenta;
    TROSerializer(ASerializer).WriteDouble('PrecioVenta', ftDouble, l_PrecioVenta);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Traspasos := Traspasos;
    TROSerializer(ASerializer).WriteDouble('Traspasos', ftDouble, l_Traspasos);
  end;
end;

{ TLiquidacionProductoCollection }
constructor TLiquidacionProductoCollection.Create;
begin
  inherited Create(TLiquidacionProducto);
end;

constructor TLiquidacionProductoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionProductoCollection.Add: TLiquidacionProducto;
begin
  result := TLiquidacionProducto(inherited Add);
end;

function TLiquidacionProductoCollection.GetItems(aIndex: integer): TLiquidacionProducto;
begin
  result := TLiquidacionProducto(inherited Items[aIndex]);
end;

procedure TLiquidacionProductoCollection.LoadFromArray(anArray: ATLiquidacionProducto);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TLiquidacionProductoCollection.SaveToArray(anArray: ATLiquidacionProducto);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TLiquidacionProducto.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TLiquidacionProductoCollection.SetItems(aIndex: integer; const Value: TLiquidacionProducto);
begin
  TLiquidacionProducto(inherited Items[aIndex]).Assign(Value);
end;

{ TTransaccion }

procedure TTransaccion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TTransaccion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTransaccion) then begin
    lSource := LibraryEmpresas_Intf.TTransaccion(iSource);
    TransaccionID := lSource.TransaccionID;
    Folio := lSource.Folio;
    Tipo := lSource.Tipo;
    Credito := lSource.Credito;
    Referencia := lSource.Referencia;
    Fecha := lSource.Fecha;
    Total := lSource.Total;
    Subtotal := lSource.Subtotal;
    Impuesto := lSource.Impuesto;
    Plazo := lSource.Plazo;
    Secuencia := lSource.Secuencia;
    EstacionDestinoID := lSource.EstacionDestinoID;
    AlmacenDestinoID := lSource.AlmacenDestinoID;
    EstacionID := lSource.EstacionID;
    ProveedorId := lSource.ProveedorId;
    AlmacenID := lSource.AlmacenID;
    MovimientoAlmacen := lSource.MovimientoAlmacen;
  end;
end;

procedure TTransaccion.ReadComplex(ASerializer: TObject);
var
  l_AlmacenDestinoID: Integer;
  l_AlmacenID: Integer;
  l_Credito: Boolean;
  l_EstacionDestinoID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_MovimientoAlmacen: Integer;
  l_Plazo: Integer;
  l_ProveedorId: Integer;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Subtotal: Double;
  l_Tipo: AnsiString;
  l_Total: Double;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).ReadInteger('TransaccionID', otSLong, l_TransaccionID);
    TransaccionID := l_TransaccionID;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    Tipo := l_Tipo;
    l_Credito := Credito;
    TROSerializer(ASerializer).ReadEnumerated('Credito',TypeInfo(boolean), l_Credito);
    Credito := l_Credito;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Plazo := Plazo;
    TROSerializer(ASerializer).ReadInteger('Plazo', otSLong, l_Plazo);
    Plazo := l_Plazo;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_EstacionDestinoID := EstacionDestinoID;
    TROSerializer(ASerializer).ReadInteger('EstacionDestinoID', otSLong, l_EstacionDestinoID);
    EstacionDestinoID := l_EstacionDestinoID;
    l_AlmacenDestinoID := AlmacenDestinoID;
    TROSerializer(ASerializer).ReadInteger('AlmacenDestinoID', otSLong, l_AlmacenDestinoID);
    AlmacenDestinoID := l_AlmacenDestinoID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_ProveedorId := ProveedorId;
    TROSerializer(ASerializer).ReadInteger('ProveedorId', otSLong, l_ProveedorId);
    ProveedorId := l_ProveedorId;
    l_AlmacenID := AlmacenID;
    TROSerializer(ASerializer).ReadInteger('AlmacenID', otSLong, l_AlmacenID);
    AlmacenID := l_AlmacenID;
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    MovimientoAlmacen := l_MovimientoAlmacen;
  end
  else begin
    l_AlmacenDestinoID := AlmacenDestinoID;
    TROSerializer(ASerializer).ReadInteger('AlmacenDestinoID', otSLong, l_AlmacenDestinoID);
    AlmacenDestinoID := l_AlmacenDestinoID;
    l_AlmacenID := AlmacenID;
    TROSerializer(ASerializer).ReadInteger('AlmacenID', otSLong, l_AlmacenID);
    AlmacenID := l_AlmacenID;
    l_Credito := Credito;
    TROSerializer(ASerializer).ReadEnumerated('Credito',TypeInfo(boolean), l_Credito);
    Credito := l_Credito;
    l_EstacionDestinoID := EstacionDestinoID;
    TROSerializer(ASerializer).ReadInteger('EstacionDestinoID', otSLong, l_EstacionDestinoID);
    EstacionDestinoID := l_EstacionDestinoID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    MovimientoAlmacen := l_MovimientoAlmacen;
    l_Plazo := Plazo;
    TROSerializer(ASerializer).ReadInteger('Plazo', otSLong, l_Plazo);
    Plazo := l_Plazo;
    l_ProveedorId := ProveedorId;
    TROSerializer(ASerializer).ReadInteger('ProveedorId', otSLong, l_ProveedorId);
    ProveedorId := l_ProveedorId;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    Tipo := l_Tipo;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).ReadInteger('TransaccionID', otSLong, l_TransaccionID);
    TransaccionID := l_TransaccionID;
  end;
end;

procedure TTransaccion.WriteComplex(ASerializer: TObject);
var
  l_AlmacenDestinoID: Integer;
  l_AlmacenID: Integer;
  l_Credito: Boolean;
  l_EstacionDestinoID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_MovimientoAlmacen: Integer;
  l_Plazo: Integer;
  l_ProveedorId: Integer;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Subtotal: Double;
  l_Tipo: AnsiString;
  l_Total: Double;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTransaccion);
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', otSLong, l_TransaccionID);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Credito := Credito;
    TROSerializer(ASerializer).WriteEnumerated('Credito',TypeInfo(boolean), l_Credito);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Plazo := Plazo;
    TROSerializer(ASerializer).WriteInteger('Plazo', otSLong, l_Plazo);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_EstacionDestinoID := EstacionDestinoID;
    TROSerializer(ASerializer).WriteInteger('EstacionDestinoID', otSLong, l_EstacionDestinoID);
    l_AlmacenDestinoID := AlmacenDestinoID;
    TROSerializer(ASerializer).WriteInteger('AlmacenDestinoID', otSLong, l_AlmacenDestinoID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_ProveedorId := ProveedorId;
    TROSerializer(ASerializer).WriteInteger('ProveedorId', otSLong, l_ProveedorId);
    l_AlmacenID := AlmacenID;
    TROSerializer(ASerializer).WriteInteger('AlmacenID', otSLong, l_AlmacenID);
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
  end
  else begin
    l_AlmacenDestinoID := AlmacenDestinoID;
    TROSerializer(ASerializer).WriteInteger('AlmacenDestinoID', otSLong, l_AlmacenDestinoID);
    l_AlmacenID := AlmacenID;
    TROSerializer(ASerializer).WriteInteger('AlmacenID', otSLong, l_AlmacenID);
    l_Credito := Credito;
    TROSerializer(ASerializer).WriteEnumerated('Credito',TypeInfo(boolean), l_Credito);
    l_EstacionDestinoID := EstacionDestinoID;
    TROSerializer(ASerializer).WriteInteger('EstacionDestinoID', otSLong, l_EstacionDestinoID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    l_Plazo := Plazo;
    TROSerializer(ASerializer).WriteInteger('Plazo', otSLong, l_Plazo);
    l_ProveedorId := ProveedorId;
    TROSerializer(ASerializer).WriteInteger('ProveedorId', otSLong, l_ProveedorId);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', otSLong, l_TransaccionID);
  end;
end;

{ TTransaccionCollection }
constructor TTransaccionCollection.Create;
begin
  inherited Create(TTransaccion);
end;

constructor TTransaccionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTransaccionCollection.Add: TTransaccion;
begin
  result := TTransaccion(inherited Add);
end;

function TTransaccionCollection.GetItems(aIndex: integer): TTransaccion;
begin
  result := TTransaccion(inherited Items[aIndex]);
end;

procedure TTransaccionCollection.SetItems(aIndex: integer; const Value: TTransaccion);
begin
  TTransaccion(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleTransaccion }

procedure TDetalleTransaccion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleTransaccion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleTransaccion) then begin
    lSource := LibraryEmpresas_Intf.TDetalleTransaccion(iSource);
    DetalleTransaccionID := lSource.DetalleTransaccionID;
    Cantidad := lSource.Cantidad;
    Costo := lSource.Costo;
    TransaccionID := lSource.TransaccionID;
    ProductoID := lSource.ProductoID;
    Tipo := lSource.Tipo;
    Operador := lSource.Operador;
    MovimientoAlmacen := lSource.MovimientoAlmacen;
  end;
end;

procedure TDetalleTransaccion.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Costo: Double;
  l_DetalleTransaccionID: Integer;
  l_MovimientoAlmacen: Integer;
  l_Operador: Integer;
  l_ProductoID: Integer;
  l_Tipo: AnsiString;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DetalleTransaccionID := DetalleTransaccionID;
    TROSerializer(ASerializer).ReadInteger('DetalleTransaccionID', otSLong, l_DetalleTransaccionID);
    DetalleTransaccionID := l_DetalleTransaccionID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Costo := Costo;
    TROSerializer(ASerializer).ReadDouble('Costo', ftDouble, l_Costo);
    Costo := l_Costo;
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).ReadInteger('TransaccionID', otSLong, l_TransaccionID);
    TransaccionID := l_TransaccionID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    Tipo := l_Tipo;
    l_Operador := Operador;
    TROSerializer(ASerializer).ReadInteger('Operador', otSLong, l_Operador);
    Operador := l_Operador;
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    MovimientoAlmacen := l_MovimientoAlmacen;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Costo := Costo;
    TROSerializer(ASerializer).ReadDouble('Costo', ftDouble, l_Costo);
    Costo := l_Costo;
    l_DetalleTransaccionID := DetalleTransaccionID;
    TROSerializer(ASerializer).ReadInteger('DetalleTransaccionID', otSLong, l_DetalleTransaccionID);
    DetalleTransaccionID := l_DetalleTransaccionID;
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    MovimientoAlmacen := l_MovimientoAlmacen;
    l_Operador := Operador;
    TROSerializer(ASerializer).ReadInteger('Operador', otSLong, l_Operador);
    Operador := l_Operador;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    Tipo := l_Tipo;
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).ReadInteger('TransaccionID', otSLong, l_TransaccionID);
    TransaccionID := l_TransaccionID;
  end;
end;

procedure TDetalleTransaccion.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Costo: Double;
  l_DetalleTransaccionID: Integer;
  l_MovimientoAlmacen: Integer;
  l_Operador: Integer;
  l_ProductoID: Integer;
  l_Tipo: AnsiString;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleTransaccion);
    l_DetalleTransaccionID := DetalleTransaccionID;
    TROSerializer(ASerializer).WriteInteger('DetalleTransaccionID', otSLong, l_DetalleTransaccionID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Costo := Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', ftDouble, l_Costo);
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', otSLong, l_TransaccionID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Operador := Operador;
    TROSerializer(ASerializer).WriteInteger('Operador', otSLong, l_Operador);
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Costo := Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', ftDouble, l_Costo);
    l_DetalleTransaccionID := DetalleTransaccionID;
    TROSerializer(ASerializer).WriteInteger('DetalleTransaccionID', otSLong, l_DetalleTransaccionID);
    l_MovimientoAlmacen := MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', otSLong, l_MovimientoAlmacen);
    l_Operador := Operador;
    TROSerializer(ASerializer).WriteInteger('Operador', otSLong, l_Operador);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_TransaccionID := TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', otSLong, l_TransaccionID);
  end;
end;

{ TDetalleTransaccionCollection }
constructor TDetalleTransaccionCollection.Create;
begin
  inherited Create(TDetalleTransaccion);
end;

constructor TDetalleTransaccionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleTransaccionCollection.Add: TDetalleTransaccion;
begin
  result := TDetalleTransaccion(inherited Add);
end;

function TDetalleTransaccionCollection.GetItems(aIndex: integer): TDetalleTransaccion;
begin
  result := TDetalleTransaccion(inherited Items[aIndex]);
end;

procedure TDetalleTransaccionCollection.LoadFromArray(anArray: ATDetalleTransaccion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleTransaccionCollection.SaveToArray(anArray: ATDetalleTransaccion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleTransaccion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleTransaccionCollection.SetItems(aIndex: integer; const Value: TDetalleTransaccion);
begin
  TDetalleTransaccion(inherited Items[aIndex]).Assign(Value);
end;

{ TCarteraVale }

procedure TCarteraVale.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TCarteraVale;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TCarteraVale) then begin
    lSource := LibraryEmpresas_Intf.TCarteraVale(iSource);
    CarteraValeCreditoID := lSource.CarteraValeCreditoID;
    NoVale := lSource.NoVale;
    Ticket := lSource.Ticket;
    Importe := lSource.Importe;
    Fecha := lSource.Fecha;
    Status := lSource.Status;
    FacturaID := lSource.FacturaID;
    EstacionID := lSource.EstacionID;
    ClienteID := lSource.ClienteID;
    LiquidacionDetalleID := lSource.LiquidacionDetalleID;
  end;
end;

procedure TCarteraVale.ReadComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_NoVale: Integer;
  l_Status: AnsiString;
  l_Ticket: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_NoVale := NoVale;
    TROSerializer(ASerializer).ReadInteger('NoVale', otSLong, l_NoVale);
    NoVale := l_NoVale;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    LiquidacionDetalleID := l_LiquidacionDetalleID;
  end
  else begin
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_NoVale := NoVale;
    TROSerializer(ASerializer).ReadInteger('NoVale', otSLong, l_NoVale);
    NoVale := l_NoVale;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
  end;
end;

procedure TCarteraVale.WriteComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_NoVale: Integer;
  l_Status: AnsiString;
  l_Ticket: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCarteraVale);
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    l_NoVale := NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', otSLong, l_NoVale);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
  end
  else begin
    l_CarteraValeCreditoID := CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', otSLong, l_CarteraValeCreditoID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_LiquidacionDetalleID := LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', otSLong, l_LiquidacionDetalleID);
    l_NoVale := NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', otSLong, l_NoVale);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
  end;
end;

{ TCarteraValeCollection }
constructor TCarteraValeCollection.Create;
begin
  inherited Create(TCarteraVale);
end;

constructor TCarteraValeCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCarteraValeCollection.Add: TCarteraVale;
begin
  result := TCarteraVale(inherited Add);
end;

function TCarteraValeCollection.GetItems(aIndex: integer): TCarteraVale;
begin
  result := TCarteraVale(inherited Items[aIndex]);
end;

procedure TCarteraValeCollection.LoadFromArray(anArray: ATCarteraVale);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TCarteraValeCollection.SaveToArray(anArray: ATCarteraVale);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TCarteraVale.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TCarteraValeCollection.SetItems(aIndex: integer; const Value: TCarteraVale);
begin
  TCarteraVale(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosLiquidacion }

procedure TDatosLiquidacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDatosLiquidacion(iSource);
    Liquidacion.Assign(lSource.Liquidacion);
    LiquidacionDetalle.Assign(lSource.LiquidacionDetalle);
    LiquidacionProducto.Assign(lSource.LiquidacionProducto);
    LiquidacionCombustible.Assign(lSource.LiquidacionCombustible);
    Traspaso.Assign(lSource.Traspaso);
    Venta.Assign(lSource.Venta);
    DetalleTraspaso.Assign(lSource.DetalleTraspaso);
    DetalleVenta.Assign(lSource.DetalleVenta);
    CarteraVales.Assign(lSource.CarteraVales);
  end;
end;

function TDatosLiquidacion.GetLiquidacion: TLiquidacion;
begin
  if (fLiquidacion = nil) then fLiquidacion := TLiquidacion.Create();
  result := fLiquidacion;
end;

function TDatosLiquidacion.GetLiquidacionDetalle: ATLiquidacionDetalle;
begin
  if (fLiquidacionDetalle = nil) then fLiquidacionDetalle := ATLiquidacionDetalle.Create();
  result := fLiquidacionDetalle;
end;

function TDatosLiquidacion.GetLiquidacionProducto: ATLiquidacionProducto;
begin
  if (fLiquidacionProducto = nil) then fLiquidacionProducto := ATLiquidacionProducto.Create();
  result := fLiquidacionProducto;
end;

function TDatosLiquidacion.GetLiquidacionCombustible: ATLiquidacionProducto;
begin
  if (fLiquidacionCombustible = nil) then fLiquidacionCombustible := ATLiquidacionProducto.Create();
  result := fLiquidacionCombustible;
end;

function TDatosLiquidacion.GetTraspaso: TTransaccion;
begin
  if (fTraspaso = nil) then fTraspaso := TTransaccion.Create();
  result := fTraspaso;
end;

function TDatosLiquidacion.GetVenta: TTransaccion;
begin
  if (fVenta = nil) then fVenta := TTransaccion.Create();
  result := fVenta;
end;

function TDatosLiquidacion.GetDetalleTraspaso: ATDetalleTransaccion;
begin
  if (fDetalleTraspaso = nil) then fDetalleTraspaso := ATDetalleTransaccion.Create();
  result := fDetalleTraspaso;
end;

function TDatosLiquidacion.GetDetalleVenta: ATDetalleTransaccion;
begin
  if (fDetalleVenta = nil) then fDetalleVenta := ATDetalleTransaccion.Create();
  result := fDetalleVenta;
end;

function TDatosLiquidacion.GetCarteraVales: ATCarteraVale;
begin
  if (fCarteraVales = nil) then fCarteraVales := ATCarteraVale.Create();
  result := fCarteraVales;
end;

procedure TDatosLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_CarteraVales: ATCarteraVale;
  l_DetalleTraspaso: ATDetalleTransaccion;
  l_DetalleVenta: ATDetalleTransaccion;
  l_Liquidacion: TLiquidacion;
  l_LiquidacionCombustible: ATLiquidacionProducto;
  l_LiquidacionDetalle: ATLiquidacionDetalle;
  l_LiquidacionProducto: ATLiquidacionProducto;
  l_Traspaso: TTransaccion;
  l_Venta: TTransaccion;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Liquidacion := Liquidacion;
    TROSerializer(ASerializer).ReadStruct('Liquidacion', TLiquidacion, l_Liquidacion);
    if Liquidacion <> l_Liquidacion then Liquidacion.Free;
    Liquidacion := l_Liquidacion;
    l_LiquidacionDetalle := LiquidacionDetalle;
    TROSerializer(ASerializer).ReadArray('LiquidacionDetalle', ATLiquidacionDetalle, l_LiquidacionDetalle);
    if LiquidacionDetalle <> l_LiquidacionDetalle then LiquidacionDetalle.Free;
    LiquidacionDetalle := l_LiquidacionDetalle;
    l_LiquidacionProducto := LiquidacionProducto;
    TROSerializer(ASerializer).ReadArray('LiquidacionProducto', ATLiquidacionProducto, l_LiquidacionProducto);
    if LiquidacionProducto <> l_LiquidacionProducto then LiquidacionProducto.Free;
    LiquidacionProducto := l_LiquidacionProducto;
    l_LiquidacionCombustible := LiquidacionCombustible;
    TROSerializer(ASerializer).ReadArray('LiquidacionCombustible', ATLiquidacionProducto, l_LiquidacionCombustible);
    if LiquidacionCombustible <> l_LiquidacionCombustible then LiquidacionCombustible.Free;
    LiquidacionCombustible := l_LiquidacionCombustible;
    l_Traspaso := Traspaso;
    TROSerializer(ASerializer).ReadStruct('Traspaso', TTransaccion, l_Traspaso);
    if Traspaso <> l_Traspaso then Traspaso.Free;
    Traspaso := l_Traspaso;
    l_Venta := Venta;
    TROSerializer(ASerializer).ReadStruct('Venta', TTransaccion, l_Venta);
    if Venta <> l_Venta then Venta.Free;
    Venta := l_Venta;
    l_DetalleTraspaso := DetalleTraspaso;
    TROSerializer(ASerializer).ReadArray('DetalleTraspaso', ATDetalleTransaccion, l_DetalleTraspaso);
    if DetalleTraspaso <> l_DetalleTraspaso then DetalleTraspaso.Free;
    DetalleTraspaso := l_DetalleTraspaso;
    l_DetalleVenta := DetalleVenta;
    TROSerializer(ASerializer).ReadArray('DetalleVenta', ATDetalleTransaccion, l_DetalleVenta);
    if DetalleVenta <> l_DetalleVenta then DetalleVenta.Free;
    DetalleVenta := l_DetalleVenta;
    l_CarteraVales := CarteraVales;
    TROSerializer(ASerializer).ReadArray('CarteraVales', ATCarteraVale, l_CarteraVales);
    if CarteraVales <> l_CarteraVales then CarteraVales.Free;
    CarteraVales := l_CarteraVales;
  end
  else begin
    l_CarteraVales := CarteraVales;
    TROSerializer(ASerializer).ReadArray('CarteraVales', ATCarteraVale, l_CarteraVales);
    if CarteraVales <> l_CarteraVales then CarteraVales.Free;
    CarteraVales := l_CarteraVales;
    l_DetalleTraspaso := DetalleTraspaso;
    TROSerializer(ASerializer).ReadArray('DetalleTraspaso', ATDetalleTransaccion, l_DetalleTraspaso);
    if DetalleTraspaso <> l_DetalleTraspaso then DetalleTraspaso.Free;
    DetalleTraspaso := l_DetalleTraspaso;
    l_DetalleVenta := DetalleVenta;
    TROSerializer(ASerializer).ReadArray('DetalleVenta', ATDetalleTransaccion, l_DetalleVenta);
    if DetalleVenta <> l_DetalleVenta then DetalleVenta.Free;
    DetalleVenta := l_DetalleVenta;
    l_Liquidacion := Liquidacion;
    TROSerializer(ASerializer).ReadStruct('Liquidacion', TLiquidacion, l_Liquidacion);
    if Liquidacion <> l_Liquidacion then Liquidacion.Free;
    Liquidacion := l_Liquidacion;
    l_LiquidacionCombustible := LiquidacionCombustible;
    TROSerializer(ASerializer).ReadArray('LiquidacionCombustible', ATLiquidacionProducto, l_LiquidacionCombustible);
    if LiquidacionCombustible <> l_LiquidacionCombustible then LiquidacionCombustible.Free;
    LiquidacionCombustible := l_LiquidacionCombustible;
    l_LiquidacionDetalle := LiquidacionDetalle;
    TROSerializer(ASerializer).ReadArray('LiquidacionDetalle', ATLiquidacionDetalle, l_LiquidacionDetalle);
    if LiquidacionDetalle <> l_LiquidacionDetalle then LiquidacionDetalle.Free;
    LiquidacionDetalle := l_LiquidacionDetalle;
    l_LiquidacionProducto := LiquidacionProducto;
    TROSerializer(ASerializer).ReadArray('LiquidacionProducto', ATLiquidacionProducto, l_LiquidacionProducto);
    if LiquidacionProducto <> l_LiquidacionProducto then LiquidacionProducto.Free;
    LiquidacionProducto := l_LiquidacionProducto;
    l_Traspaso := Traspaso;
    TROSerializer(ASerializer).ReadStruct('Traspaso', TTransaccion, l_Traspaso);
    if Traspaso <> l_Traspaso then Traspaso.Free;
    Traspaso := l_Traspaso;
    l_Venta := Venta;
    TROSerializer(ASerializer).ReadStruct('Venta', TTransaccion, l_Venta);
    if Venta <> l_Venta then Venta.Free;
    Venta := l_Venta;
  end;
end;

procedure TDatosLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_CarteraVales: ATCarteraVale;
  l_DetalleTraspaso: ATDetalleTransaccion;
  l_DetalleVenta: ATDetalleTransaccion;
  l_Liquidacion: TLiquidacion;
  l_LiquidacionCombustible: ATLiquidacionProducto;
  l_LiquidacionDetalle: ATLiquidacionDetalle;
  l_LiquidacionProducto: ATLiquidacionProducto;
  l_Traspaso: TTransaccion;
  l_Venta: TTransaccion;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosLiquidacion);
    l_Liquidacion := Liquidacion;
    TROSerializer(ASerializer).WriteStruct('Liquidacion', l_Liquidacion, TLiquidacion);
    l_LiquidacionDetalle := LiquidacionDetalle;
    TROSerializer(ASerializer).WriteArray('LiquidacionDetalle', l_LiquidacionDetalle, ATLiquidacionDetalle);
    l_LiquidacionProducto := LiquidacionProducto;
    TROSerializer(ASerializer).WriteArray('LiquidacionProducto', l_LiquidacionProducto, ATLiquidacionProducto);
    l_LiquidacionCombustible := LiquidacionCombustible;
    TROSerializer(ASerializer).WriteArray('LiquidacionCombustible', l_LiquidacionCombustible, ATLiquidacionProducto);
    l_Traspaso := Traspaso;
    TROSerializer(ASerializer).WriteStruct('Traspaso', l_Traspaso, TTransaccion);
    l_Venta := Venta;
    TROSerializer(ASerializer).WriteStruct('Venta', l_Venta, TTransaccion);
    l_DetalleTraspaso := DetalleTraspaso;
    TROSerializer(ASerializer).WriteArray('DetalleTraspaso', l_DetalleTraspaso, ATDetalleTransaccion);
    l_DetalleVenta := DetalleVenta;
    TROSerializer(ASerializer).WriteArray('DetalleVenta', l_DetalleVenta, ATDetalleTransaccion);
    l_CarteraVales := CarteraVales;
    TROSerializer(ASerializer).WriteArray('CarteraVales', l_CarteraVales, ATCarteraVale);
  end
  else begin
    l_CarteraVales := CarteraVales;
    TROSerializer(ASerializer).WriteArray('CarteraVales', l_CarteraVales, ATCarteraVale);
    l_DetalleTraspaso := DetalleTraspaso;
    TROSerializer(ASerializer).WriteArray('DetalleTraspaso', l_DetalleTraspaso, ATDetalleTransaccion);
    l_DetalleVenta := DetalleVenta;
    TROSerializer(ASerializer).WriteArray('DetalleVenta', l_DetalleVenta, ATDetalleTransaccion);
    l_Liquidacion := Liquidacion;
    TROSerializer(ASerializer).WriteStruct('Liquidacion', l_Liquidacion, TLiquidacion);
    l_LiquidacionCombustible := LiquidacionCombustible;
    TROSerializer(ASerializer).WriteArray('LiquidacionCombustible', l_LiquidacionCombustible, ATLiquidacionProducto);
    l_LiquidacionDetalle := LiquidacionDetalle;
    TROSerializer(ASerializer).WriteArray('LiquidacionDetalle', l_LiquidacionDetalle, ATLiquidacionDetalle);
    l_LiquidacionProducto := LiquidacionProducto;
    TROSerializer(ASerializer).WriteArray('LiquidacionProducto', l_LiquidacionProducto, ATLiquidacionProducto);
    l_Traspaso := Traspaso;
    TROSerializer(ASerializer).WriteStruct('Traspaso', l_Traspaso, TTransaccion);
    l_Venta := Venta;
    TROSerializer(ASerializer).WriteStruct('Venta', l_Venta, TTransaccion);
  end;
end;

{ TDatosLiquidacionCollection }
constructor TDatosLiquidacionCollection.Create;
begin
  inherited Create(TDatosLiquidacion);
end;

constructor TDatosLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosLiquidacionCollection.Add: TDatosLiquidacion;
begin
  result := TDatosLiquidacion(inherited Add);
end;

function TDatosLiquidacionCollection.GetItems(aIndex: integer): TDatosLiquidacion;
begin
  result := TDatosLiquidacion(inherited Items[aIndex]);
end;

procedure TDatosLiquidacionCollection.SetItems(aIndex: integer; const Value: TDatosLiquidacion);
begin
  TDatosLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TReporte }

procedure TReporte.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TReporte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TReporte) then begin
    lSource := LibraryEmpresas_Intf.TReporte(iSource);
    SQL1 := lSource.SQL1;
    SQL2 := lSource.SQL2;
    Template := lSource.Template;
    CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporte.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
  end;
end;

procedure TReporte.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporte);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteCollection }
constructor TReporteCollection.Create;
begin
  inherited Create(TReporte);
end;

constructor TReporteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteCollection.Add: TReporte;
begin
  result := TReporte(inherited Add);
end;

function TReporteCollection.GetItems(aIndex: integer): TReporte;
begin
  result := TReporte(inherited Items[aIndex]);
end;

procedure TReporteCollection.SetItems(aIndex: integer; const Value: TReporte);
begin
  TReporte(inherited Items[aIndex]).Assign(Value);
end;

{ TRecibo }

procedure TRecibo.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TRecibo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TRecibo) then begin
    lSource := LibraryEmpresas_Intf.TRecibo(iSource);
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Fecha := lSource.Fecha;
    Subtotal := lSource.Subtotal;
    Ejercicio := lSource.Ejercicio;
    Periodo := lSource.Periodo;
    Dia := lSource.Dia;
    Impuesto := lSource.Impuesto;
    Total := lSource.Total;
    ClienteID := lSource.ClienteID;
    EstacionID := lSource.EstacionID;
    FormaPagoID := lSource.FormaPagoID;
    ReciboPagoID := lSource.ReciboPagoID;
  end;
end;

procedure TRecibo.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_Periodo: Integer;
  l_ReciboPagoID: Integer;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
    l_ReciboPagoID := ReciboPagoID;
    TROSerializer(ASerializer).ReadInteger('ReciboPagoID', otSLong, l_ReciboPagoID);
    ReciboPagoID := l_ReciboPagoID;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_ReciboPagoID := ReciboPagoID;
    TROSerializer(ASerializer).ReadInteger('ReciboPagoID', otSLong, l_ReciboPagoID);
    ReciboPagoID := l_ReciboPagoID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
  end;
end;

procedure TRecibo.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_Periodo: Integer;
  l_ReciboPagoID: Integer;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TRecibo);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
    l_ReciboPagoID := ReciboPagoID;
    TROSerializer(ASerializer).WriteInteger('ReciboPagoID', otSLong, l_ReciboPagoID);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_ReciboPagoID := ReciboPagoID;
    TROSerializer(ASerializer).WriteInteger('ReciboPagoID', otSLong, l_ReciboPagoID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
  end;
end;

{ TReciboCollection }
constructor TReciboCollection.Create;
begin
  inherited Create(TRecibo);
end;

constructor TReciboCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReciboCollection.Add: TRecibo;
begin
  result := TRecibo(inherited Add);
end;

function TReciboCollection.GetItems(aIndex: integer): TRecibo;
begin
  result := TRecibo(inherited Items[aIndex]);
end;

procedure TReciboCollection.SetItems(aIndex: integer; const Value: TRecibo);
begin
  TRecibo(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleReciboPago }

procedure TDetalleReciboPago.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleReciboPago;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleReciboPago) then begin
    lSource := LibraryEmpresas_Intf.TDetalleReciboPago(iSource);
    FacturaID := lSource.FacturaID;
    Total := lSource.Total;
    ReciboID := lSource.ReciboID;
    ItemNo := lSource.ItemNo;
  end;
end;

procedure TDetalleReciboPago.ReadComplex(ASerializer: TObject);
var
  l_FacturaID: Integer;
  l_ItemNo: Integer;
  l_ReciboID: Integer;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_ReciboID := ReciboID;
    TROSerializer(ASerializer).ReadInteger('ReciboID', otSLong, l_ReciboID);
    ReciboID := l_ReciboID;
    l_ItemNo := ItemNo;
    TROSerializer(ASerializer).ReadInteger('ItemNo', otSLong, l_ItemNo);
    ItemNo := l_ItemNo;
  end
  else begin
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_ItemNo := ItemNo;
    TROSerializer(ASerializer).ReadInteger('ItemNo', otSLong, l_ItemNo);
    ItemNo := l_ItemNo;
    l_ReciboID := ReciboID;
    TROSerializer(ASerializer).ReadInteger('ReciboID', otSLong, l_ReciboID);
    ReciboID := l_ReciboID;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
  end;
end;

procedure TDetalleReciboPago.WriteComplex(ASerializer: TObject);
var
  l_FacturaID: Integer;
  l_ItemNo: Integer;
  l_ReciboID: Integer;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleReciboPago);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_ReciboID := ReciboID;
    TROSerializer(ASerializer).WriteInteger('ReciboID', otSLong, l_ReciboID);
    l_ItemNo := ItemNo;
    TROSerializer(ASerializer).WriteInteger('ItemNo', otSLong, l_ItemNo);
  end
  else begin
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_ItemNo := ItemNo;
    TROSerializer(ASerializer).WriteInteger('ItemNo', otSLong, l_ItemNo);
    l_ReciboID := ReciboID;
    TROSerializer(ASerializer).WriteInteger('ReciboID', otSLong, l_ReciboID);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
  end;
end;

{ TDetalleReciboPagoCollection }
constructor TDetalleReciboPagoCollection.Create;
begin
  inherited Create(TDetalleReciboPago);
end;

constructor TDetalleReciboPagoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleReciboPagoCollection.Add: TDetalleReciboPago;
begin
  result := TDetalleReciboPago(inherited Add);
end;

function TDetalleReciboPagoCollection.GetItems(aIndex: integer): TDetalleReciboPago;
begin
  result := TDetalleReciboPago(inherited Items[aIndex]);
end;

procedure TDetalleReciboPagoCollection.LoadFromArray(anArray: ATDetalleRecibo);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleReciboPagoCollection.SaveToArray(anArray: ATDetalleRecibo);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleReciboPago.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleReciboPagoCollection.SetItems(aIndex: integer; const Value: TDetalleReciboPago);
begin
  TDetalleReciboPago(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosReciboPago }

procedure TDatosReciboPago.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosReciboPago;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosReciboPago) then begin
    lSource := LibraryEmpresas_Intf.TDatosReciboPago(iSource);
    Recibo.Assign(lSource.Recibo);
    Detalles.Assign(lSource.Detalles);
  end;
end;

function TDatosReciboPago.GetRecibo: TRecibo;
begin
  if (fRecibo = nil) then fRecibo := TRecibo.Create();
  result := fRecibo;
end;

function TDatosReciboPago.GetDetalles: ATDetalleRecibo;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleRecibo.Create();
  result := fDetalles;
end;

procedure TDatosReciboPago.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Recibo := Recibo;
    TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    if Recibo <> l_Recibo then Recibo.Free;
    Recibo := l_Recibo;
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
    l_Recibo := Recibo;
    TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    if Recibo <> l_Recibo then Recibo.Free;
    Recibo := l_Recibo;
  end;
end;

procedure TDatosReciboPago.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosReciboPago);
    l_Recibo := Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
    l_Recibo := Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
  end;
end;

{ TDatosReciboPagoCollection }
constructor TDatosReciboPagoCollection.Create;
begin
  inherited Create(TDatosReciboPago);
end;

constructor TDatosReciboPagoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosReciboPagoCollection.Add: TDatosReciboPago;
begin
  result := TDatosReciboPago(inherited Add);
end;

function TDatosReciboPagoCollection.GetItems(aIndex: integer): TDatosReciboPago;
begin
  result := TDatosReciboPago(inherited Items[aIndex]);
end;

procedure TDatosReciboPagoCollection.SetItems(aIndex: integer; const Value: TDatosReciboPago);
begin
  TDatosReciboPago(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosRecibo }

procedure TDatosRecibo.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosRecibo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosRecibo) then begin
    lSource := LibraryEmpresas_Intf.TDatosRecibo(iSource);
    Recibo.Assign(lSource.Recibo);
    Detalles.Assign(lSource.Detalles);
  end;
end;

function TDatosRecibo.GetRecibo: TRecibo;
begin
  if (fRecibo = nil) then fRecibo := TRecibo.Create();
  result := fRecibo;
end;

function TDatosRecibo.GetDetalles: ATDetalleRecibo;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleRecibo.Create();
  result := fDetalles;
end;

procedure TDatosRecibo.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Recibo := Recibo;
    TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    if Recibo <> l_Recibo then Recibo.Free;
    Recibo := l_Recibo;
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
    l_Recibo := Recibo;
    TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    if Recibo <> l_Recibo then Recibo.Free;
    Recibo := l_Recibo;
  end;
end;

procedure TDatosRecibo.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosRecibo);
    l_Recibo := Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
    l_Recibo := Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
  end;
end;

{ TDatosReciboCollection }
constructor TDatosReciboCollection.Create;
begin
  inherited Create(TDatosRecibo);
end;

constructor TDatosReciboCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosReciboCollection.Add: TDatosRecibo;
begin
  result := TDatosRecibo(inherited Add);
end;

function TDatosReciboCollection.GetItems(aIndex: integer): TDatosRecibo;
begin
  result := TDatosRecibo(inherited Items[aIndex]);
end;

procedure TDatosReciboCollection.SetItems(aIndex: integer; const Value: TDatosRecibo);
begin
  TDatosRecibo(inherited Items[aIndex]).Assign(Value);
end;

{ TLoginInfo }

procedure TLoginInfo.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TLoginInfo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLoginInfo) then begin
    lSource := LibraryEmpresas_Intf.TLoginInfo(iSource);
    Valida := lSource.Valida;
    EmpleadoID := lSource.EmpleadoID;
    NombreEmpleado := lSource.NombreEmpleado;
    Accesos.Assign(lSource.Accesos);
  end;
end;

function TLoginInfo.GetAccesos: ArrayOpcion;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcion.Create();
  result := fAccesos;
end;

procedure TLoginInfo.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
  end;
end;

procedure TLoginInfo.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfo);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoCollection }
constructor TLoginInfoCollection.Create;
begin
  inherited Create(TLoginInfo);
end;

constructor TLoginInfoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoCollection.Add: TLoginInfo;
begin
  result := TLoginInfo(inherited Add);
end;

function TLoginInfoCollection.GetItems(aIndex: integer): TLoginInfo;
begin
  result := TLoginInfo(inherited Items[aIndex]);
end;

procedure TLoginInfoCollection.SetItems(aIndex: integer; const Value: TLoginInfo);
begin
  TLoginInfo(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcion }

procedure TOpcion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TOpcion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TOpcion) then begin
    lSource := LibraryEmpresas_Intf.TOpcion(iSource);
    OpcionID := lSource.OpcionID;
    Nombre := lSource.Nombre;
  end;
end;

procedure TOpcion.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
  end;
end;

procedure TOpcion.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcion);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
  end;
end;

{ TOpcionCollection }
constructor TOpcionCollection.Create;
begin
  inherited Create(TOpcion);
end;

constructor TOpcionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionCollection.Add: TOpcion;
begin
  result := TOpcion(inherited Add);
end;

function TOpcionCollection.GetItems(aIndex: integer): TOpcion;
begin
  result := TOpcion(inherited Items[aIndex]);
end;

procedure TOpcionCollection.LoadFromArray(anArray: ArrayOpcion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TOpcionCollection.SaveToArray(anArray: ArrayOpcion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TOpcion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TOpcionCollection.SetItems(aIndex: integer; const Value: TOpcion);
begin
  TOpcion(inherited Items[aIndex]).Assign(Value);
end;

{ TConsumoExpress }

procedure TConsumoExpress.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TConsumoExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TConsumoExpress) then begin
    lSource := LibraryEmpresas_Intf.TConsumoExpress(iSource);
    Secuencia := lSource.Secuencia;
    EstacionID := lSource.EstacionID;
    ClienteID := lSource.ClienteID;
    Precio := lSource.Precio;
    Volumen := lSource.Volumen;
    Importe := lSource.Importe;
    Facturado := lSource.Facturado;
    BombaID := lSource.BombaID;
    ProductoID := lSource.ProductoID;
    FacturaID := lSource.FacturaID;
    FechaConsumo := lSource.FechaConsumo;
  end;
end;

procedure TConsumoExpress.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Facturado: Boolean;
  l_FacturaID: Integer;
  l_FechaConsumo: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Facturado := Facturado;
    TROSerializer(ASerializer).ReadEnumerated('Facturado',TypeInfo(boolean), l_Facturado);
    Facturado := l_Facturado;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_FechaConsumo := FechaConsumo;
    TROSerializer(ASerializer).ReadDateTime('FechaConsumo', l_FechaConsumo);
    FechaConsumo := l_FechaConsumo;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Facturado := Facturado;
    TROSerializer(ASerializer).ReadEnumerated('Facturado',TypeInfo(boolean), l_Facturado);
    Facturado := l_Facturado;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_FechaConsumo := FechaConsumo;
    TROSerializer(ASerializer).ReadDateTime('FechaConsumo', l_FechaConsumo);
    FechaConsumo := l_FechaConsumo;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TConsumoExpress.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Facturado: Boolean;
  l_FacturaID: Integer;
  l_FechaConsumo: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConsumoExpress);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Facturado := Facturado;
    TROSerializer(ASerializer).WriteEnumerated('Facturado',TypeInfo(boolean), l_Facturado);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_FechaConsumo := FechaConsumo;
    TROSerializer(ASerializer).WriteDateTime('FechaConsumo', l_FechaConsumo);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Facturado := Facturado;
    TROSerializer(ASerializer).WriteEnumerated('Facturado',TypeInfo(boolean), l_Facturado);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_FechaConsumo := FechaConsumo;
    TROSerializer(ASerializer).WriteDateTime('FechaConsumo', l_FechaConsumo);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TConsumoExpressCollection }
constructor TConsumoExpressCollection.Create;
begin
  inherited Create(TConsumoExpress);
end;

constructor TConsumoExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConsumoExpressCollection.Add: TConsumoExpress;
begin
  result := TConsumoExpress(inherited Add);
end;

function TConsumoExpressCollection.GetItems(aIndex: integer): TConsumoExpress;
begin
  result := TConsumoExpress(inherited Items[aIndex]);
end;

procedure TConsumoExpressCollection.SetItems(aIndex: integer; const Value: TConsumoExpress);
begin
  TConsumoExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCliente }

procedure TDatosCliente.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosCliente;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCliente) then begin
    lSource := LibraryEmpresas_Intf.TDatosCliente(iSource);
    ClienteID := lSource.ClienteID;
    Nombre := lSource.Nombre;
    RFC := lSource.RFC;
    Direccion := lSource.Direccion;
    Telefono := lSource.Telefono;
    CP := lSource.CP;
    Ciudad := lSource.Ciudad;
    Colonia := lSource.Colonia;
    Telefonos := lSource.Telefonos;
    FacturaExpress := lSource.FacturaExpress;
    Saldo := lSource.Saldo;
    MsnError := lSource.MsnError;
  end;
end;

procedure TDatosCliente.ReadComplex(ASerializer: TObject);
var
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_CP: AnsiString;
  l_Direccion: AnsiString;
  l_FacturaExpress: Boolean;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Telefono: AnsiString;
  l_Telefonos: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Direccion := Direccion;
    TROSerializer(ASerializer).ReadAnsiString('Direccion', l_Direccion);
    Direccion := l_Direccion;
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
    l_CP := CP;
    TROSerializer(ASerializer).ReadAnsiString('CP', l_CP);
    CP := l_CP;
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    Telefonos := l_Telefonos;
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    FacturaExpress := l_FacturaExpress;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
  end
  else begin
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_CP := CP;
    TROSerializer(ASerializer).ReadAnsiString('CP', l_CP);
    CP := l_CP;
    l_Direccion := Direccion;
    TROSerializer(ASerializer).ReadAnsiString('Direccion', l_Direccion);
    Direccion := l_Direccion;
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    FacturaExpress := l_FacturaExpress;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    Telefonos := l_Telefonos;
  end;
end;

procedure TDatosCliente.WriteComplex(ASerializer: TObject);
var
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_CP: AnsiString;
  l_Direccion: AnsiString;
  l_FacturaExpress: Boolean;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Telefono: AnsiString;
  l_Telefonos: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCliente);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Direccion := Direccion;
    TROSerializer(ASerializer).WriteAnsiString('Direccion', l_Direccion);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_CP := CP;
    TROSerializer(ASerializer).WriteAnsiString('CP', l_CP);
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
  end
  else begin
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_CP := CP;
    TROSerializer(ASerializer).WriteAnsiString('CP', l_CP);
    l_Direccion := Direccion;
    TROSerializer(ASerializer).WriteAnsiString('Direccion', l_Direccion);
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
  end;
end;

{ TDatosClienteCollection }
constructor TDatosClienteCollection.Create;
begin
  inherited Create(TDatosCliente);
end;

constructor TDatosClienteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosClienteCollection.Add: TDatosCliente;
begin
  result := TDatosCliente(inherited Add);
end;

function TDatosClienteCollection.GetItems(aIndex: integer): TDatosCliente;
begin
  result := TDatosCliente(inherited Items[aIndex]);
end;

procedure TDatosClienteCollection.SetItems(aIndex: integer; const Value: TDatosCliente);
begin
  TDatosCliente(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaExpress }

procedure TFacturaExpress.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TFacturaExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaExpress) then begin
    lSource := LibraryEmpresas_Intf.TFacturaExpress(iSource);
    FacturaID := lSource.FacturaID;
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Fecha := lSource.Fecha;
    Cliente.Assign(lSource.Cliente);
    Subtotal := lSource.Subtotal;
    IVA := lSource.IVA;
    Total := lSource.Total;
    Impuesto := lSource.Impuesto;
    Detalle.Assign(lSource.Detalle);
  end;
end;

function TFacturaExpress.GetCliente: TDatosCliente;
begin
  if (fCliente = nil) then fCliente := TDatosCliente.Create();
  result := fCliente;
end;

function TFacturaExpress.GetDetalle: ADetalleExpress;
begin
  if (fDetalle = nil) then fDetalle := ADetalleExpress.Create();
  result := fDetalle;
end;

procedure TFacturaExpress.ReadComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_Detalle: ADetalleExpress;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    if Cliente <> l_Cliente then Cliente.Free;
    Cliente := l_Cliente;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadArray('Detalle', ADetalleExpress, l_Detalle);
    if Detalle <> l_Detalle then Detalle.Free;
    Detalle := l_Detalle;
  end
  else begin
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    if Cliente <> l_Cliente then Cliente.Free;
    Cliente := l_Cliente;
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadArray('Detalle', ADetalleExpress, l_Detalle);
    if Detalle <> l_Detalle then Detalle.Free;
    Detalle := l_Detalle;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
  end;
end;

procedure TFacturaExpress.WriteComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_Detalle: ADetalleExpress;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaExpress);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleExpress);
  end
  else begin
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleExpress);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
  end;
end;

{ TFacturaExpressCollection }
constructor TFacturaExpressCollection.Create;
begin
  inherited Create(TFacturaExpress);
end;

constructor TFacturaExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaExpressCollection.Add: TFacturaExpress;
begin
  result := TFacturaExpress(inherited Add);
end;

function TFacturaExpressCollection.GetItems(aIndex: integer): TFacturaExpress;
begin
  result := TFacturaExpress(inherited Items[aIndex]);
end;

procedure TFacturaExpressCollection.SetItems(aIndex: integer; const Value: TFacturaExpress);
begin
  TFacturaExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleExpress }

procedure TDetalleExpress.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleExpress) then begin
    lSource := LibraryEmpresas_Intf.TDetalleExpress(iSource);
    Codigo := lSource.Codigo;
    Descripcion := lSource.Descripcion;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
  end;
end;

procedure TDetalleExpress.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_Importe: Double;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end;
end;

procedure TDetalleExpress.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_Importe: Double;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleExpress);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end;
end;

{ TDetalleExpressCollection }
constructor TDetalleExpressCollection.Create;
begin
  inherited Create(TDetalleExpress);
end;

constructor TDetalleExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleExpressCollection.Add: TDetalleExpress;
begin
  result := TDetalleExpress(inherited Add);
end;

function TDetalleExpressCollection.GetItems(aIndex: integer): TDetalleExpress;
begin
  result := TDetalleExpress(inherited Items[aIndex]);
end;

procedure TDetalleExpressCollection.LoadFromArray(anArray: ADetalleExpress);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleExpressCollection.SaveToArray(anArray: ADetalleExpress);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleExpress.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleExpressCollection.SetItems(aIndex: integer; const Value: TDetalleExpress);
begin
  TDetalleExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TValoresTurno }

procedure TValoresTurno.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TValoresTurno;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TValoresTurno) then begin
    lSource := LibraryEmpresas_Intf.TValoresTurno(iSource);
    Fecha := lSource.Fecha;
    Venta := lSource.Venta;
    Efectivo := lSource.Efectivo;
    Credito := lSource.Credito;
    ConsumoInterno := lSource.ConsumoInterno;
    Calibraciones := lSource.Calibraciones;
    Faltantes := lSource.Faltantes;
    Sobrantes := lSource.Sobrantes;
  end;
end;

procedure TValoresTurno.ReadComplex(ASerializer: TObject);
var
  l_Calibraciones: Double;
  l_ConsumoInterno: Double;
  l_Credito: Double;
  l_Efectivo: Double;
  l_Faltantes: Double;
  l_Fecha: DateTime;
  l_Sobrantes: Double;
  l_Venta: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Venta := Venta;
    TROSerializer(ASerializer).ReadDouble('Venta', ftDouble, l_Venta);
    Venta := l_Venta;
    l_Efectivo := Efectivo;
    TROSerializer(ASerializer).ReadDouble('Efectivo', ftDouble, l_Efectivo);
    Efectivo := l_Efectivo;
    l_Credito := Credito;
    TROSerializer(ASerializer).ReadDouble('Credito', ftDouble, l_Credito);
    Credito := l_Credito;
    l_ConsumoInterno := ConsumoInterno;
    TROSerializer(ASerializer).ReadDouble('ConsumoInterno', ftDouble, l_ConsumoInterno);
    ConsumoInterno := l_ConsumoInterno;
    l_Calibraciones := Calibraciones;
    TROSerializer(ASerializer).ReadDouble('Calibraciones', ftDouble, l_Calibraciones);
    Calibraciones := l_Calibraciones;
    l_Faltantes := Faltantes;
    TROSerializer(ASerializer).ReadDouble('Faltantes', ftDouble, l_Faltantes);
    Faltantes := l_Faltantes;
    l_Sobrantes := Sobrantes;
    TROSerializer(ASerializer).ReadDouble('Sobrantes', ftDouble, l_Sobrantes);
    Sobrantes := l_Sobrantes;
  end
  else begin
    l_Calibraciones := Calibraciones;
    TROSerializer(ASerializer).ReadDouble('Calibraciones', ftDouble, l_Calibraciones);
    Calibraciones := l_Calibraciones;
    l_ConsumoInterno := ConsumoInterno;
    TROSerializer(ASerializer).ReadDouble('ConsumoInterno', ftDouble, l_ConsumoInterno);
    ConsumoInterno := l_ConsumoInterno;
    l_Credito := Credito;
    TROSerializer(ASerializer).ReadDouble('Credito', ftDouble, l_Credito);
    Credito := l_Credito;
    l_Efectivo := Efectivo;
    TROSerializer(ASerializer).ReadDouble('Efectivo', ftDouble, l_Efectivo);
    Efectivo := l_Efectivo;
    l_Faltantes := Faltantes;
    TROSerializer(ASerializer).ReadDouble('Faltantes', ftDouble, l_Faltantes);
    Faltantes := l_Faltantes;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Sobrantes := Sobrantes;
    TROSerializer(ASerializer).ReadDouble('Sobrantes', ftDouble, l_Sobrantes);
    Sobrantes := l_Sobrantes;
    l_Venta := Venta;
    TROSerializer(ASerializer).ReadDouble('Venta', ftDouble, l_Venta);
    Venta := l_Venta;
  end;
end;

procedure TValoresTurno.WriteComplex(ASerializer: TObject);
var
  l_Calibraciones: Double;
  l_ConsumoInterno: Double;
  l_Credito: Double;
  l_Efectivo: Double;
  l_Faltantes: Double;
  l_Fecha: DateTime;
  l_Sobrantes: Double;
  l_Venta: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TValoresTurno);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Venta := Venta;
    TROSerializer(ASerializer).WriteDouble('Venta', ftDouble, l_Venta);
    l_Efectivo := Efectivo;
    TROSerializer(ASerializer).WriteDouble('Efectivo', ftDouble, l_Efectivo);
    l_Credito := Credito;
    TROSerializer(ASerializer).WriteDouble('Credito', ftDouble, l_Credito);
    l_ConsumoInterno := ConsumoInterno;
    TROSerializer(ASerializer).WriteDouble('ConsumoInterno', ftDouble, l_ConsumoInterno);
    l_Calibraciones := Calibraciones;
    TROSerializer(ASerializer).WriteDouble('Calibraciones', ftDouble, l_Calibraciones);
    l_Faltantes := Faltantes;
    TROSerializer(ASerializer).WriteDouble('Faltantes', ftDouble, l_Faltantes);
    l_Sobrantes := Sobrantes;
    TROSerializer(ASerializer).WriteDouble('Sobrantes', ftDouble, l_Sobrantes);
  end
  else begin
    l_Calibraciones := Calibraciones;
    TROSerializer(ASerializer).WriteDouble('Calibraciones', ftDouble, l_Calibraciones);
    l_ConsumoInterno := ConsumoInterno;
    TROSerializer(ASerializer).WriteDouble('ConsumoInterno', ftDouble, l_ConsumoInterno);
    l_Credito := Credito;
    TROSerializer(ASerializer).WriteDouble('Credito', ftDouble, l_Credito);
    l_Efectivo := Efectivo;
    TROSerializer(ASerializer).WriteDouble('Efectivo', ftDouble, l_Efectivo);
    l_Faltantes := Faltantes;
    TROSerializer(ASerializer).WriteDouble('Faltantes', ftDouble, l_Faltantes);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Sobrantes := Sobrantes;
    TROSerializer(ASerializer).WriteDouble('Sobrantes', ftDouble, l_Sobrantes);
    l_Venta := Venta;
    TROSerializer(ASerializer).WriteDouble('Venta', ftDouble, l_Venta);
  end;
end;

{ TValoresTurnoCollection }
constructor TValoresTurnoCollection.Create;
begin
  inherited Create(TValoresTurno);
end;

constructor TValoresTurnoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TValoresTurnoCollection.Add: TValoresTurno;
begin
  result := TValoresTurno(inherited Add);
end;

function TValoresTurnoCollection.GetItems(aIndex: integer): TValoresTurno;
begin
  result := TValoresTurno(inherited Items[aIndex]);
end;

procedure TValoresTurnoCollection.SetItems(aIndex: integer; const Value: TValoresTurno);
begin
  TValoresTurno(inherited Items[aIndex]).Assign(Value);
end;

{ TOtroProducto }

procedure TOtroProducto.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TOtroProducto;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TOtroProducto) then begin
    lSource := LibraryEmpresas_Intf.TOtroProducto(iSource);
    ID := lSource.ID;
    Nombre := lSource.Nombre;
    Codigo := lSource.Codigo;
    Barras := lSource.Barras;
    Precio := lSource.Precio;
  end;
end;

procedure TOtroProducto.ReadComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Barras := Barras;
    TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    Barras := l_Barras;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end
  else begin
    l_Barras := Barras;
    TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    Barras := l_Barras;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end;
end;

procedure TOtroProducto.WriteComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOtroProducto);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Barras := Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end
  else begin
    l_Barras := Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end;
end;

{ TOtroProductoCollection }
constructor TOtroProductoCollection.Create;
begin
  inherited Create(TOtroProducto);
end;

constructor TOtroProductoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOtroProductoCollection.Add: TOtroProducto;
begin
  result := TOtroProducto(inherited Add);
end;

function TOtroProductoCollection.GetItems(aIndex: integer): TOtroProducto;
begin
  result := TOtroProducto(inherited Items[aIndex]);
end;

procedure TOtroProductoCollection.SetItems(aIndex: integer; const Value: TOtroProducto);
begin
  TOtroProducto(inherited Items[aIndex]).Assign(Value);
end;

{ TAgrupacion }

procedure TAgrupacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TAgrupacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TAgrupacion) then begin
    lSource := LibraryEmpresas_Intf.TAgrupacion(iSource);
    AgrupacionID := lSource.AgrupacionID;
    Bombas.Assign(lSource.Bombas);
  end;
end;

function TAgrupacion.GetBombas: AAgrupacionBomba;
begin
  if (fBombas = nil) then fBombas := AAgrupacionBomba.Create();
  result := fBombas;
end;

procedure TAgrupacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Bombas: AAgrupacionBomba;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_Bombas := Bombas;
    TROSerializer(ASerializer).ReadArray('Bombas', AAgrupacionBomba, l_Bombas);
    if Bombas <> l_Bombas then Bombas.Free;
    Bombas := l_Bombas;
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_Bombas := Bombas;
    TROSerializer(ASerializer).ReadArray('Bombas', AAgrupacionBomba, l_Bombas);
    if Bombas <> l_Bombas then Bombas.Free;
    Bombas := l_Bombas;
  end;
end;

procedure TAgrupacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Bombas: AAgrupacionBomba;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAgrupacion);
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_Bombas := Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, AAgrupacionBomba);
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_Bombas := Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, AAgrupacionBomba);
  end;
end;

{ TAgrupacionCollection }
constructor TAgrupacionCollection.Create;
begin
  inherited Create(TAgrupacion);
end;

constructor TAgrupacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAgrupacionCollection.Add: TAgrupacion;
begin
  result := TAgrupacion(inherited Add);
end;

function TAgrupacionCollection.GetItems(aIndex: integer): TAgrupacion;
begin
  result := TAgrupacion(inherited Items[aIndex]);
end;

procedure TAgrupacionCollection.LoadFromArray(anArray: AAgrupacion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TAgrupacionCollection.SaveToArray(anArray: AAgrupacion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TAgrupacion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TAgrupacionCollection.SetItems(aIndex: integer; const Value: TAgrupacion);
begin
  TAgrupacion(inherited Items[aIndex]).Assign(Value);
end;

{ TSagarpa }

procedure TSagarpa.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TSagarpa;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TSagarpa) then begin
    lSource := LibraryEmpresas_Intf.TSagarpa(iSource);
    ClienteSagarpa := lSource.ClienteSagarpa;
    ClienteSagarpaPemex := lSource.ClienteSagarpaPemex;
  end;
end;

procedure TSagarpa.ReadComplex(ASerializer: TObject);
var
  l_ClienteSagarpa: Integer;
  l_ClienteSagarpaPemex: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteSagarpa := ClienteSagarpa;
    TROSerializer(ASerializer).ReadInteger('ClienteSagarpa', otSLong, l_ClienteSagarpa);
    ClienteSagarpa := l_ClienteSagarpa;
    l_ClienteSagarpaPemex := ClienteSagarpaPemex;
    TROSerializer(ASerializer).ReadInteger('ClienteSagarpaPemex', otSLong, l_ClienteSagarpaPemex);
    ClienteSagarpaPemex := l_ClienteSagarpaPemex;
  end
  else begin
    l_ClienteSagarpa := ClienteSagarpa;
    TROSerializer(ASerializer).ReadInteger('ClienteSagarpa', otSLong, l_ClienteSagarpa);
    ClienteSagarpa := l_ClienteSagarpa;
    l_ClienteSagarpaPemex := ClienteSagarpaPemex;
    TROSerializer(ASerializer).ReadInteger('ClienteSagarpaPemex', otSLong, l_ClienteSagarpaPemex);
    ClienteSagarpaPemex := l_ClienteSagarpaPemex;
  end;
end;

procedure TSagarpa.WriteComplex(ASerializer: TObject);
var
  l_ClienteSagarpa: Integer;
  l_ClienteSagarpaPemex: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TSagarpa);
    l_ClienteSagarpa := ClienteSagarpa;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpa', otSLong, l_ClienteSagarpa);
    l_ClienteSagarpaPemex := ClienteSagarpaPemex;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpaPemex', otSLong, l_ClienteSagarpaPemex);
  end
  else begin
    l_ClienteSagarpa := ClienteSagarpa;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpa', otSLong, l_ClienteSagarpa);
    l_ClienteSagarpaPemex := ClienteSagarpaPemex;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpaPemex', otSLong, l_ClienteSagarpaPemex);
  end;
end;

{ TSagarpaCollection }
constructor TSagarpaCollection.Create;
begin
  inherited Create(TSagarpa);
end;

constructor TSagarpaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TSagarpaCollection.Add: TSagarpa;
begin
  result := TSagarpa(inherited Add);
end;

function TSagarpaCollection.GetItems(aIndex: integer): TSagarpa;
begin
  result := TSagarpa(inherited Items[aIndex]);
end;

procedure TSagarpaCollection.SetItems(aIndex: integer; const Value: TSagarpa);
begin
  TSagarpa(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosPuntos }

procedure TDatosPuntos.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosPuntos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosPuntos) then begin
    lSource := LibraryEmpresas_Intf.TDatosPuntos(iSource);
    ClienteID := lSource.ClienteID;
    ApellidoPaterno := lSource.ApellidoPaterno;
    ApellidoMaterno := lSource.ApellidoMaterno;
    Nombres := lSource.Nombres;
    email := lSource.email;
    Nacimiento := lSource.Nacimiento;
    Referencia := lSource.Referencia;
    Telefonos := lSource.Telefonos;
    FacturaExpress := lSource.FacturaExpress;
    PuntosCategoriaID := lSource.PuntosCategoriaID;
    Sexo := lSource.Sexo;
    FechaRegistro := lSource.FechaRegistro;
    UsuarioID := lSource.UsuarioID;
    PuntosClubID := lSource.PuntosClubID;
  end;
end;

procedure TDatosPuntos.ReadComplex(ASerializer: TObject);
var
  l_ApellidoMaterno: AnsiString;
  l_ApellidoPaterno: AnsiString;
  l_ClienteID: Integer;
  l_email: AnsiString;
  l_FacturaExpress: Boolean;
  l_FechaRegistro: DateTime;
  l_Nacimiento: DateTime;
  l_Nombres: AnsiString;
  l_PuntosCategoriaID: Integer;
  l_PuntosClubID: Integer;
  l_Referencia: AnsiString;
  l_Sexo: Integer;
  l_Telefonos: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_ApellidoPaterno := ApellidoPaterno;
    TROSerializer(ASerializer).ReadAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    ApellidoPaterno := l_ApellidoPaterno;
    l_ApellidoMaterno := ApellidoMaterno;
    TROSerializer(ASerializer).ReadAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    ApellidoMaterno := l_ApellidoMaterno;
    l_Nombres := Nombres;
    TROSerializer(ASerializer).ReadAnsiString('Nombres', l_Nombres);
    Nombres := l_Nombres;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
    l_Nacimiento := Nacimiento;
    TROSerializer(ASerializer).ReadDateTime('Nacimiento', l_Nacimiento);
    Nacimiento := l_Nacimiento;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    Telefonos := l_Telefonos;
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    FacturaExpress := l_FacturaExpress;
    l_PuntosCategoriaID := PuntosCategoriaID;
    TROSerializer(ASerializer).ReadInteger('PuntosCategoriaID', otSLong, l_PuntosCategoriaID);
    PuntosCategoriaID := l_PuntosCategoriaID;
    l_Sexo := Sexo;
    TROSerializer(ASerializer).ReadInteger('Sexo', otSLong, l_Sexo);
    Sexo := l_Sexo;
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    FechaRegistro := l_FechaRegistro;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_PuntosClubID := PuntosClubID;
    TROSerializer(ASerializer).ReadInteger('PuntosClubID', otSLong, l_PuntosClubID);
    PuntosClubID := l_PuntosClubID;
  end
  else begin
    l_ApellidoMaterno := ApellidoMaterno;
    TROSerializer(ASerializer).ReadAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    ApellidoMaterno := l_ApellidoMaterno;
    l_ApellidoPaterno := ApellidoPaterno;
    TROSerializer(ASerializer).ReadAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    ApellidoPaterno := l_ApellidoPaterno;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    FacturaExpress := l_FacturaExpress;
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    FechaRegistro := l_FechaRegistro;
    l_Nacimiento := Nacimiento;
    TROSerializer(ASerializer).ReadDateTime('Nacimiento', l_Nacimiento);
    Nacimiento := l_Nacimiento;
    l_Nombres := Nombres;
    TROSerializer(ASerializer).ReadAnsiString('Nombres', l_Nombres);
    Nombres := l_Nombres;
    l_PuntosCategoriaID := PuntosCategoriaID;
    TROSerializer(ASerializer).ReadInteger('PuntosCategoriaID', otSLong, l_PuntosCategoriaID);
    PuntosCategoriaID := l_PuntosCategoriaID;
    l_PuntosClubID := PuntosClubID;
    TROSerializer(ASerializer).ReadInteger('PuntosClubID', otSLong, l_PuntosClubID);
    PuntosClubID := l_PuntosClubID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Sexo := Sexo;
    TROSerializer(ASerializer).ReadInteger('Sexo', otSLong, l_Sexo);
    Sexo := l_Sexo;
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    Telefonos := l_Telefonos;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TDatosPuntos.WriteComplex(ASerializer: TObject);
var
  l_ApellidoMaterno: AnsiString;
  l_ApellidoPaterno: AnsiString;
  l_ClienteID: Integer;
  l_email: AnsiString;
  l_FacturaExpress: Boolean;
  l_FechaRegistro: DateTime;
  l_Nacimiento: DateTime;
  l_Nombres: AnsiString;
  l_PuntosCategoriaID: Integer;
  l_PuntosClubID: Integer;
  l_Referencia: AnsiString;
  l_Sexo: Integer;
  l_Telefonos: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosPuntos);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_ApellidoPaterno := ApellidoPaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    l_ApellidoMaterno := ApellidoMaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    l_Nombres := Nombres;
    TROSerializer(ASerializer).WriteAnsiString('Nombres', l_Nombres);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_Nacimiento := Nacimiento;
    TROSerializer(ASerializer).WriteDateTime('Nacimiento', l_Nacimiento);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    l_PuntosCategoriaID := PuntosCategoriaID;
    TROSerializer(ASerializer).WriteInteger('PuntosCategoriaID', otSLong, l_PuntosCategoriaID);
    l_Sexo := Sexo;
    TROSerializer(ASerializer).WriteInteger('Sexo', otSLong, l_Sexo);
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_PuntosClubID := PuntosClubID;
    TROSerializer(ASerializer).WriteInteger('PuntosClubID', otSLong, l_PuntosClubID);
  end
  else begin
    l_ApellidoMaterno := ApellidoMaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    l_ApellidoPaterno := ApellidoPaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_FacturaExpress := FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',TypeInfo(boolean), l_FacturaExpress);
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_Nacimiento := Nacimiento;
    TROSerializer(ASerializer).WriteDateTime('Nacimiento', l_Nacimiento);
    l_Nombres := Nombres;
    TROSerializer(ASerializer).WriteAnsiString('Nombres', l_Nombres);
    l_PuntosCategoriaID := PuntosCategoriaID;
    TROSerializer(ASerializer).WriteInteger('PuntosCategoriaID', otSLong, l_PuntosCategoriaID);
    l_PuntosClubID := PuntosClubID;
    TROSerializer(ASerializer).WriteInteger('PuntosClubID', otSLong, l_PuntosClubID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Sexo := Sexo;
    TROSerializer(ASerializer).WriteInteger('Sexo', otSLong, l_Sexo);
    l_Telefonos := Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TDatosPuntosCollection }
constructor TDatosPuntosCollection.Create;
begin
  inherited Create(TDatosPuntos);
end;

constructor TDatosPuntosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosPuntosCollection.Add: TDatosPuntos;
begin
  result := TDatosPuntos(inherited Add);
end;

function TDatosPuntosCollection.GetItems(aIndex: integer): TDatosPuntos;
begin
  result := TDatosPuntos(inherited Items[aIndex]);
end;

procedure TDatosPuntosCollection.SetItems(aIndex: integer; const Value: TDatosPuntos);
begin
  TDatosPuntos(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCelular }

procedure TDatosCelular.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosCelular;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCelular) then begin
    lSource := LibraryEmpresas_Intf.TDatosCelular(iSource);
    Telefono := lSource.Telefono;
    Compania := lSource.Compania;
    Descripcion := lSource.Descripcion;
  end;
end;

procedure TDatosCelular.ReadComplex(ASerializer: TObject);
var
  l_Compania: Integer;
  l_Descripcion: AnsiString;
  l_Telefono: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
    l_Compania := Compania;
    TROSerializer(ASerializer).ReadInteger('Compania', otSLong, l_Compania);
    Compania := l_Compania;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
  end
  else begin
    l_Compania := Compania;
    TROSerializer(ASerializer).ReadInteger('Compania', otSLong, l_Compania);
    Compania := l_Compania;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
  end;
end;

procedure TDatosCelular.WriteComplex(ASerializer: TObject);
var
  l_Compania: Integer;
  l_Descripcion: AnsiString;
  l_Telefono: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCelular);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_Compania := Compania;
    TROSerializer(ASerializer).WriteInteger('Compania', otSLong, l_Compania);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
  end
  else begin
    l_Compania := Compania;
    TROSerializer(ASerializer).WriteInteger('Compania', otSLong, l_Compania);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
  end;
end;

{ TDatosCelularCollection }
constructor TDatosCelularCollection.Create;
begin
  inherited Create(TDatosCelular);
end;

constructor TDatosCelularCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCelularCollection.Add: TDatosCelular;
begin
  result := TDatosCelular(inherited Add);
end;

function TDatosCelularCollection.GetItems(aIndex: integer): TDatosCelular;
begin
  result := TDatosCelular(inherited Items[aIndex]);
end;

procedure TDatosCelularCollection.LoadFromArray(anArray: ADatosCelular);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDatosCelularCollection.SaveToArray(anArray: ADatosCelular);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDatosCelular.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDatosCelularCollection.SetItems(aIndex: integer; const Value: TDatosCelular);
begin
  TDatosCelular(inherited Items[aIndex]).Assign(Value);
end;

{ TEntregaPremio }

procedure TEntregaPremio.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TEntregaPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TEntregaPremio) then begin
    lSource := LibraryEmpresas_Intf.TEntregaPremio(iSource);
    ClienteID := lSource.ClienteID;
    Cliente := lSource.Cliente;
    Premio := lSource.Premio;
    Cantidad := lSource.Cantidad;
    Puntos := lSource.Puntos;
    Saldo := lSource.Saldo;
    Mensaje := lSource.Mensaje;
    Valido := lSource.Valido;
  end;
end;

procedure TEntregaPremio.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_Premio := Premio;
    TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    Premio := l_Premio;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Premio := Premio;
    TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    Premio := l_Premio;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
  end;
end;

procedure TEntregaPremio.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEntregaPremio);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_Premio := Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Premio := Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
  end;
end;

{ TEntregaPremioCollection }
constructor TEntregaPremioCollection.Create;
begin
  inherited Create(TEntregaPremio);
end;

constructor TEntregaPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEntregaPremioCollection.Add: TEntregaPremio;
begin
  result := TEntregaPremio(inherited Add);
end;

function TEntregaPremioCollection.GetItems(aIndex: integer): TEntregaPremio;
begin
  result := TEntregaPremio(inherited Items[aIndex]);
end;

procedure TEntregaPremioCollection.SetItems(aIndex: integer; const Value: TEntregaPremio);
begin
  TEntregaPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosPremio }

procedure TDatosPremio.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosPremio) then begin
    lSource := LibraryEmpresas_Intf.TDatosPremio(iSource);
    PremioID := lSource.PremioID;
    Nombre := lSource.Nombre;
    Puntos := lSource.Puntos;
  end;
end;

procedure TDatosPremio.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_PremioID := PremioID;
    TROSerializer(ASerializer).ReadInteger('PremioID', otSLong, l_PremioID);
    PremioID := l_PremioID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_PremioID := PremioID;
    TROSerializer(ASerializer).ReadInteger('PremioID', otSLong, l_PremioID);
    PremioID := l_PremioID;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
  end;
end;

procedure TDatosPremio.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosPremio);
    l_PremioID := PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', otSLong, l_PremioID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_PremioID := PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', otSLong, l_PremioID);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
  end;
end;

{ TDatosPremioCollection }
constructor TDatosPremioCollection.Create;
begin
  inherited Create(TDatosPremio);
end;

constructor TDatosPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosPremioCollection.Add: TDatosPremio;
begin
  result := TDatosPremio(inherited Add);
end;

function TDatosPremioCollection.GetItems(aIndex: integer): TDatosPremio;
begin
  result := TDatosPremio(inherited Items[aIndex]);
end;

procedure TDatosPremioCollection.SetItems(aIndex: integer; const Value: TDatosPremio);
begin
  TDatosPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TConfirmaEnvioA }

procedure TConfirmaEnvioA.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TConfirmaEnvioA;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TConfirmaEnvioA) then begin
    lSource := LibraryEmpresas_Intf.TConfirmaEnvioA(iSource);
    Consumo.Assign(lSource.Consumo);
    Host := lSource.Host;
    Fecha := lSource.Fecha;
  end;
end;

function TConfirmaEnvioA.GetConsumo: TConsumoExpress;
begin
  if (fConsumo = nil) then fConsumo := TConsumoExpress.Create();
  result := fConsumo;
end;

procedure TConfirmaEnvioA.ReadComplex(ASerializer: TObject);
var
  l_Consumo: TConsumoExpress;
  l_Fecha: DateTime;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Consumo := Consumo;
    TROSerializer(ASerializer).ReadStruct('Consumo', TConsumoExpress, l_Consumo);
    if Consumo <> l_Consumo then Consumo.Free;
    Consumo := l_Consumo;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
  end
  else begin
    l_Consumo := Consumo;
    TROSerializer(ASerializer).ReadStruct('Consumo', TConsumoExpress, l_Consumo);
    if Consumo <> l_Consumo then Consumo.Free;
    Consumo := l_Consumo;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
  end;
end;

procedure TConfirmaEnvioA.WriteComplex(ASerializer: TObject);
var
  l_Consumo: TConsumoExpress;
  l_Fecha: DateTime;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConfirmaEnvioA);
    l_Consumo := Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumoExpress);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
  end
  else begin
    l_Consumo := Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumoExpress);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
  end;
end;

{ TConfirmaEnvioACollection }
constructor TConfirmaEnvioACollection.Create;
begin
  inherited Create(TConfirmaEnvioA);
end;

constructor TConfirmaEnvioACollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConfirmaEnvioACollection.Add: TConfirmaEnvioA;
begin
  result := TConfirmaEnvioA(inherited Add);
end;

function TConfirmaEnvioACollection.GetItems(aIndex: integer): TConfirmaEnvioA;
begin
  result := TConfirmaEnvioA(inherited Items[aIndex]);
end;

procedure TConfirmaEnvioACollection.SetItems(aIndex: integer; const Value: TConfirmaEnvioA);
begin
  TConfirmaEnvioA(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCerrarLiquidacion }

procedure TDatosCerrarLiquidacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosCerrarLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCerrarLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDatosCerrarLiquidacion(iSource);
    LiquidacionID := lSource.LiquidacionID;
    VentasTotales := lSource.VentasTotales;
    Entregado := lSource.Entregado;
    Diferencia := lSource.Diferencia;
    Despachadores.Assign(lSource.Despachadores);
    Detalle.Assign(lSource.Detalle);
    TipoValor.Assign(lSource.TipoValor);
    EstacionID := lSource.EstacionID;
    TurnoID := lSource.TurnoID;
  end;
end;

function TDatosCerrarLiquidacion.GetDespachadores: ADespachadorLiquidacion;
begin
  if (fDespachadores = nil) then fDespachadores := ADespachadorLiquidacion.Create();
  result := fDespachadores;
end;

function TDatosCerrarLiquidacion.GetDetalle: ADetalleLiquidacion;
begin
  if (fDetalle = nil) then fDetalle := ADetalleLiquidacion.Create();
  result := fDetalle;
end;

function TDatosCerrarLiquidacion.GetTipoValor: ATipoValor;
begin
  if (fTipoValor = nil) then fTipoValor := ATipoValor.Create();
  result := fTipoValor;
end;

procedure TDatosCerrarLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_Despachadores: ADespachadorLiquidacion;
  l_Detalle: ADetalleLiquidacion;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_EstacionID: Integer;
  l_LiquidacionID: Integer;
  l_TipoValor: ATipoValor;
  l_TurnoID: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).ReadDouble('VentasTotales', ftDouble, l_VentasTotales);
    VentasTotales := l_VentasTotales;
    l_Entregado := Entregado;
    TROSerializer(ASerializer).ReadDouble('Entregado', ftDouble, l_Entregado);
    Entregado := l_Entregado;
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).ReadDouble('Diferencia', ftDouble, l_Diferencia);
    Diferencia := l_Diferencia;
    l_Despachadores := Despachadores;
    TROSerializer(ASerializer).ReadArray('Despachadores', ADespachadorLiquidacion, l_Despachadores);
    if Despachadores <> l_Despachadores then Despachadores.Free;
    Despachadores := l_Despachadores;
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadArray('Detalle', ADetalleLiquidacion, l_Detalle);
    if Detalle <> l_Detalle then Detalle.Free;
    Detalle := l_Detalle;
    l_TipoValor := TipoValor;
    TROSerializer(ASerializer).ReadArray('TipoValor', ATipoValor, l_TipoValor);
    if TipoValor <> l_TipoValor then TipoValor.Free;
    TipoValor := l_TipoValor;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
  end
  else begin
    l_Despachadores := Despachadores;
    TROSerializer(ASerializer).ReadArray('Despachadores', ADespachadorLiquidacion, l_Despachadores);
    if Despachadores <> l_Despachadores then Despachadores.Free;
    Despachadores := l_Despachadores;
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadArray('Detalle', ADetalleLiquidacion, l_Detalle);
    if Detalle <> l_Detalle then Detalle.Free;
    Detalle := l_Detalle;
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).ReadDouble('Diferencia', ftDouble, l_Diferencia);
    Diferencia := l_Diferencia;
    l_Entregado := Entregado;
    TROSerializer(ASerializer).ReadDouble('Entregado', ftDouble, l_Entregado);
    Entregado := l_Entregado;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).ReadInteger('LiquidacionID', otSLong, l_LiquidacionID);
    LiquidacionID := l_LiquidacionID;
    l_TipoValor := TipoValor;
    TROSerializer(ASerializer).ReadArray('TipoValor', ATipoValor, l_TipoValor);
    if TipoValor <> l_TipoValor then TipoValor.Free;
    TipoValor := l_TipoValor;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).ReadDouble('VentasTotales', ftDouble, l_VentasTotales);
    VentasTotales := l_VentasTotales;
  end;
end;

procedure TDatosCerrarLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_Despachadores: ADespachadorLiquidacion;
  l_Detalle: ADetalleLiquidacion;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_EstacionID: Integer;
  l_LiquidacionID: Integer;
  l_TipoValor: ATipoValor;
  l_TurnoID: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCerrarLiquidacion);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', ftDouble, l_VentasTotales);
    l_Entregado := Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', ftDouble, l_Entregado);
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', ftDouble, l_Diferencia);
    l_Despachadores := Despachadores;
    TROSerializer(ASerializer).WriteArray('Despachadores', l_Despachadores, ADespachadorLiquidacion);
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleLiquidacion);
    l_TipoValor := TipoValor;
    TROSerializer(ASerializer).WriteArray('TipoValor', l_TipoValor, ATipoValor);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
  end
  else begin
    l_Despachadores := Despachadores;
    TROSerializer(ASerializer).WriteArray('Despachadores', l_Despachadores, ADespachadorLiquidacion);
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleLiquidacion);
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', ftDouble, l_Diferencia);
    l_Entregado := Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', ftDouble, l_Entregado);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_LiquidacionID := LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', otSLong, l_LiquidacionID);
    l_TipoValor := TipoValor;
    TROSerializer(ASerializer).WriteArray('TipoValor', l_TipoValor, ATipoValor);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_VentasTotales := VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', ftDouble, l_VentasTotales);
  end;
end;

{ TDatosCerrarLiquidacionCollection }
constructor TDatosCerrarLiquidacionCollection.Create;
begin
  inherited Create(TDatosCerrarLiquidacion);
end;

constructor TDatosCerrarLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCerrarLiquidacionCollection.Add: TDatosCerrarLiquidacion;
begin
  result := TDatosCerrarLiquidacion(inherited Add);
end;

function TDatosCerrarLiquidacionCollection.GetItems(aIndex: integer): TDatosCerrarLiquidacion;
begin
  result := TDatosCerrarLiquidacion(inherited Items[aIndex]);
end;

procedure TDatosCerrarLiquidacionCollection.SetItems(aIndex: integer; const Value: TDatosCerrarLiquidacion);
begin
  TDatosCerrarLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TDespachadorLiquidacion }

procedure TDespachadorLiquidacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDespachadorLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDespachadorLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDespachadorLiquidacion(iSource);
    DespachadorLiquidacionID := lSource.DespachadorLiquidacionID;
    DespachadorID := lSource.DespachadorID;
    Importe := lSource.Importe;
    Entregado := lSource.Entregado;
    Diferencia := lSource.Diferencia;
    AgrupacionID := lSource.AgrupacionID;
  end;
end;

procedure TDespachadorLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_DespachadorID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_Importe: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).ReadInteger('DespachadorID', otSLong, l_DespachadorID);
    DespachadorID := l_DespachadorID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Entregado := Entregado;
    TROSerializer(ASerializer).ReadDouble('Entregado', ftDouble, l_Entregado);
    Entregado := l_Entregado;
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).ReadDouble('Diferencia', ftDouble, l_Diferencia);
    Diferencia := l_Diferencia;
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).ReadInteger('DespachadorID', otSLong, l_DespachadorID);
    DespachadorID := l_DespachadorID;
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).ReadDouble('Diferencia', ftDouble, l_Diferencia);
    Diferencia := l_Diferencia;
    l_Entregado := Entregado;
    TROSerializer(ASerializer).ReadDouble('Entregado', ftDouble, l_Entregado);
    Entregado := l_Entregado;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
  end;
end;

procedure TDespachadorLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_DespachadorID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_Importe: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDespachadorLiquidacion);
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', otSLong, l_DespachadorID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Entregado := Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', ftDouble, l_Entregado);
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', ftDouble, l_Diferencia);
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_DespachadorID := DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', otSLong, l_DespachadorID);
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    l_Diferencia := Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', ftDouble, l_Diferencia);
    l_Entregado := Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', ftDouble, l_Entregado);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
  end;
end;

{ TDespachadorLiquidacionCollection }
constructor TDespachadorLiquidacionCollection.Create;
begin
  inherited Create(TDespachadorLiquidacion);
end;

constructor TDespachadorLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDespachadorLiquidacionCollection.Add: TDespachadorLiquidacion;
begin
  result := TDespachadorLiquidacion(inherited Add);
end;

function TDespachadorLiquidacionCollection.GetItems(aIndex: integer): TDespachadorLiquidacion;
begin
  result := TDespachadorLiquidacion(inherited Items[aIndex]);
end;

procedure TDespachadorLiquidacionCollection.LoadFromArray(anArray: ADespachadorLiquidacion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDespachadorLiquidacionCollection.SaveToArray(anArray: ADespachadorLiquidacion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDespachadorLiquidacion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDespachadorLiquidacionCollection.SetItems(aIndex: integer; const Value: TDespachadorLiquidacion);
begin
  TDespachadorLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleLiquidacion }

procedure TDetalleLiquidacion.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDetalleLiquidacion(iSource);
    Cantidad := lSource.Cantidad;
    Importe := lSource.Importe;
    Referencia := lSource.Referencia;
    Ticket := lSource.Ticket;
    Serie := lSource.Serie;
    CuponID := lSource.CuponID;
    SalidaID := lSource.SalidaID;
    ClienteID := lSource.ClienteID;
    BancoID := lSource.BancoID;
    ProductoID := lSource.ProductoID;
    AuxiliarID := lSource.AuxiliarID;
    DespachadorLiquidacionID := lSource.DespachadorLiquidacionID;
    TipoValorID := lSource.TipoValorID;
  end;
end;

procedure TDetalleLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AuxiliarID: Integer;
  l_BancoID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuponID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Importe: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Serie: AnsiString;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_CuponID := CuponID;
    TROSerializer(ASerializer).ReadInteger('CuponID', otSLong, l_CuponID);
    CuponID := l_CuponID;
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).ReadInteger('SalidaID', otSLong, l_SalidaID);
    SalidaID := l_SalidaID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_BancoID := BancoID;
    TROSerializer(ASerializer).ReadInteger('BancoID', otSLong, l_BancoID);
    BancoID := l_BancoID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_AuxiliarID := AuxiliarID;
    TROSerializer(ASerializer).ReadInteger('AuxiliarID', otSLong, l_AuxiliarID);
    AuxiliarID := l_AuxiliarID;
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
  end
  else begin
    l_AuxiliarID := AuxiliarID;
    TROSerializer(ASerializer).ReadInteger('AuxiliarID', otSLong, l_AuxiliarID);
    AuxiliarID := l_AuxiliarID;
    l_BancoID := BancoID;
    TROSerializer(ASerializer).ReadInteger('BancoID', otSLong, l_BancoID);
    BancoID := l_BancoID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_CuponID := CuponID;
    TROSerializer(ASerializer).ReadInteger('CuponID', otSLong, l_CuponID);
    CuponID := l_CuponID;
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).ReadInteger('SalidaID', otSLong, l_SalidaID);
    SalidaID := l_SalidaID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
  end;
end;

procedure TDetalleLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AuxiliarID: Integer;
  l_BancoID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuponID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Importe: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Serie: AnsiString;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleLiquidacion);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_CuponID := CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', otSLong, l_CuponID);
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', otSLong, l_SalidaID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_BancoID := BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', otSLong, l_BancoID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_AuxiliarID := AuxiliarID;
    TROSerializer(ASerializer).WriteInteger('AuxiliarID', otSLong, l_AuxiliarID);
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
  end
  else begin
    l_AuxiliarID := AuxiliarID;
    TROSerializer(ASerializer).WriteInteger('AuxiliarID', otSLong, l_AuxiliarID);
    l_BancoID := BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', otSLong, l_BancoID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_CuponID := CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', otSLong, l_CuponID);
    l_DespachadorLiquidacionID := DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', otSLong, l_DespachadorLiquidacionID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SalidaID := SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', otSLong, l_SalidaID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
  end;
end;

{ TDetalleLiquidacionCollection }
constructor TDetalleLiquidacionCollection.Create;
begin
  inherited Create(TDetalleLiquidacion);
end;

constructor TDetalleLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleLiquidacionCollection.Add: TDetalleLiquidacion;
begin
  result := TDetalleLiquidacion(inherited Add);
end;

function TDetalleLiquidacionCollection.GetItems(aIndex: integer): TDetalleLiquidacion;
begin
  result := TDetalleLiquidacion(inherited Items[aIndex]);
end;

procedure TDetalleLiquidacionCollection.LoadFromArray(anArray: ADetalleLiquidacion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleLiquidacionCollection.SaveToArray(anArray: ADetalleLiquidacion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleLiquidacion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleLiquidacionCollection.SetItems(aIndex: integer; const Value: TDetalleLiquidacion);
begin
  TDetalleLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TTipoValor }

procedure TTipoValor.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TTipoValor;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTipoValor) then begin
    lSource := LibraryEmpresas_Intf.TTipoValor(iSource);
    TipoValorID := lSource.TipoValorID;
    Nombre := lSource.Nombre;
    Grupo := lSource.Grupo;
  end;
end;

procedure TTipoValor.ReadComplex(ASerializer: TObject);
var
  l_Grupo: AnsiString;
  l_Nombre: AnsiString;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    Grupo := l_Grupo;
  end
  else begin
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    Grupo := l_Grupo;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).ReadInteger('TipoValorID', otSLong, l_TipoValorID);
    TipoValorID := l_TipoValorID;
  end;
end;

procedure TTipoValor.WriteComplex(ASerializer: TObject);
var
  l_Grupo: AnsiString;
  l_Nombre: AnsiString;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTipoValor);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
  end
  else begin
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_TipoValorID := TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', otSLong, l_TipoValorID);
  end;
end;

{ TTipoValorCollection }
constructor TTipoValorCollection.Create;
begin
  inherited Create(TTipoValor);
end;

constructor TTipoValorCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTipoValorCollection.Add: TTipoValor;
begin
  result := TTipoValor(inherited Add);
end;

function TTipoValorCollection.GetItems(aIndex: integer): TTipoValor;
begin
  result := TTipoValor(inherited Items[aIndex]);
end;

procedure TTipoValorCollection.LoadFromArray(anArray: ATipoValor);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TTipoValorCollection.SaveToArray(anArray: ATipoValor);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TTipoValor.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TTipoValorCollection.SetItems(aIndex: integer; const Value: TTipoValor);
begin
  TTipoValor(inherited Items[aIndex]).Assign(Value);
end;

{ TPerfilPuntos }

procedure TPerfilPuntos.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TPerfilPuntos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TPerfilPuntos) then begin
    lSource := LibraryEmpresas_Intf.TPerfilPuntos(iSource);
    FechaIni := lSource.FechaIni;
    FechaFin := lSource.FechaFin;
    Criterio := lSource.Criterio;
    NewField3 := lSource.NewField3;
  end;
end;

procedure TPerfilPuntos.ReadComplex(ASerializer: TObject);
var
  l_Criterio: Double;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_NewField3: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_Criterio := Criterio;
    TROSerializer(ASerializer).ReadDouble('Criterio', ftDouble, l_Criterio);
    Criterio := l_Criterio;
    l_NewField3 := NewField3;
    TROSerializer(ASerializer).ReadAnsiString('NewField3', l_NewField3);
    NewField3 := l_NewField3;
  end
  else begin
    l_Criterio := Criterio;
    TROSerializer(ASerializer).ReadDouble('Criterio', ftDouble, l_Criterio);
    Criterio := l_Criterio;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_NewField3 := NewField3;
    TROSerializer(ASerializer).ReadAnsiString('NewField3', l_NewField3);
    NewField3 := l_NewField3;
  end;
end;

procedure TPerfilPuntos.WriteComplex(ASerializer: TObject);
var
  l_Criterio: Double;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_NewField3: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TPerfilPuntos);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_Criterio := Criterio;
    TROSerializer(ASerializer).WriteDouble('Criterio', ftDouble, l_Criterio);
    l_NewField3 := NewField3;
    TROSerializer(ASerializer).WriteAnsiString('NewField3', l_NewField3);
  end
  else begin
    l_Criterio := Criterio;
    TROSerializer(ASerializer).WriteDouble('Criterio', ftDouble, l_Criterio);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_NewField3 := NewField3;
    TROSerializer(ASerializer).WriteAnsiString('NewField3', l_NewField3);
  end;
end;

{ TPerfilPuntosCollection }
constructor TPerfilPuntosCollection.Create;
begin
  inherited Create(TPerfilPuntos);
end;

constructor TPerfilPuntosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TPerfilPuntosCollection.Add: TPerfilPuntos;
begin
  result := TPerfilPuntos(inherited Add);
end;

function TPerfilPuntosCollection.GetItems(aIndex: integer): TPerfilPuntos;
begin
  result := TPerfilPuntos(inherited Items[aIndex]);
end;

procedure TPerfilPuntosCollection.SetItems(aIndex: integer; const Value: TPerfilPuntos);
begin
  TPerfilPuntos(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronica }

procedure TFacturaElectronica.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TFacturaElectronica;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronica) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronica(iSource);
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Fecha := lSource.Fecha;
    noAprobacion := lSource.noAprobacion;
    anoAprobacion := lSource.anoAprobacion;
    tipoComprobante := lSource.tipoComprobante;
    formaDePago := lSource.formaDePago;
    SubTotal := lSource.SubTotal;
    MunicipioEmisor := lSource.MunicipioEmisor;
    Total := lSource.Total;
    RFCEmisor := lSource.RFCEmisor;
    NomEmpEmisor := lSource.NomEmpEmisor;
    DireccionEm := lSource.DireccionEm;
    NoExteriorEm := lSource.NoExteriorEm;
    ColoniaEmisor := lSource.ColoniaEmisor;
    EstadoEmisor := lSource.EstadoEmisor;
    PaisEmisor := lSource.PaisEmisor;
    CodigoPostalEmisor := lSource.CodigoPostalEmisor;
    RFCReceptor := lSource.RFCReceptor;
    NombreReceptor := lSource.NombreReceptor;
    DomicilioReceptor := lSource.DomicilioReceptor;
    NoExteriorReceptor := lSource.NoExteriorReceptor;
    ColoniaReceptor := lSource.ColoniaReceptor;
    LocalidadReceptor := lSource.LocalidadReceptor;
    MunicipioReceptor := lSource.MunicipioReceptor;
    EstadoReceptor := lSource.EstadoReceptor;
    PaisReceptor := lSource.PaisReceptor;
    CodigoPostalReceptor := lSource.CodigoPostalReceptor;
    FacturaElectronicaDetalleImportes.Assign(lSource.FacturaElectronicaDetalleImportes);
    FacturaElectronicaDetalleImpuestos.Assign(lSource.FacturaElectronicaDetalleImpuestos);
    TotalImpuesto := lSource.TotalImpuesto;
    CalleExpedidoEn := lSource.CalleExpedidoEn;
    NoExterioExpedidoEn := lSource.NoExterioExpedidoEn;
    ColoniaExpedidoEn := lSource.ColoniaExpedidoEn;
    CodigoPostalExpedidoEn := lSource.CodigoPostalExpedidoEn;
    LocalidadExpedidoEn := lSource.LocalidadExpedidoEn;
    MunicipioExpedidoEn := lSource.MunicipioExpedidoEn;
    EstadoExpedidoEn := lSource.EstadoExpedidoEn;
    PaisExpedidoEn := lSource.PaisExpedidoEn;
    Sucursal := lSource.Sucursal;
    email := lSource.email;
  end;
end;

function TFacturaElectronica.GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
begin
  if (fFacturaElectronicaDetalleImportes = nil) then fFacturaElectronicaDetalleImportes := ATFacturaElectronicaDetalleImportes.Create();
  result := fFacturaElectronicaDetalleImportes;
end;

function TFacturaElectronica.GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
begin
  if (fFacturaElectronicaDetalleImpuestos = nil) then fFacturaElectronicaDetalleImpuestos := ATFacturaElectronicaDetalleImpuestos.Create();
  result := fFacturaElectronicaDetalleImpuestos;
end;

procedure TFacturaElectronica.ReadComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formaDePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEm: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_formaDePago := formaDePago;
    TROSerializer(ASerializer).ReadAnsiString('formaDePago', l_formaDePago);
    formaDePago := l_formaDePago;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_NoExteriorEm := NoExteriorEm;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEm', l_NoExteriorEm);
    NoExteriorEm := l_NoExteriorEm;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_formaDePago := formaDePago;
    TROSerializer(ASerializer).ReadAnsiString('formaDePago', l_formaDePago);
    formaDePago := l_formaDePago;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_NoExteriorEm := NoExteriorEm;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEm', l_NoExteriorEm);
    NoExteriorEm := l_NoExteriorEm;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
  end;
end;

procedure TFacturaElectronica.WriteComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formaDePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEm: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronica);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_formaDePago := formaDePago;
    TROSerializer(ASerializer).WriteAnsiString('formaDePago', l_formaDePago);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_NoExteriorEm := NoExteriorEm;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEm', l_NoExteriorEm);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_formaDePago := formaDePago;
    TROSerializer(ASerializer).WriteAnsiString('formaDePago', l_formaDePago);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_NoExteriorEm := NoExteriorEm;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEm', l_NoExteriorEm);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
  end;
end;

{ TFacturaElectronicaCollection }
constructor TFacturaElectronicaCollection.Create;
begin
  inherited Create(TFacturaElectronica);
end;

constructor TFacturaElectronicaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaCollection.Add: TFacturaElectronica;
begin
  result := TFacturaElectronica(inherited Add);
end;

function TFacturaElectronicaCollection.GetItems(aIndex: integer): TFacturaElectronica;
begin
  result := TFacturaElectronica(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaCollection.SetItems(aIndex: integer; const Value: TFacturaElectronica);
begin
  TFacturaElectronica(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImportes }

procedure TFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes(iSource);
    CantidadReceptor := lSource.CantidadReceptor;
    UnidadReceptor := lSource.UnidadReceptor;
    DescripcionReceptor := lSource.DescripcionReceptor;
    ValorUnitarioReceptor := lSource.ValorUnitarioReceptor;
    ImporteReceptor := lSource.ImporteReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImportes);
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImportesCollection }
constructor TFacturaElectronicaDetalleImportesCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImportes);
end;

constructor TFacturaElectronicaDetalleImportesCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImportesCollection.Add: TFacturaElectronicaDetalleImportes;
begin
  result := TFacturaElectronicaDetalleImportes(inherited Add);
end;

function TFacturaElectronicaDetalleImportesCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImportes;
begin
  result := TFacturaElectronicaDetalleImportes(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImportesCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImportesCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImportes.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImportesCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImportes);
begin
  TFacturaElectronicaDetalleImportes(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImpuestos }

procedure TFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos(iSource);
    ImpuestoReceptor := lSource.ImpuestoReceptor;
    TasaReceptor := lSource.TasaReceptor;
    ImporteImpReceptor := lSource.ImporteImpReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImpuestos);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImpuestosCollection }
constructor TFacturaElectronicaDetalleImpuestosCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImpuestos);
end;

constructor TFacturaElectronicaDetalleImpuestosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImpuestosCollection.Add: TFacturaElectronicaDetalleImpuestos;
begin
  result := TFacturaElectronicaDetalleImpuestos(inherited Add);
end;

function TFacturaElectronicaDetalleImpuestosCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestos;
begin
  result := TFacturaElectronicaDetalleImpuestos(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImpuestos.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestos);
begin
  TFacturaElectronicaDetalleImpuestos(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFacturaPemex }

procedure TDatosFacturaPemex.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDatosFacturaPemex;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosFacturaPemex) then begin
    lSource := LibraryEmpresas_Intf.TDatosFacturaPemex(iSource);
    TurnoID := lSource.TurnoID;
    EstacionID := lSource.EstacionID;
    Fecha := lSource.Fecha;
    Nombre := lSource.Nombre;
    FacturaPemexID := lSource.FacturaPemexID;
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Total := lSource.Total;
    DetalleFactura.Assign(lSource.DetalleFactura);
    ProductoID := lSource.ProductoID;
  end;
end;

function TDatosFacturaPemex.GetDetalleFactura: ADetalleFacturaPemex;
begin
  if (fDetalleFactura = nil) then fDetalleFactura := ADetalleFacturaPemex.Create();
  result := fDetalleFactura;
end;

procedure TDatosFacturaPemex.ReadComplex(ASerializer: TObject);
var
  l_DetalleFactura: ADetalleFacturaPemex;
  l_EstacionID: Integer;
  l_FacturaPemexID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Serie: AnsiString;
  l_Total: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).ReadInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    FacturaPemexID := l_FacturaPemexID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).ReadArray('DetalleFactura', ADetalleFacturaPemex, l_DetalleFactura);
    if DetalleFactura <> l_DetalleFactura then DetalleFactura.Free;
    DetalleFactura := l_DetalleFactura;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end
  else begin
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).ReadArray('DetalleFactura', ADetalleFacturaPemex, l_DetalleFactura);
    if DetalleFactura <> l_DetalleFactura then DetalleFactura.Free;
    DetalleFactura := l_DetalleFactura;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).ReadInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    FacturaPemexID := l_FacturaPemexID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
  end;
end;

procedure TDatosFacturaPemex.WriteComplex(ASerializer: TObject);
var
  l_DetalleFactura: ADetalleFacturaPemex;
  l_EstacionID: Integer;
  l_FacturaPemexID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Serie: AnsiString;
  l_Total: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFacturaPemex);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ADetalleFacturaPemex);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end
  else begin
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ADetalleFacturaPemex);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
  end;
end;

{ TDatosFacturaPemexCollection }
constructor TDatosFacturaPemexCollection.Create;
begin
  inherited Create(TDatosFacturaPemex);
end;

constructor TDatosFacturaPemexCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaPemexCollection.Add: TDatosFacturaPemex;
begin
  result := TDatosFacturaPemex(inherited Add);
end;

function TDatosFacturaPemexCollection.GetItems(aIndex: integer): TDatosFacturaPemex;
begin
  result := TDatosFacturaPemex(inherited Items[aIndex]);
end;

procedure TDatosFacturaPemexCollection.SetItems(aIndex: integer; const Value: TDatosFacturaPemex);
begin
  TDatosFacturaPemex(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFacturaPemex }

procedure TDetalleFacturaPemex.Assign(iSource: TPersistent); 
var lSource: LibraryEmpresas_Intf.TDetalleFacturaPemex;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleFacturaPemex) then begin
    lSource := LibraryEmpresas_Intf.TDetalleFacturaPemex(iSource);
    FacturaPemexID := lSource.FacturaPemexID;
    TipoValorPemexID := lSource.TipoValorPemexID;
    Cantidad := lSource.Cantidad;
    Importe := lSource.Importe;
    Precio := lSource.Precio;
  end;
end;

procedure TDetalleFacturaPemex.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_FacturaPemexID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_TipoValorPemexID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).ReadInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    FacturaPemexID := l_FacturaPemexID;
    l_TipoValorPemexID := TipoValorPemexID;
    TROSerializer(ASerializer).ReadInteger('TipoValorPemexID', otSLong, l_TipoValorPemexID);
    TipoValorPemexID := l_TipoValorPemexID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).ReadInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    FacturaPemexID := l_FacturaPemexID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_TipoValorPemexID := TipoValorPemexID;
    TROSerializer(ASerializer).ReadInteger('TipoValorPemexID', otSLong, l_TipoValorPemexID);
    TipoValorPemexID := l_TipoValorPemexID;
  end;
end;

procedure TDetalleFacturaPemex.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_FacturaPemexID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_TipoValorPemexID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFacturaPemex);
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    l_TipoValorPemexID := TipoValorPemexID;
    TROSerializer(ASerializer).WriteInteger('TipoValorPemexID', otSLong, l_TipoValorPemexID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_FacturaPemexID := FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', otSLong, l_FacturaPemexID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_TipoValorPemexID := TipoValorPemexID;
    TROSerializer(ASerializer).WriteInteger('TipoValorPemexID', otSLong, l_TipoValorPemexID);
  end;
end;

{ TDetalleFacturaPemexCollection }
constructor TDetalleFacturaPemexCollection.Create;
begin
  inherited Create(TDetalleFacturaPemex);
end;

constructor TDetalleFacturaPemexCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaPemexCollection.Add: TDetalleFacturaPemex;
begin
  result := TDetalleFacturaPemex(inherited Add);
end;

function TDetalleFacturaPemexCollection.GetItems(aIndex: integer): TDetalleFacturaPemex;
begin
  result := TDetalleFacturaPemex(inherited Items[aIndex]);
end;

procedure TDetalleFacturaPemexCollection.LoadFromArray(anArray: ADetalleFacturaPemex);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleFacturaPemexCollection.SaveToArray(anArray: ADetalleFacturaPemex);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleFacturaPemex.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleFacturaPemexCollection.SetItems(aIndex: integer; const Value: TDetalleFacturaPemex);
begin
  TDetalleFacturaPemex(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceEmpresas }

class function CoServiceEmpresas.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceEmpresas;
begin
  result := TServiceEmpresas_Proxy.Create(aMessage, aTransportChannel);
end;

{ TServiceEmpresas_Proxy }

function TServiceEmpresas_Proxy.__GetInterfaceName:string;
begin
  result := 'ServiceEmpresas';
end;

function TServiceEmpresas_Proxy.AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'AbreDataSetReporte');
    __Message.Write('SQL', TypeInfo(AnsiString), SQL, []);
    __Message.Write('Parametros', TypeInfo(LibraryEmpresas_Intf.TParametros), Parametros, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaCupon');
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
    __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
    __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
    __Message.Write('Liquidacion', TypeInfo(Integer), Liquidacion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaCuponConReferencia');
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
    __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
    __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaLiquidacionCorte');
    __Message.Write('Liquidacion', TypeInfo(Integer), Liquidacion, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('AgrupacionID', TypeInfo(Integer), AgrupacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizarStatusValeCredito');
    __Message.Write('CarteraValeCreditoID', TypeInfo(Integer), CarteraValeCreditoID, []);
    __Message.Write('Status', TypeInfo(AnsiString), Status, []);
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; 
                                                      const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaStatusCupon');
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
    __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
    __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
    __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; 
                                              const UsuarioID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GeneraFactura');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('FechaCorte', TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaReporte');
    __Message.Write('Nombre', TypeInfo(AnsiString), Nombre, []);
    __Message.Write('TipoTemplate', TypeInfo(Integer), TipoTemplate, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TReporte), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CambiaFolioFactura');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('NewSerie', TypeInfo(AnsiString), NewSerie, []);
    __Message.Write('NewFolio', TypeInfo(Integer), NewFolio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CancelaFactura');
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CierraLiquidacion');
    __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CostoProducto(const ProductoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CostoProducto');
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosCliente');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TDatosCliente), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'Existencia');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('AlmacenID', TypeInfo(Integer), AlmacenID, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaExpress');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TFacturaExpress), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaID');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.FacturaYLiquidacion(const ClienteID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaYLiquidacion');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.Fecha: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'Fecha');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'Folio');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'FolioActual');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'FolioActual2');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaAccesos');
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaConsumoExpress');
    __Message.Write('Consumo', TypeInfo(LibraryEmpresas_Intf.TConsumoExpress), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaLimiteFactura');
    __Message.Write('UsuarioID', TypeInfo(Int64), UsuarioID, []);
    __Message.Write('Cantidad', TypeInfo(Double), Cantidad, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardarDatosFactura(const DatosFactura: TDatosFactura);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosFactura');
    __Message.Write('DatosFactura', TypeInfo(LibraryEmpresas_Intf.TDatosFactura), DatosFactura, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosLiquidacion');
    __Message.Write('DatosLiquidacion', TypeInfo(LibraryEmpresas_Intf.TDatosLiquidacion), DatosLiquidacion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosReciboPago');
    __Message.Write('DatosReciboPago', TypeInfo(LibraryEmpresas_Intf.TDatosReciboPago), DatosReciboPago, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarFacturaExpress');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TFacturaExpress), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; 
                                                 const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; 
                                                 const Dia: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaDeposito');
    __Message.Write('DepositoID', TypeInfo(Integer), DepositoID, []);
    __Message.Write('Cantidad', TypeInfo(Double), Cantidad, []);
    __Message.Write('Usuario', TypeInfo(Integer), Usuario, []);
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Descripcion', TypeInfo(AnsiString), Descripcion, []);
    __Message.Write('Ejercicio', TypeInfo(Integer), Ejercicio, []);
    __Message.Write('Periodo', TypeInfo(Integer), Periodo, []);
    __Message.Write('Dia', TypeInfo(Integer), Dia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaProductoPrecio');
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Precio', TypeInfo(Double), Precio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'Login');
    __Message.Write('Usuario', TypeInfo(AnsiString), Usuario, []);
    __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TLoginInfo), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ModificarFolioActual');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerStatusCupon');
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerTipoCambioIDPorEstacion');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerTipoCambioPorEstacion');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PrecioProducto');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'StatusTicket');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'SumaAnticipo');
    __Message.Write('Estacion', TypeInfo(Integer), Estacion, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'SumaVentasCorte');
    __Message.Write('Estacion', TypeInfo(Integer), Estacion, []);
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('AgrupacionID', TypeInfo(Integer), AgrupacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValoresTurno');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TValoresTurno), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.VersionServer: AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'VersionServer');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'LiquidacionCerrada');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ClienteValido');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('NewClienteID', TypeInfo(Integer), NewClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaOtroProducto');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Codigo', TypeInfo(AnsiString), Codigo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TOtroProducto), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'TurnoALiquidacionID');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.BuscaSagarpa(const EstacionID: Integer): TSagarpa;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaSagarpa');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TSagarpa), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.PuntosCalculaSaldo(const ClienteID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosCalculaSaldo');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosCalculaPuntos');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Write('Volumen', TypeInfo(Double), Volumen, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.PuntosGuardaDatos(const Datos: TDatosPuntos);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosGuardaDatos');
    __Message.Write('Datos', TypeInfo(LibraryEmpresas_Intf.TDatosPuntos), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.PuntosDatos(const ClienteID: Integer): TDatosPuntos;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosDatos');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TDatosPuntos), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'EliminaAutomaticosLiquidacion');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaDespachadorLiquidacion');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'EntregaPremio');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
    __Message.Write('Cantidad', TypeInfo(Integer), Cantidad, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TEntregaPremio), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.DatosPremio(const PremioID: Integer): TDatosPremio;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosPremio');
    __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TDatosPremio), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ValidaConsumo(const Consumo: TConsumoExpress): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaConsumo');
    __Message.Write('Consumo', TypeInfo(LibraryEmpresas_Intf.TConsumoExpress), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'AgrupacionesBomba');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.AAgrupacion), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosCerrarLiquidacion');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TDatosCerrarLiquidacion), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ProcesaVentasLiquidacion');
    __Message.Write('Datos', TypeInfo(LibraryEmpresas_Intf.TDatosCerrarLiquidacion), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'TicketsLiquidacion');
    __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaFolioFactura');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosGuardaCriterios');
    __Message.Write('PuntosCriterioID', TypeInfo(Integer), PuntosCriterioID, []);
    __Message.Write('Datos', TypeInfo(AnsiString), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosFacturaElectronica');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryEmpresas_Intf.TFacturaElectronica), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString; 
                                                      const EstacionID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'LlavePrivaCertificado');
    __Message.Write('LlavePrivada', TypeInfo(AnsiString), LlavePrivada, []);
    __Message.Write('Certificado', TypeInfo(AnsiString), Certificado, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Write('Password', TypeInfo(AnsiString), Password, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.SELLOPEMs(const Texto: Widestring; const EstacionID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'SELLOPEMs');
    __Message.Write('Texto', TypeInfo(Widestring), Texto, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CERs(const DIR: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CERs');
    __Message.Write('DIR', TypeInfo(AnsiString), DIR, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaLiquidacionDespachador');
    __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaLiquidacionProd');
    __Message.Write('Estacion', TypeInfo(Integer), Estacion, []);
    __Message.Write('FechaIni', TypeInfo(DateTime), FechaIni, [paIsDateTime]);
    __Message.Write('FechaFin', TypeInfo(DateTime), FechaFin, [paIsDateTime]);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosDespachador');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosFacturaPemex');
    __Message.Write('DatosFacturaPemex', TypeInfo(LibraryEmpresas_Intf.TDatosFacturaPemex), DatosFacturaPemex, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'AfectaInventarios');
    __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceEmpresas_Proxy.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                                           const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                                           const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaFacturaElectronica');
    __Message.Write('FacturaElectronicaID', TypeInfo(Integer), FacturaElectronicaID, []);
    __Message.Write('CadenaOriginal', TypeInfo(Widestring), CadenaOriginal, []);
    __Message.Write('SelloDigital', TypeInfo(Widestring), SelloDigital, []);
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('Vigencia', TypeInfo(Boolean), Vigencia, []);
    __Message.Write('Enviado', TypeInfo(Boolean), Enviado, []);
    __Message.Write('NoCertificado', TypeInfo(AnsiString), NoCertificado, []);
    __Message.Write('NoAprobacion', TypeInfo(AnsiString), NoAprobacion, []);
    __Message.Write('FechaAprobacion', TypeInfo(DateTime), FechaAprobacion, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceEmpresas_Proxy.CERsNUM(const DIR: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryEmpresas', __InterfaceName, 'CERsNUM');
    __Message.Write('DIR', TypeInfo(AnsiString), DIR, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

initialization
  RegisterROClass(TParametros);
  RegisterROClass(TFactura);
  RegisterROClass(TDetalleFactura);
  RegisterROClass(TTicketFactura);
  RegisterROClass(TDetalleCupon);
  RegisterROClass(TDetalleValeCreditoFactura);
  RegisterROClass(TDatosFactura);
  RegisterROClass(TLiquidacion);
  RegisterROClass(TLiquidacionDetalle);
  RegisterROClass(TLiquidacionProducto);
  RegisterROClass(TTransaccion);
  RegisterROClass(TDetalleTransaccion);
  RegisterROClass(TCarteraVale);
  RegisterROClass(TDatosLiquidacion);
  RegisterROClass(TReporte);
  RegisterROClass(TRecibo);
  RegisterROClass(TDetalleReciboPago);
  RegisterROClass(TDatosReciboPago);
  RegisterROClass(TDatosRecibo);
  RegisterROClass(TLoginInfo);
  RegisterROClass(TOpcion);
  RegisterROClass(TConsumoExpress);
  RegisterROClass(TDatosCliente);
  RegisterROClass(TFacturaExpress);
  RegisterROClass(TDetalleExpress);
  RegisterROClass(TValoresTurno);
  RegisterROClass(TOtroProducto);
  RegisterROClass(TAgrupacion);
  RegisterROClass(TSagarpa);
  RegisterROClass(TDatosPuntos);
  RegisterROClass(TDatosCelular);
  RegisterROClass(TEntregaPremio);
  RegisterROClass(TDatosPremio);
  RegisterROClass(TConfirmaEnvioA);
  RegisterROClass(TDatosCerrarLiquidacion);
  RegisterROClass(TDespachadorLiquidacion);
  RegisterROClass(TDetalleLiquidacion);
  RegisterROClass(TTipoValor);
  RegisterROClass(TPerfilPuntos);
  RegisterROClass(TFacturaElectronica);
  RegisterROClass(TFacturaElectronicaDetalleImportes);
  RegisterROClass(TFacturaElectronicaDetalleImpuestos);
  RegisterROClass(TDatosFacturaPemex);
  RegisterROClass(TDetalleFacturaPemex);
  RegisterROClass(ATDetalleCupon);
  RegisterROClass(ATDetalleFactura);
  RegisterROClass(ATTicketFactura);
  RegisterROClass(ATDetalleValeCreditoFactura);
  RegisterROClass(ATLiquidacionDetalle);
  RegisterROClass(ATLiquidacionProducto);
  RegisterROClass(ATDetalleTransaccion);
  RegisterROClass(ATCarteraVale);
  RegisterROClass(ATDetalleRecibo);
  RegisterROClass(ArrayOpcion);
  RegisterROClass(ADetalleExpress);
  RegisterROClass(AAgrupacionBomba);
  RegisterROClass(AAgrupacion);
  RegisterROClass(ADatosCelular);
  RegisterROClass(ADespachadorLiquidacion);
  RegisterROClass(ADetalleLiquidacion);
  RegisterROClass(ATipoValor);
  RegisterROClass(ATFacturaElectronicaDetalleImportes);
  RegisterROClass(ATFacturaElectronicaDetalleImpuestos);
  RegisterROClass(ADetalleFacturaPemex);
  RegisterProxyClass(IServiceEmpresas_IID, TServiceEmpresas_Proxy);


finalization
  UnregisterROClass(TParametros);
  UnregisterROClass(TFactura);
  UnregisterROClass(TDetalleFactura);
  UnregisterROClass(TTicketFactura);
  UnregisterROClass(TDetalleCupon);
  UnregisterROClass(TDetalleValeCreditoFactura);
  UnregisterROClass(TDatosFactura);
  UnregisterROClass(TLiquidacion);
  UnregisterROClass(TLiquidacionDetalle);
  UnregisterROClass(TLiquidacionProducto);
  UnregisterROClass(TTransaccion);
  UnregisterROClass(TDetalleTransaccion);
  UnregisterROClass(TCarteraVale);
  UnregisterROClass(TDatosLiquidacion);
  UnregisterROClass(TReporte);
  UnregisterROClass(TRecibo);
  UnregisterROClass(TDetalleReciboPago);
  UnregisterROClass(TDatosReciboPago);
  UnregisterROClass(TDatosRecibo);
  UnregisterROClass(TLoginInfo);
  UnregisterROClass(TOpcion);
  UnregisterROClass(TConsumoExpress);
  UnregisterROClass(TDatosCliente);
  UnregisterROClass(TFacturaExpress);
  UnregisterROClass(TDetalleExpress);
  UnregisterROClass(TValoresTurno);
  UnregisterROClass(TOtroProducto);
  UnregisterROClass(TAgrupacion);
  UnregisterROClass(TSagarpa);
  UnregisterROClass(TDatosPuntos);
  UnregisterROClass(TDatosCelular);
  UnregisterROClass(TEntregaPremio);
  UnregisterROClass(TDatosPremio);
  UnregisterROClass(TConfirmaEnvioA);
  UnregisterROClass(TDatosCerrarLiquidacion);
  UnregisterROClass(TDespachadorLiquidacion);
  UnregisterROClass(TDetalleLiquidacion);
  UnregisterROClass(TTipoValor);
  UnregisterROClass(TPerfilPuntos);
  UnregisterROClass(TFacturaElectronica);
  UnregisterROClass(TFacturaElectronicaDetalleImportes);
  UnregisterROClass(TFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(TDatosFacturaPemex);
  UnregisterROClass(TDetalleFacturaPemex);
  UnregisterROClass(ATDetalleCupon);
  UnregisterROClass(ATDetalleFactura);
  UnregisterROClass(ATTicketFactura);
  UnregisterROClass(ATDetalleValeCreditoFactura);
  UnregisterROClass(ATLiquidacionDetalle);
  UnregisterROClass(ATLiquidacionProducto);
  UnregisterROClass(ATDetalleTransaccion);
  UnregisterROClass(ATCarteraVale);
  UnregisterROClass(ATDetalleRecibo);
  UnregisterROClass(ArrayOpcion);
  UnregisterROClass(ADetalleExpress);
  UnregisterROClass(AAgrupacionBomba);
  UnregisterROClass(AAgrupacion);
  UnregisterROClass(ADatosCelular);
  UnregisterROClass(ADespachadorLiquidacion);
  UnregisterROClass(ADetalleLiquidacion);
  UnregisterROClass(ATipoValor);
  UnregisterROClass(ATFacturaElectronicaDetalleImportes);
  UnregisterROClass(ATFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(ADetalleFacturaPemex);
  UnregisterProxyClass(IServiceEmpresas_IID);

end.
