unit LibraryEmpresas_Async;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROTypes, uROClientIntf, uROAsync,
  {Used RODLs:} DataAbstract4_Intf, DataAbstract4_Async,
  {Project:} LibraryAdministracion_Intf;

type
  { IServiceAdministracion_Async }
  IServiceAdministracion_Async = interface(IDataAbstractService_Async)
    ['{6129903A-BE6A-4B52-90FF-F72B3107844B}']
    procedure Invoke_AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros);
    procedure Invoke_ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure Invoke_ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure Invoke_ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure Invoke_ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure Invoke_ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    procedure Invoke_GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; const UsuarioID: Integer);
    procedure Invoke_BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer);
    procedure Invoke_CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer);
    procedure Invoke_CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer);
    procedure Invoke_CierraLiquidacion(const LiquidacionID: Integer);
    procedure Invoke_CostoProducto(const ProductoID: Integer);
    procedure Invoke_DatosCliente(const ClienteID: Integer; const Referencia: AnsiString);
    procedure Invoke_Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime);
    procedure Invoke_FacturaExpress(const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_FacturaID(const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_FacturaYLiquidacion(const ClienteID: Integer);
    procedure Invoke_Fecha;
    procedure Invoke_Folio(const Campo: AnsiString; const Serie: AnsiString);
    procedure Invoke_FolioActual(const Campo: AnsiString; const Serie: AnsiString);
    procedure Invoke_GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    procedure Invoke_GuardaConsumoExpress(const Consumo: TConsumoExpress);
    procedure Invoke_GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure Invoke_GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure Invoke_GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure Invoke_GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    procedure Invoke_GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer);
    procedure Invoke_InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; const Dia: Integer);
    procedure Invoke_InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    procedure Invoke_Login(const Usuario: AnsiString; const Clave: AnsiString);
    procedure Invoke_ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_ObtenerStatusCupon(const Barras: AnsiString);
    procedure Invoke_ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer);
    procedure Invoke_ObtenerTipoCambioPorEstacion(const EstacionID: Integer);
    procedure Invoke_PrecioProducto(const EstacionID: Integer; const ProductoID: Integer);
    procedure Invoke_StatusTicket(const EstacionID: Integer; const TicketID: Integer);
    procedure Invoke_SumaAnticipo(const Estacion: Integer; const Secuencia: Integer);
    procedure Invoke_SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure Invoke_ValoresTurno(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_VersionServer;
    procedure Invoke_LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_ClienteValido(const ClienteID: Integer; const NewClienteID: Integer);
    procedure Invoke_BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString);
    procedure Invoke_TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer);
    procedure Invoke_BuscaSagarpa(const EstacionID: Integer);
    procedure Invoke_PuntosCalculaSaldo(const ClienteID: Integer);
    procedure Invoke_PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double);
    procedure Invoke_PuntosGuardaDatos(const Datos: TDatosPuntos);
    procedure Invoke_PuntosDatos(const ClienteID: Integer);
    procedure Invoke_EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer);
    procedure Invoke_DatosPremio(const PremioID: Integer);
    procedure Invoke_ValidaConsumo(const Consumo: TConsumoExpress);
    procedure Invoke_AgrupacionesBomba(const EstacionID: Integer);
    procedure Invoke_DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    procedure Invoke_TicketsLiquidacion(const LiquidacionID: Integer);
    procedure Invoke_ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer);
    function Retrieve_AbreDataSetReporte: Binary;
    function Retrieve_GeneraFactura: Integer;
    function Retrieve_BuscaReporte: TReporte;
    function Retrieve_CambiaFolioFactura: AnsiString;
    function Retrieve_CancelaFactura: AnsiString;
    function Retrieve_CierraLiquidacion: AnsiString;
    function Retrieve_CostoProducto: Double;
    function Retrieve_DatosCliente: TDatosCliente;
    function Retrieve_Existencia: Double;
    function Retrieve_FacturaExpress: TFacturaExpress;
    function Retrieve_FacturaID: Integer;
    function Retrieve_FacturaYLiquidacion: Boolean;
    function Retrieve_Fecha: DateTime;
    function Retrieve_Folio: Integer;
    function Retrieve_FolioActual: Integer;
    function Retrieve_GuardaConsumoExpress: Boolean;
    function Retrieve_GuardarFacturaExpress: TFacturaExpress;
    function Retrieve_Login: TLoginInfo;
    function Retrieve_ModificarFolioActual: AnsiString;
    function Retrieve_ObtenerStatusCupon: AnsiString;
    function Retrieve_ObtenerTipoCambioIDPorEstacion: Integer;
    function Retrieve_ObtenerTipoCambioPorEstacion: Double;
    function Retrieve_PrecioProducto: Double;
    function Retrieve_StatusTicket: Integer;
    function Retrieve_SumaAnticipo: Double;
    function Retrieve_SumaVentasCorte: Double;
    function Retrieve_ValoresTurno: TValoresTurno;
    function Retrieve_VersionServer: AnsiString;
    function Retrieve_LiquidacionCerrada: Boolean;
    function Retrieve_ClienteValido: Boolean;
    function Retrieve_BuscaOtroProducto: TOtroProducto;
    function Retrieve_TurnoALiquidacionID: Integer;
    function Retrieve_BuscaSagarpa: TSagarpa;
    function Retrieve_PuntosCalculaSaldo: Double;
    function Retrieve_PuntosCalculaPuntos: Double;
    function Retrieve_PuntosDatos: TDatosPuntos;
    function Retrieve_EliminaAutomaticosLiquidacion: Boolean;
    function Retrieve_BuscaDespachadorLiquidacion: Integer;
    function Retrieve_EntregaPremio: TEntregaPremio;
    function Retrieve_DatosPremio: TDatosPremio;
    function Retrieve_ValidaConsumo: Integer;
    function Retrieve_AgrupacionesBomba: AAgrupacion;
    function Retrieve_DatosCerrarLiquidacion: TDatosCerrarLiquidacion;
    function Retrieve_TicketsLiquidacion: AnsiString;
    function Retrieve_ValidaFolioFactura: Boolean;
  end;

  { CoServiceAdministracion_Async }
  CoServiceAdministracion_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceAdministracion_Async;
  end;

  { TServiceAdministracion_AsyncProxy }
  TServiceAdministracion_AsyncProxy = class(TDataAbstractService_AsyncProxy, IServiceAdministracion_Async)
  private
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros);
    procedure Invoke_ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure Invoke_ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure Invoke_ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure Invoke_ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure Invoke_ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    procedure Invoke_GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; const UsuarioID: Integer);
    procedure Invoke_BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer);
    procedure Invoke_CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer);
    procedure Invoke_CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer);
    procedure Invoke_CierraLiquidacion(const LiquidacionID: Integer);
    procedure Invoke_CostoProducto(const ProductoID: Integer);
    procedure Invoke_DatosCliente(const ClienteID: Integer; const Referencia: AnsiString);
    procedure Invoke_Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime);
    procedure Invoke_FacturaExpress(const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_FacturaID(const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_FacturaYLiquidacion(const ClienteID: Integer);
    procedure Invoke_Fecha;
    procedure Invoke_Folio(const Campo: AnsiString; const Serie: AnsiString);
    procedure Invoke_FolioActual(const Campo: AnsiString; const Serie: AnsiString);
    procedure Invoke_GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    procedure Invoke_GuardaConsumoExpress(const Consumo: TConsumoExpress);
    procedure Invoke_GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure Invoke_GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure Invoke_GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure Invoke_GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    procedure Invoke_GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer);
    procedure Invoke_InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; const Dia: Integer);
    procedure Invoke_InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    procedure Invoke_Login(const Usuario: AnsiString; const Clave: AnsiString);
    procedure Invoke_ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer);
    procedure Invoke_ObtenerStatusCupon(const Barras: AnsiString);
    procedure Invoke_ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer);
    procedure Invoke_ObtenerTipoCambioPorEstacion(const EstacionID: Integer);
    procedure Invoke_PrecioProducto(const EstacionID: Integer; const ProductoID: Integer);
    procedure Invoke_StatusTicket(const EstacionID: Integer; const TicketID: Integer);
    procedure Invoke_SumaAnticipo(const Estacion: Integer; const Secuencia: Integer);
    procedure Invoke_SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure Invoke_ValoresTurno(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_VersionServer;
    procedure Invoke_LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_ClienteValido(const ClienteID: Integer; const NewClienteID: Integer);
    procedure Invoke_BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString);
    procedure Invoke_TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer);
    procedure Invoke_BuscaSagarpa(const EstacionID: Integer);
    procedure Invoke_PuntosCalculaSaldo(const ClienteID: Integer);
    procedure Invoke_PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double);
    procedure Invoke_PuntosGuardaDatos(const Datos: TDatosPuntos);
    procedure Invoke_PuntosDatos(const ClienteID: Integer);
    procedure Invoke_EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer);
    procedure Invoke_DatosPremio(const PremioID: Integer);
    procedure Invoke_ValidaConsumo(const Consumo: TConsumoExpress);
    procedure Invoke_AgrupacionesBomba(const EstacionID: Integer);
    procedure Invoke_DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
    procedure Invoke_ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    procedure Invoke_TicketsLiquidacion(const LiquidacionID: Integer);
    procedure Invoke_ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer);
    function Retrieve_AbreDataSetReporte: Binary;
    function Retrieve_GeneraFactura: Integer;
    function Retrieve_BuscaReporte: TReporte;
    function Retrieve_CambiaFolioFactura: AnsiString;
    function Retrieve_CancelaFactura: AnsiString;
    function Retrieve_CierraLiquidacion: AnsiString;
    function Retrieve_CostoProducto: Double;
    function Retrieve_DatosCliente: TDatosCliente;
    function Retrieve_Existencia: Double;
    function Retrieve_FacturaExpress: TFacturaExpress;
    function Retrieve_FacturaID: Integer;
    function Retrieve_FacturaYLiquidacion: Boolean;
    function Retrieve_Fecha: DateTime;
    function Retrieve_Folio: Integer;
    function Retrieve_FolioActual: Integer;
    function Retrieve_GuardaConsumoExpress: Boolean;
    function Retrieve_GuardarFacturaExpress: TFacturaExpress;
    function Retrieve_Login: TLoginInfo;
    function Retrieve_ModificarFolioActual: AnsiString;
    function Retrieve_ObtenerStatusCupon: AnsiString;
    function Retrieve_ObtenerTipoCambioIDPorEstacion: Integer;
    function Retrieve_ObtenerTipoCambioPorEstacion: Double;
    function Retrieve_PrecioProducto: Double;
    function Retrieve_StatusTicket: Integer;
    function Retrieve_SumaAnticipo: Double;
    function Retrieve_SumaVentasCorte: Double;
    function Retrieve_ValoresTurno: TValoresTurno;
    function Retrieve_VersionServer: AnsiString;
    function Retrieve_LiquidacionCerrada: Boolean;
    function Retrieve_ClienteValido: Boolean;
    function Retrieve_BuscaOtroProducto: TOtroProducto;
    function Retrieve_TurnoALiquidacionID: Integer;
    function Retrieve_BuscaSagarpa: TSagarpa;
    function Retrieve_PuntosCalculaSaldo: Double;
    function Retrieve_PuntosCalculaPuntos: Double;
    function Retrieve_PuntosDatos: TDatosPuntos;
    function Retrieve_EliminaAutomaticosLiquidacion: Boolean;
    function Retrieve_BuscaDespachadorLiquidacion: Integer;
    function Retrieve_EntregaPremio: TEntregaPremio;
    function Retrieve_DatosPremio: TDatosPremio;
    function Retrieve_ValidaConsumo: Integer;
    function Retrieve_AgrupacionesBomba: AAgrupacion;
    function Retrieve_DatosCerrarLiquidacion: TDatosCerrarLiquidacion;
    function Retrieve_TicketsLiquidacion: AnsiString;
    function Retrieve_ValidaFolioFactura: Boolean;
  end;

implementation

uses
  {vcl:} SysUtils;

{ CoServiceAdministracion }

class function CoServiceAdministracion_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceAdministracion_Async;
begin
  result := TServiceAdministracion_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TServiceAdministracion_AsyncProxy }

function TServiceAdministracion_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'ServiceAdministracion';
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros);
begin
  __AssertProxyNotBusy('AbreDataSetReporte');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'AbreDataSetReporte');
  __Message.Write('SQL', TypeInfo(AnsiString), SQL, []);
  __Message.Write('Parametros', TypeInfo(TParametros), Parametros, []);
  __DispatchAsyncRequest('AbreDataSetReporte',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_AbreDataSetReporte: Binary;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('AbreDataSetReporte');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Binary), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
begin
  __AssertProxyNotBusy('ActualizaCupon');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ActualizaCupon');
  __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
  __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
  __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
  __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
  __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
  __Message.Write('Liquidacion', TypeInfo(Integer), Liquidacion, []);
  __DispatchAsyncRequest('ActualizaCupon',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
begin
  __AssertProxyNotBusy('ActualizaCuponConReferencia');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ActualizaCuponConReferencia');
  __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
  __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
  __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
  __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
  __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
  __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
  __DispatchAsyncRequest('ActualizaCuponConReferencia',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
begin
  __AssertProxyNotBusy('ActualizaLiquidacionCorte');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ActualizaLiquidacionCorte');
  __Message.Write('Liquidacion', TypeInfo(Integer), Liquidacion, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __Message.Write('AgrupacionID', TypeInfo(Integer), AgrupacionID, []);
  __DispatchAsyncRequest('ActualizaLiquidacionCorte',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
begin
  __AssertProxyNotBusy('ActualizarStatusValeCredito');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ActualizarStatusValeCredito');
  __Message.Write('CarteraValeCreditoID', TypeInfo(Integer), CarteraValeCreditoID, []);
  __Message.Write('Status', TypeInfo(AnsiString), Status, []);
  __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
  __DispatchAsyncRequest('ActualizarStatusValeCredito',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime; const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
begin
  __AssertProxyNotBusy('ActualizaStatusCupon');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ActualizaStatusCupon');
  __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
  __Message.Write('DiaConsumo', TypeInfo(Integer), DiaConsumo, []);
  __Message.Write('EjercicioConsumo', TypeInfo(Integer), EjercicioConsumo, []);
  __Message.Write('FechaConsumo', TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
  __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
  __Message.Write('PeriodoConsumo', TypeInfo(Integer), PeriodoConsumo, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __DispatchAsyncRequest('ActualizaStatusCupon',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer; const UsuarioID: Integer);
begin
  __AssertProxyNotBusy('GeneraFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GeneraFactura');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('FechaCorte', TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
  __DispatchAsyncRequest('GeneraFactura',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_GeneraFactura: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('GeneraFactura');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer);
begin
  __AssertProxyNotBusy('BuscaReporte');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'BuscaReporte');
  __Message.Write('Nombre', TypeInfo(AnsiString), Nombre, []);
  __Message.Write('TipoTemplate', TypeInfo(Integer), TipoTemplate, []);
  __DispatchAsyncRequest('BuscaReporte',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_BuscaReporte: TReporte;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('BuscaReporte');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TReporte), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer);
begin
  __AssertProxyNotBusy('CambiaFolioFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'CambiaFolioFactura');
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __Message.Write('NewSerie', TypeInfo(AnsiString), NewSerie, []);
  __Message.Write('NewFolio', TypeInfo(Integer), NewFolio, []);
  __DispatchAsyncRequest('CambiaFolioFactura',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_CambiaFolioFactura: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('CambiaFolioFactura');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer);
begin
  __AssertProxyNotBusy('CancelaFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'CancelaFactura');
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
  __DispatchAsyncRequest('CancelaFactura',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_CancelaFactura: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('CancelaFactura');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_CierraLiquidacion(const LiquidacionID: Integer);
begin
  __AssertProxyNotBusy('CierraLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'CierraLiquidacion');
  __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
  __DispatchAsyncRequest('CierraLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_CierraLiquidacion: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('CierraLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_CostoProducto(const ProductoID: Integer);
begin
  __AssertProxyNotBusy('CostoProducto');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'CostoProducto');
  __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
  __DispatchAsyncRequest('CostoProducto',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_CostoProducto: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('CostoProducto');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_DatosCliente(const ClienteID: Integer; const Referencia: AnsiString);
begin
  __AssertProxyNotBusy('DatosCliente');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'DatosCliente');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
  __DispatchAsyncRequest('DatosCliente',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_DatosCliente: TDatosCliente;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('DatosCliente');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TDatosCliente), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime);
begin
  __AssertProxyNotBusy('Existencia');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'Existencia');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('AlmacenID', TypeInfo(Integer), AlmacenID, []);
  __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
  __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
  __DispatchAsyncRequest('Existencia',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_Existencia: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('Existencia');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_FacturaExpress(const Serie: AnsiString; const Folio: Integer);
begin
  __AssertProxyNotBusy('FacturaExpress');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'FacturaExpress');
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __DispatchAsyncRequest('FacturaExpress',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_FacturaExpress: TFacturaExpress;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('FacturaExpress');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TFacturaExpress), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_FacturaID(const Serie: AnsiString; const Folio: Integer);
begin
  __AssertProxyNotBusy('FacturaID');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'FacturaID');
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __DispatchAsyncRequest('FacturaID',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_FacturaID: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('FacturaID');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_FacturaYLiquidacion(const ClienteID: Integer);
begin
  __AssertProxyNotBusy('FacturaYLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'FacturaYLiquidacion');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __DispatchAsyncRequest('FacturaYLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_FacturaYLiquidacion: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('FacturaYLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_Fecha;
begin
  __AssertProxyNotBusy('Fecha');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'Fecha');
  __DispatchAsyncRequest('Fecha',__Message);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_Fecha: DateTime;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('Fecha');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(DateTime), Result, [paIsDateTime]);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_Folio(const Campo: AnsiString; const Serie: AnsiString);
begin
  __AssertProxyNotBusy('Folio');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'Folio');
  __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __DispatchAsyncRequest('Folio',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_Folio: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('Folio');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_FolioActual(const Campo: AnsiString; const Serie: AnsiString);
begin
  __AssertProxyNotBusy('FolioActual');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'FolioActual');
  __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __DispatchAsyncRequest('FolioActual',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_FolioActual: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('FolioActual');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
  __AssertProxyNotBusy('GuardaAccesos');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardaAccesos');
  __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
  __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
  __DispatchAsyncRequest('GuardaAccesos',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardaConsumoExpress(const Consumo: TConsumoExpress);
begin
  __AssertProxyNotBusy('GuardaConsumoExpress');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardaConsumoExpress');
  __Message.Write('Consumo', TypeInfo(TConsumoExpress), Consumo, []);
  __DispatchAsyncRequest('GuardaConsumoExpress',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_GuardaConsumoExpress: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('GuardaConsumoExpress');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
begin
  __AssertProxyNotBusy('GuardaLimiteFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardaLimiteFactura');
  __Message.Write('UsuarioID', TypeInfo(Int64), UsuarioID, []);
  __Message.Write('Cantidad', TypeInfo(Double), Cantidad, []);
  __DispatchAsyncRequest('GuardaLimiteFactura',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardarDatosFactura(const DatosFactura: TDatosFactura);
begin
  __AssertProxyNotBusy('GuardarDatosFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardarDatosFactura');
  __Message.Write('DatosFactura', TypeInfo(TDatosFactura), DatosFactura, []);
  __DispatchAsyncRequest('GuardarDatosFactura',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
begin
  __AssertProxyNotBusy('GuardarDatosLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardarDatosLiquidacion');
  __Message.Write('DatosLiquidacion', TypeInfo(TDatosLiquidacion), DatosLiquidacion, []);
  __DispatchAsyncRequest('GuardarDatosLiquidacion',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
begin
  __AssertProxyNotBusy('GuardarDatosReciboPago');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardarDatosReciboPago');
  __Message.Write('DatosReciboPago', TypeInfo(TDatosReciboPago), DatosReciboPago, []);
  __DispatchAsyncRequest('GuardarDatosReciboPago',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer);
begin
  __AssertProxyNotBusy('GuardarFacturaExpress');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'GuardarFacturaExpress');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
  __DispatchAsyncRequest('GuardarFacturaExpress',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_GuardarFacturaExpress: TFacturaExpress;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('GuardarFacturaExpress');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TFacturaExpress), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer; const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer; const Dia: Integer);
begin
  __AssertProxyNotBusy('InsertaDeposito');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'InsertaDeposito');
  __Message.Write('DepositoID', TypeInfo(Integer), DepositoID, []);
  __Message.Write('Cantidad', TypeInfo(Double), Cantidad, []);
  __Message.Write('Usuario', TypeInfo(Integer), Usuario, []);
  __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('Descripcion', TypeInfo(AnsiString), Descripcion, []);
  __Message.Write('Ejercicio', TypeInfo(Integer), Ejercicio, []);
  __Message.Write('Periodo', TypeInfo(Integer), Periodo, []);
  __Message.Write('Dia', TypeInfo(Integer), Dia, []);
  __DispatchAsyncRequest('InsertaDeposito',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
begin
  __AssertProxyNotBusy('InsertaProductoPrecio');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'InsertaProductoPrecio');
  __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('Precio', TypeInfo(Double), Precio, []);
  __DispatchAsyncRequest('InsertaProductoPrecio',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_Login(const Usuario: AnsiString; const Clave: AnsiString);
begin
  __AssertProxyNotBusy('Login');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'Login');
  __Message.Write('Usuario', TypeInfo(AnsiString), Usuario, []);
  __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
  __DispatchAsyncRequest('Login',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_Login: TLoginInfo;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('Login');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TLoginInfo), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer);
begin
  __AssertProxyNotBusy('ModificarFolioActual');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ModificarFolioActual');
  __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __DispatchAsyncRequest('ModificarFolioActual',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ModificarFolioActual: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ModificarFolioActual');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ObtenerStatusCupon(const Barras: AnsiString);
begin
  __AssertProxyNotBusy('ObtenerStatusCupon');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ObtenerStatusCupon');
  __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
  __DispatchAsyncRequest('ObtenerStatusCupon',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ObtenerStatusCupon: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ObtenerStatusCupon');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer);
begin
  __AssertProxyNotBusy('ObtenerTipoCambioIDPorEstacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ObtenerTipoCambioIDPorEstacion');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __DispatchAsyncRequest('ObtenerTipoCambioIDPorEstacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ObtenerTipoCambioIDPorEstacion: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ObtenerTipoCambioIDPorEstacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ObtenerTipoCambioPorEstacion(const EstacionID: Integer);
begin
  __AssertProxyNotBusy('ObtenerTipoCambioPorEstacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ObtenerTipoCambioPorEstacion');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __DispatchAsyncRequest('ObtenerTipoCambioPorEstacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ObtenerTipoCambioPorEstacion: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ObtenerTipoCambioPorEstacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_PrecioProducto(const EstacionID: Integer; const ProductoID: Integer);
begin
  __AssertProxyNotBusy('PrecioProducto');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'PrecioProducto');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
  __DispatchAsyncRequest('PrecioProducto',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_PrecioProducto: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('PrecioProducto');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_StatusTicket(const EstacionID: Integer; const TicketID: Integer);
begin
  __AssertProxyNotBusy('StatusTicket');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'StatusTicket');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
  __DispatchAsyncRequest('StatusTicket',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_StatusTicket: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('StatusTicket');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_SumaAnticipo(const Estacion: Integer; const Secuencia: Integer);
begin
  __AssertProxyNotBusy('SumaAnticipo');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'SumaAnticipo');
  __Message.Write('Estacion', TypeInfo(Integer), Estacion, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __DispatchAsyncRequest('SumaAnticipo',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_SumaAnticipo: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('SumaAnticipo');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
begin
  __AssertProxyNotBusy('SumaVentasCorte');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'SumaVentasCorte');
  __Message.Write('Estacion', TypeInfo(Integer), Estacion, []);
  __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
  __Message.Write('AgrupacionID', TypeInfo(Integer), AgrupacionID, []);
  __DispatchAsyncRequest('SumaVentasCorte',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_SumaVentasCorte: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('SumaVentasCorte');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ValoresTurno(const EstacionID: Integer; const TurnoID: Integer);
begin
  __AssertProxyNotBusy('ValoresTurno');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ValoresTurno');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __DispatchAsyncRequest('ValoresTurno',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ValoresTurno: TValoresTurno;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('ValoresTurno');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TValoresTurno), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_VersionServer;
begin
  __AssertProxyNotBusy('VersionServer');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'VersionServer');
  __DispatchAsyncRequest('VersionServer',__Message);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_VersionServer: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('VersionServer');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer);
begin
  __AssertProxyNotBusy('LiquidacionCerrada');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'LiquidacionCerrada');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __DispatchAsyncRequest('LiquidacionCerrada',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_LiquidacionCerrada: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('LiquidacionCerrada');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ClienteValido(const ClienteID: Integer; const NewClienteID: Integer);
begin
  __AssertProxyNotBusy('ClienteValido');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ClienteValido');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('NewClienteID', TypeInfo(Integer), NewClienteID, []);
  __DispatchAsyncRequest('ClienteValido',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ClienteValido: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ClienteValido');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString);
begin
  __AssertProxyNotBusy('BuscaOtroProducto');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'BuscaOtroProducto');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('Codigo', TypeInfo(AnsiString), Codigo, []);
  __DispatchAsyncRequest('BuscaOtroProducto',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_BuscaOtroProducto: TOtroProducto;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('BuscaOtroProducto');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TOtroProducto), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer);
begin
  __AssertProxyNotBusy('TurnoALiquidacionID');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'TurnoALiquidacionID');
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __DispatchAsyncRequest('TurnoALiquidacionID',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_TurnoALiquidacionID: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('TurnoALiquidacionID');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_BuscaSagarpa(const EstacionID: Integer);
begin
  __AssertProxyNotBusy('BuscaSagarpa');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'BuscaSagarpa');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __DispatchAsyncRequest('BuscaSagarpa',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_BuscaSagarpa: TSagarpa;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('BuscaSagarpa');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TSagarpa), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_PuntosCalculaSaldo(const ClienteID: Integer);
begin
  __AssertProxyNotBusy('PuntosCalculaSaldo');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'PuntosCalculaSaldo');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __DispatchAsyncRequest('PuntosCalculaSaldo',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_PuntosCalculaSaldo: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('PuntosCalculaSaldo');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double);
begin
  __AssertProxyNotBusy('PuntosCalculaPuntos');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'PuntosCalculaPuntos');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
  __Message.Write('Volumen', TypeInfo(Double), Volumen, []);
  __DispatchAsyncRequest('PuntosCalculaPuntos',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_PuntosCalculaPuntos: Double;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('PuntosCalculaPuntos');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Double), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_PuntosGuardaDatos(const Datos: TDatosPuntos);
begin
  __AssertProxyNotBusy('PuntosGuardaDatos');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'PuntosGuardaDatos');
  __Message.Write('Datos', TypeInfo(TDatosPuntos), Datos, []);
  __DispatchAsyncRequest('PuntosGuardaDatos',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_PuntosDatos(const ClienteID: Integer);
begin
  __AssertProxyNotBusy('PuntosDatos');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'PuntosDatos');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __DispatchAsyncRequest('PuntosDatos',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_PuntosDatos: TDatosPuntos;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('PuntosDatos');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TDatosPuntos), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
begin
  __AssertProxyNotBusy('EliminaAutomaticosLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'EliminaAutomaticosLiquidacion');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __DispatchAsyncRequest('EliminaAutomaticosLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_EliminaAutomaticosLiquidacion: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('EliminaAutomaticosLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer);
begin
  __AssertProxyNotBusy('BuscaDespachadorLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'BuscaDespachadorLiquidacion');
  __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __DispatchAsyncRequest('BuscaDespachadorLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_BuscaDespachadorLiquidacion: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('BuscaDespachadorLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer);
begin
  __AssertProxyNotBusy('EntregaPremio');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'EntregaPremio');
  __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
  __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
  __Message.Write('Cantidad', TypeInfo(Integer), Cantidad, []);
  __DispatchAsyncRequest('EntregaPremio',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_EntregaPremio: TEntregaPremio;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('EntregaPremio');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TEntregaPremio), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_DatosPremio(const PremioID: Integer);
begin
  __AssertProxyNotBusy('DatosPremio');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'DatosPremio');
  __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
  __DispatchAsyncRequest('DatosPremio',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_DatosPremio: TDatosPremio;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('DatosPremio');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TDatosPremio), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ValidaConsumo(const Consumo: TConsumoExpress);
begin
  __AssertProxyNotBusy('ValidaConsumo');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ValidaConsumo');
  __Message.Write('Consumo', TypeInfo(TConsumoExpress), Consumo, []);
  __DispatchAsyncRequest('ValidaConsumo',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ValidaConsumo: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ValidaConsumo');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_AgrupacionesBomba(const EstacionID: Integer);
begin
  __AssertProxyNotBusy('AgrupacionesBomba');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'AgrupacionesBomba');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __DispatchAsyncRequest('AgrupacionesBomba',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_AgrupacionesBomba: AAgrupacion;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('AgrupacionesBomba');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AAgrupacion), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer);
begin
  __AssertProxyNotBusy('DatosCerrarLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'DatosCerrarLiquidacion');
  __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
  __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
  __DispatchAsyncRequest('DatosCerrarLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_DatosCerrarLiquidacion: TDatosCerrarLiquidacion;
var __response:TStream;
begin
  result := nil;
  __response := __RetrieveAsyncResponse('DatosCerrarLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(TDatosCerrarLiquidacion), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
begin
  __AssertProxyNotBusy('ProcesaVentasLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ProcesaVentasLiquidacion');
  __Message.Write('Datos', TypeInfo(TDatosCerrarLiquidacion), Datos, []);
  __DispatchAsyncRequest('ProcesaVentasLiquidacion',__Message, false);
    __Message.UnsetAttributes(__TransportChannel);
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_TicketsLiquidacion(const LiquidacionID: Integer);
begin
  __AssertProxyNotBusy('TicketsLiquidacion');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'TicketsLiquidacion');
  __Message.Write('LiquidacionID', TypeInfo(Integer), LiquidacionID, []);
  __DispatchAsyncRequest('TicketsLiquidacion',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_TicketsLiquidacion: AnsiString;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('TicketsLiquidacion');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(AnsiString), Result, []);

  __response.Free();
end;

procedure TServiceAdministracion_AsyncProxy.Invoke_ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer);
begin
  __AssertProxyNotBusy('ValidaFolioFactura');

  __Message.InitializeRequestMessage(__TransportChannel, 'LibraryAdministracion', __InterfaceName, 'ValidaFolioFactura');
  __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
  __Message.Write('Folio', TypeInfo(Integer), Folio, []);
  __DispatchAsyncRequest('ValidaFolioFactura',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TServiceAdministracion_AsyncProxy.Retrieve_ValidaFolioFactura: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ValidaFolioFactura');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;


initialization
end.
